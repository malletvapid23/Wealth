<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="$(SolutionDir)Framework\T4\EF.Utility.ttinclude"#>
<#@ output extension=".txt"#><#

// To be able to control whether it's going to be executed
var executeMe = true;
if (!executeMe)
	return string.Empty;

const string connectionString = @"Server=(LocalDb)\MSSQLLocalDB;Database=WealthEconomy;Integrated Security=True;MultipleActiveResultSets=True";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var edmMetadataLoader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
IEnumerable<GlobalItem> itemCollection;
using (var db = new WealthEconomyContext(connectionString))
	itemCollection = edmMetadataLoader.CreateEdmItemCollection(db);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), connectionString))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = typeMapper.GetTypeName(entityType);

	// Temp fix for resource pool generated & custom conflict / SH - 25 Nov. '15
	if (entityTypeName == "ResourcePool")
		continue;

	var entityVariable = codeStringGenerator.GetCamelCase(entityTypeName);
	var entityControllerName = string.Format("{0}ListController", entityTypeName);
	var entitySetName = string.Format("{0}Set", entityVariable);
	var entityDeleteMethod = string.Format("delete{0}", entityTypeName);
	var primaryKey = entityType.KeyMembers[0];
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);
	var businessObjectTypeProperties = typeMapper.GetBusinessObjectProperties(entityTypeName);
	var outputFileName = string.Format(@"{0}List.html", entityVariable);

	fileManager.StartNewFile(outputFileName);
#>
<!--
<#= codeStringGenerator.WriteHeader() #>-->
<div data-ng-controller="<#= entityControllerName #> as vm">
    <h2>List</h2>
    <p>
        <a href="/manage/generated/<#= entityVariable #>/new">Create New</a>
    </p>
    <table class="table">
        <tr>
<#
    foreach (var property in simpleProperties)
    {
		// Get business object property
		var businessObjectProperty = businessObjectTypeProperties.SingleOrDefault(item => item.Name == property.Name);

		// Display the property?
		if (businessObjectProperty != null)
        {
			var displayOnListAttribute = typeMapper.GetAttribute<DisplayOnListViewAttribute>(businessObjectProperty);
			if (displayOnListAttribute != null && !displayOnListAttribute.Value)
				continue;
        }
#>
            <th>
                <#= codeStringGenerator.GetPropertyTitle(property) #>
            </th>
<#
    }
#>
            <th></th>
        </tr>
        <tr data-ng-repeat="<#= entityVariable #> in vm.<#= entitySetName #>">
<#
    foreach (var property in simpleProperties)
    {
		// TODO Try to make this better
		// Hide BaseEntity properties
		if (property.Name == "CreatedOn" || property.Name == "ModifiedOn" || property.Name == "DeletedOn" || property.Name == "RowVersion")
			continue;

		// Get business object property
		var businessObjectProperty = businessObjectTypeProperties.SingleOrDefault(item => item.Name == property.Name);

		// Display the property?
		if (businessObjectProperty != null)
        {
			var displayOnListAttribute = typeMapper.GetAttribute<DisplayOnListViewAttribute>(businessObjectProperty);
			if (displayOnListAttribute != null && !displayOnListAttribute.Value)
				continue;
        }
#>
            <td>
                <span data-ng-bind="<#= GetPropertyPath(property, typeMapper, codeStringGenerator) #>"></span>
            </td>
<#
    }
#>
            <td>
                <a data-ng-href="/manage/generated/<#= entityVariable #>/edit/{{ <#= entityVariable #>.<#= primaryKey #> }}">Edit</a> |
                <a href="" data-ng-click="vm.<#= entityDeleteMethod #>(<#= entityVariable #>)">
                    Delete
                </a>
            </td>
        </tr>
    </table>
</div>
<#
}

fileManager.Process();

#>

<#+

string GetPropertyPath(EdmProperty property, TypeMapper typeMapper, CodeStringGenerator codeStringGenerator)
{
	// Get declaring type
	var declaringType = (EntityType)((EdmMember)property).DeclaringType;
	var declaringTypeName = typeMapper.GetTypeName(declaringType);
	var declaringTypeVariable = codeStringGenerator.GetCamelCase(declaringTypeName);

	// 1. Property name itself is the default one
	var propertyPath = string.Format("{0}.{1}", declaringTypeVariable, property.Name); 

	// Is navigation property?
	var navigationProperties = typeMapper.GetRelatedNavigationProperties(declaringType);
	var navigationProperty = navigationProperties.SingleOrDefault(related => ((AssociationType)related.RelationshipType)
		.Constraint
		.ToProperties
		.Any(constraint => constraint.Name == property.Name));

	if (navigationProperty != null)
    {
		// Check DefaultProperty attribute of the related entity
		var relatedEntityType = (EntityType)((RefType)navigationProperty.ToEndMember.TypeUsage.EdmType).ElementType;
		var relatedEntityTypeName = typeMapper.GetTypeName(relatedEntityType);
		var relatedEntityBusinessObjectType = typeMapper.GetBusinessObjectType(relatedEntityTypeName);
		var defaultPropertyAttribute = typeMapper.GetAttribute<DefaultPropertyAttribute>(relatedEntityBusinessObjectType);

		// 2. Use the value of DefaultProperty attribute of the related entity
		if (defaultPropertyAttribute != null)
			propertyPath = string.Format("{0}.{1}.{2}", declaringTypeVariable, relatedEntityTypeName, defaultPropertyAttribute.Value);
    }

	return propertyPath;
}

#>