{"version":3,"sources":["main.js","config/authorization.js","config/breeze.js","config/exceptionHandlerExtension.js","config/googleAnalytics.js","config/route.js","entities/Element.js","entities/ElementCell.js","entities/ElementField.js","entities/ElementItem.js","entities/Enums.js","entities/ResourcePool.js","entities/User.js","entities/UserElementCell.js","entities/UserElementField.js","entities/UserResourcePool.js","factories/applicationFactory.js","factories/dataContext.js","factories/entityManagerFactory.js","factories/locationHistory.js","factories/logger.js","factories/resourcePoolFactory.js","factories/userFactory.js","filters/angular-enum.js","filters/angular-numberSymbol.js","filters/angular-percentage.js","controllers/account/AccountEditController.js","controllers/account/AddPasswordController.js","controllers/account/ChangeEmailController.js","controllers/account/ChangePasswordController.js","controllers/account/ConfirmEmailController.js","controllers/account/LoginController.js","controllers/account/RegisterController.js","controllers/account/ResetPasswordController.js","controllers/resourcePool/ResourcePoolListController.js","controllers/resourcePool/ResourcePoolManageController.js","controllers/resourcePool/ResourcePoolViewController.js","controllers/content/AllInOneController.js","controllers/content/BasicsController.js","controllers/content/DefaultController.js","controllers/content/IntroductionController.js","controllers/content/KnowledgeIndexController.js","controllers/content/PriorityIndexController.js","controllers/content/TotalCostIndexController.js","directives/resourcePoolEditor/resourcePoolEditor.js","factories/generated/resourcePoolFactory.js","factories/generated/userFactory.js","controllers/content/obsolete/FairShareIndexSampleController.js","controllers/content/obsolete/ResourcePoolRateSampleController.js"],"names":["mainRun","logger","forSource","angular","module","run","authorizationConfig","$httpProvider","interceptors","push","interceptorId","authorizationRun","$window","oldClient","OData","defaultHttpClient","newClient","request","success","error","headers","token","fromJson","localStorage","getItem","Authorization","access_token","angularInterceptor","$q","config","response","status","when","factory","breezeConfig","breezeProvider","getRoutePrefix_Microsoft_AspNet_WebApi_OData_5_3_x","dataService","parser","document","createElement","href","serviceName","url","parse","prefix","pathname","substr","breeze","initializeAdapterInstance","adapter","getRoutePrefix","extendHandler","$provide","decorator","exceptionHandlerExtension","$delegate","$injector","serviceAppUrl","getSourceMappedStackTrace","exception","getMapForScript","cache","promise","$http","get","then","m","data","match","path","SMConsumer","reject","sourceMap","SourceMapConsumer","stack","all","$","map","split","stackLine","line","col","pos","originalPositionFor","parseInt","column","mangledName","name","location","origin","source","lines","join","factoryId","exceptionUrl","cause","logError","sourceMappedStack","$location","exceptionModel","Message","message","Cause","Url","Stack","post","setTimeout","analyticsConfig","AnalyticsProvider","analyticsTrackingCode","analyticsDomainName","setAccount","setDomainName","ignoreFirstPageLoad","Analytics","routeConfig","$routeProvider","$locationProvider","getContentRouteTitle","params","title","key","substring","getContentTemplateUrl","validateAccess","userFactory","$route","locationHistory","deferred","defer","createItem","current","getCurrentUser","currentUser","accessType","isAuthenticated","resolve","templateUrl","enableDisqus","otherwise","redirectTo","window","history","pushState","html5Mode","enabled","routeRun","$rootScope","routeChangeError","event","previous","eventObj","previousItem","routeChangeSuccess","viewTitle","$on","elementFactory","Element","directIncome","value","self","ElementItemSet","forEach","item","directIncomeField","backingFields","_directIncomeField","setDirectIncomeField","directIncomeIncludingResourcePoolAmount","elementFieldIndexSet","_elementFieldIndexSet","setElementFieldIndexSet","familyTree","_familyTree","setFamilyTree","fullSize","ElementFieldSet","length","getElementFieldIndexSet","element","sortedElementFieldSet","sort","a","b","SortOrder","indexSet","field","IndexEnabled","DataType","SelectedElement","childIndexSet","childIndex","indexRating","_indexRating","setIndexRating","multiplier","multiplierField","_multiplierField","setMultiplierField","parent","_parent","setParent","resourcePoolAmount","result","filter","unshift","updateRelated","index","setIndexRatingPercentage","ParentFieldSet","totalDirectIncome","totalDirectIncomeIncludingResourcePoolAmount","totalIncome","totalIncomeAverage","totalResourcePoolAmount","ResourcePool","mainElement","InitialValue","_totalResourcePoolAmount","setIndexIncome","this","Id","Name","_IsMainElement","isEditing","Object","defineProperty","prototype","enumerable","configurable","set","ResoucePool","ElementSet","IsMainElement","selectedElement","elementCellFactory","ElementCell","aggressiveRating","_aggressiveRating","setAggressiveRating","currentUserCell","UserElementCellSet","currentUserNumericValue","_currentUserNumericValue","setCurrentUserNumericValue","indexIncome","_indexIncome","numericValue","_numericValue","setNumericValue","numericValueAverage","numericValueCount","numericValueTotal","ElementField","UseFixedValue","UserId","otherUsersNumericValueCount","numericValueMultiplied","_numericValueMultiplied","setNumericValueMultiplied","numericValueMultipliedPercentage","_numericValueMultipliedPercentage","setNumericValueMultipliedPercentage","otherUsersNumericValueTotal","_otherUsersNumericValueCount","setOtherUsersNumericValueCount","_otherUsersNumericValueTotal","setOtherUsersNumericValueTotal","passiveRating","_passiveRating","setPassiveRating","rating","_rating","setRating","ratingPercentage","_ratingPercentage","setRatingPercentage","referenceRatingMultiplied","IndexSortType","referenceRatingAllEqualFlag","userCell","BooleanValue","IntegerValue","DecimalValue","NumericValueTotal","SelectedElementItem","totalResourcePoolIncome","ParentCellSet","RatingMode","ElementItem","setDirectIncome","NumericValueCount","userValue","ElementCellSet","IndexCalculationType","StringValue","ElementFieldId","ElementItemId","SelectedElementItemId","elementFieldFactory","currentUserElementField","UserElementFieldSet","currentUserIndexRating","_currentUserIndexRating","setCurrentUserIndexRating","indexRatingAverage","indexRatingCount","indexRatingTotal","otherUsersIndexRatingCount","indexRatingPercentage","_indexRatingPercentage","otherUsersIndexRatingTotal","_otherUsersIndexRatingCount","setOtherUsersIndexRatingCount","_otherUsersIndexRatingTotal","setOtherUsersIndexRatingTotal","_referenceRatingAllEqualFlag","_referenceRatingMultiplied","setReferenceRatingMultiplied","Rating","cell","elementIndexRating","IndexRatingCount","IndexRatingTotal","setReferenceRatingAllEqualFlag","allEqualFlag","flagUpdated","ratingUpdated","ElementId","SelectedElementId","_dataType","_indexEnabled","elementCell","userElementCellSet","slice","userElementCell","entityAspect","setDetached","isNew","User","$broadcast","elementItemFactory","_directIncome","elementCellIndexSet","_elementCellIndexSet","setElementCellIndexSet","getElementCellIndexSet","elementItem","sortedElementCellSet","incomeStatus","averageIncome","Number","toFixed","_multiplier","setMultiplier","_resourcePoolAmount","setResourcePoolAmount","directIncomeCell","setTotalDirectIncome","multiplierCell","setTotalResourcePoolAmount","resourcePoolRatePercentage","_totalDirectIncome","_totalResourcePoolIncome","parentCell","enumsFactory","ElementFieldDataType","String","Boolean","Integer","Decimal","DirectIncome","Multiplier","ElementFieldIndexCalculationType","Aggressive","Passive","ElementFieldIndexSortType","Highest","Lowest","getEnumKey","enumTableKey","tableKey","valueKey","resourcePoolFactory","_init","setComputedFields","userRatings","UserResourcePoolSet","userResourcePool","ResourcePoolRateTotal","ResourcePoolRate","ResourcePoolRateCount","indexOf","elementField","userElementField","IndexRating","RatingCount","setOtherUsersResourcePoolRateTotal","setOtherUsersResourcePoolRateCount","updateCache","currentUserResourcePool","currentUserResourcePoolRate","_currentUserResourcePoolRate","setCurrentUserResourcePoolRate","displayResourcePoolDetails","displayRatingMode","UseFixedResourcePoolRate","elementIndex","getEntities","entities","isTemp","isAdded","_isAdded","otherUsersResourcePoolRateCount","_otherUsersResourcePoolRateCount","otherUsersResourcePoolRateTotal","_otherUsersResourcePoolRateTotal","resourcePoolRate","_resourcePoolRate","setResourcePoolRate","resourcePoolRateAverage","resourcePoolRateCount","resourcePoolRateTotal","_resourcePoolRatePercentage","setResourcePoolRatePercentage","_selectedElement","toggleRatingMode","updateAnonymousEntities","setAdded","isUnchanged","entityState","acceptChanges","_ratingMode","_useFixedResourcePoolRate","displayMultiplierFunctions","ResourcePoolSet","resourcePool","resourcePoolEntities","entity","hasPassword","Claims","Error","i","claim","ClaimType","Email","EmailConfirmed","UserName","FirstName","MiddleName","LastName","PhoneNumber","PhoneNumberConfirmed","TwoFactorEnabled","AccessFailedCount","LockoutEnabled","LockoutEndDateUtc","Notes","CreatedOn","Date","ModifiedOn","DeletedOn","userElementCellFactory","UserElementCell","ElementCellId","DateTimeValue","_DecimalValue","userElementFieldFactory","UserElementField","userResourcePoolFactory","UserResourcePool","ResourcePoolId","applicationFactory","getApplicationInfo","applicationInfo","applicationInfoUrl","dataContext","entityManagerFactory","$timeout","manager","newManager","clear","createEntity","entityType","initialValues","createUserElementCell","currentUserChanged","newUser","executeQuery","query","fetchEntityByKey","typeName","keyValues","checkLocalCacheFirst","getChanges","entityTypeName","changes","change","shortName","getChangesCount","entityTypes","entityStates","hasChanges","metadataReady","metadataReadyPromise","metadataStore","isEmpty","fetchMetadata","rejectChanges","saveChanges","delay","saveTimer","cancel","saveChangesInternal","logSuccess","count","failed","entityErrors","errorMessage","entityError","completed","prepareSaveBatches","batches","modifiedEntities","EntityState","Modified","rowVersion","RowVersion","Deleted","Added","saveBatches","batch","saveChangesAlt","saveChangesInternalAlt","isModified","updateAnonymousChanges","anonymousUser","existingEntityPromises","anonymousResourcePool","userResourcePoolSet","anonymousUserResourcePool","userElementFieldSet","anonymousUserElementField","anonymousUserElementCell","EntityManager","store","registerEntityTypeCtor","serviceRoot","$routeCurrent","createItemInternal","LocationItem","itemUrl","isEdit","historyLimit","splice","resourcePoolId","lastIndexOf","getResourcePool","getHistory","excludeAccessType","$log","configureToastr","toastr","options","positionClass","src","log","d","s","t","o","logInfo","logWarning","showToast","optionsOverride","logIt","toastType","currentDateTime","getHours","getMinutes","getSeconds","write","debug","info","warn","toast","warning","extendFactory","setModified","cancelResourcePool","copyResourcePool","resourcePoolSource","createElementCell","elementCellInitial","createElementField","createElementItem","createResourcePoolBasic","initializeResourcePool","createResourcePoolDirectIncomeAndMultiplier","salesPriceField","createResourcePoolTwoElements","element2","element2Item1","element2Item2","element1","item1","item2","getResourcePoolExpanded","results","fromServer","fetched","isNewResourcePool","fetchedEarlier","some","fetchedId","EntityQuery","from","expand","where","using","FetchStrategy","FromServer","FromLocalCache","removeElement","elementItemSet","removeElementItem","elementFieldSet","removeElementField","setDeleted","removeElementCell","elementCellSet","removeResourcePool","elementSet","broadcastUserChanged","addPassword","addPasswordBindingModel","addPasswordUrl","updatedUser","claimIndex","claims","syncRowVersion","handleErrorResult","changeEmail","changeEmailBindingModel","changeEmailUrl","changePassword","changePasswordBindingModel","changePasswordUrl","confirmEmail","confirmEmailBindingModel","confirmEmailUrl","getToken","email","password","rememberMe","tempToken","isRegister","tokenData","tokenUrl","Content-Type","setItem","toJson","oldUser","resetPromise","user","getCurrentUserPromise","getUserElementCell","deletedUserCells","userCells","deletedUserCell","getUserElementField","userField","deletedUserFields","userFields","deletedUserField","getUserResourcePool","deletedUserResourcePools","userResourcePools","deletedUserResourcePool","addErrorMessage","ModelState","array","error_description","logout","removeItem","register","registerBindingModel","registerUrl","resendConfirmationEmail","resendConfirmationEmailUrl","resetPassword","resetPasswordBindingModel","resetPasswordUrl","resetPasswordRequest","resetPasswordRequestBindingModel","resetPasswordRequestUrl","oldEntity","newEntity","updateElementMultiplier","updateType","cellIndex","updateElementCellMultiplierInternal","updateElementCellMultiplier","updateElementCellNumericValue","updateElementFieldIndexRating","updateResourcePoolRate","Enums","input","$filter","decimals","number","symbol","Math","pow","AccountEditController","cancelChanges","isSaveDisabled","isSaving","vm","controllerId","controller","AddPasswordController","ChangeEmailController","host","now","year","getFullYear","month","getMonth","day","getDate","hour","minute","second","isChangeEmailDisabled","ChangePasswordController","ConfirmEmailController","search","Token","isResendDisabled","LoginController","login","getReturnUrl","failedExternal","getExternalLoginUrl","provider","clientReturnUrl","RegisterController","confirmPassword","returnUrl","ResetPasswordController","viewMode","ResourcePoolListController","getResourcePoolSet","resourcePoolSet","ResourcePoolManageController","$routeParams","$uibModal","addElement","isElementEdit","isElementNew","addElementField","sortOrder","isElementFieldEdit","isElementFieldNew","addElementItem","isElementItemEdit","isElementItemNew","cancelElement","elementMaster","cancelElementCell","elementCellMaster","isElementCellEdit","cancelElementField","elementFieldMaster","cancelElementItem","elementItemMaster","locationPath","editElement","copy","editElementCell","editElementField","editElementItem","elementItems","list","elementFieldDataTypeFiltered","fieldExists","filtered","exists","isSaveEnabled","resourcePoolForm","$valid","openCopyModal","modalInstance","open","controllerAs","CopyResourcePoolModalController","openRemoveResourcePoolModal","RemoveResourcePoolModalController","saveElement","saveElementCell","saveElementField","saveElementItem","saveResourcePool","$scope","$uibModalInstance","dismiss","remove","close","ResourcePoolViewController","init","editorConfig","getEditorConfig","action","AllInOneController","processExistingInteraction","allInOneConfig","elementFieldIndex","elementCellIndex","userInteracted","processNewInteraction","BasicsController","existingModelSampleId","newModelSampleId","getBasicsSample","existingModelConfig","employeeSatisfactionField","fakeUser","floor","random","newModelConfig","updateOppositeResourcePool","oppositeResourcePoolId","DefaultController","disqusShortname","anonymousUserInteracted","anonymousUserWarning","warningText","warningTitle","loggerOptions","extendedTimeOut","timeOut","CurrentVersionText","CurrentVersion","displayFooterIcons","disqusConfig","disqus_identifier","replace","disqus_url","absUrl","toggleBankTransfer","displayBankTransfer","currentDate","disqus_shortname","IntroductionController","upoId","initResourcePool","increaseMultiplier","upoConfig","increaseMultiplierTimeout","KnowledgeIndexController","refreshPage","organizationIndex","oldModelChartConfig","series","newModelChartConfig","timeout","updateAllInOne","allInOneId","knowledgeIndexConfig","text","chart","type","height","plotOptions","allowPointSelect","pointWidth","xAxis","categories","yAxis","allowDecimals","min","size","PriorityIndexController","priorityIndexConfig","TotalCostIndexController","resourcePoolEditor","link","scope","elm","attrs","changeSelectedElement","loadChartData","configChanged","initialize","decreaseElementCellNumericValue","decreaseElementMultiplier","decreaseElementCellMultiplier","decreaseIndexRating","decreaseResourcePoolRate","editResourcePool","increaseElementCellNumericValue","increaseElementMultiplier","increaseElementCellMultiplier","increaseIndexRating","increaseResourcePoolRate","chartConfig","credits","loading","pie","cursor","dataLabels","showInLegend","tooltip","headerFormat","chartData","displayIndexDetails","chartItem","ElementFieldIndexChartItem","ColumnChartItem","PieChartItem","resetElementCellNumericValue","resetElementMultiplier","resetElementCellMultiplier","resetIndexRating","resetResourcePoolRate","saveChangesStart","saveChangesCompleted","toggleIndexDetails","$watch","directiveId","restrict","directive","createResourcePool","deleteResourcePool","forceRefresh","fetchFromServer","fetchedOn","minimumDate","createUser","deleteUser","getUserSet","getUser","userId","FairShareIndexSampleController","ResourcePoolRateSampleController","resourcePoolRate_SampleResourcePoolId"],"mappings":"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","file":"app.min.js","sourcesContent":["/***\r\n * App module: main\r\n *\r\n * Bootstrap the app.\r\n *\r\n ***/\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('main', [\r\n        'ngRoute',\r\n        'ngSanitize',\r\n        'breeze.angular',\r\n        'angular-google-analytics',\r\n        'angularUtils.directives.dirDisqus',\r\n        'ui.bootstrap',\r\n        'highcharts-ng'\r\n    ]);\r\n\r\n    angular.module('main')\r\n        .run(['logger', mainRun]);\r\n\r\n    function mainRun(logger) {\r\n        logger = logger.forSource('mainRun');\r\n    }\r\n\r\n})();\r\n","/*\r\n * Authorization interceptors for angular & OData\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .config(['$httpProvider', authorizationConfig]);\r\n\r\n    angular.module('main')\r\n        .run(['$window', 'logger', authorizationRun]);\r\n\r\n    var interceptorId = 'angularInterceptor';\r\n    angular.module('main')\r\n        .factory(interceptorId, ['$q', '$window', 'logger', angularInterceptor]);\r\n\r\n    function authorizationConfig($httpProvider) {\r\n        $httpProvider.interceptors.push(interceptorId);\r\n    }\r\n\r\n    function authorizationRun($window, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource('authorizationRun');\r\n\r\n        // OData interceptor\r\n        var oldClient = $window.OData.defaultHttpClient;\r\n        var newClient = {\r\n            request: function (request, success, error) {\r\n                request.headers = request.headers || {};\r\n                var token = angular.fromJson($window.localStorage.getItem('token'));\r\n                request.headers.Authorization = token !== null ? 'Bearer ' + token.access_token : '';\r\n                return oldClient.request(request, success, error);\r\n            }\r\n        };\r\n        $window.OData.defaultHttpClient = newClient;\r\n    }\r\n\r\n    // angular\r\n    function angularInterceptor($q, $window, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(interceptorId);\r\n\r\n        return {\r\n            request: function (config) {\r\n                config.headers = config.headers || {};\r\n                var token = angular.fromJson($window.localStorage.getItem('token'));\r\n                config.headers.Authorization = token !== null ? 'Bearer ' + token.access_token : '';\r\n                return config;\r\n            },\r\n            response: function (response) {\r\n                if (response.status === 401) {\r\n                    // handle the case where the user is not authenticated\r\n                }\r\n                return response || $q.when(response);\r\n            }\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .config(['breezeProvider', breezeConfig]);\r\n\r\n    function breezeConfig(breezeProvider) {\r\n\r\n        breeze.config.initializeAdapterInstance('uriBuilder', 'odata');\r\n\r\n        // Use Web API OData to query and save\r\n        var adapter = breeze.config.initializeAdapterInstance('dataService', 'webApiOData', true);\r\n        adapter.getRoutePrefix = getRoutePrefix_Microsoft_AspNet_WebApi_OData_5_3_x;\r\n\r\n        // convert between server-side PascalCase and client-side camelCase\r\n        // breeze.NamingConvention.camelCase.setAsDefault();\r\n\r\n        function getRoutePrefix_Microsoft_AspNet_WebApi_OData_5_3_x(dataService) {\r\n\r\n            // Copied from breeze.debug and modified for Web API OData v.5.3.1.\r\n            var parser = null;\r\n            if (typeof document === 'object') { // browser\r\n                parser = document.createElement('a');\r\n                parser.href = dataService.serviceName;\r\n            } else { // node\r\n                parser = url.parse(dataService.serviceName);\r\n            }\r\n\r\n            // THE CHANGE FOR 5.3.1: Add '/' prefix to pathname\r\n            var prefix = parser.pathname;\r\n            if (prefix[0] !== '/') {\r\n                prefix = '/' + prefix;\r\n            } // add leading '/'  (only in IE)\r\n            if (prefix.substr(-1) !== '/') {\r\n                prefix += '/';\r\n            } // ensure trailing '/'\r\n\r\n            return prefix;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'exceptionHandlerExtension';\r\n    angular.module('main')\r\n        .config(['$provide', extendHandler]);\r\n\r\n    function extendHandler($provide) {\r\n        $provide.decorator('$exceptionHandler', ['$delegate', '$injector', '$window', 'serviceAppUrl', 'logger', exceptionHandlerExtension]);\r\n    }\r\n\r\n    function exceptionHandlerExtension($delegate, $injector, $window, serviceAppUrl, logger) {\r\n        logger = logger.forSource(factoryId);\r\n\r\n        var exceptionUrl = serviceAppUrl + '/api/Exception/Record';\r\n\r\n        return function (exception, cause) {\r\n\r\n            // No need to call the base, will be logged here\r\n            // $delegate(exception, cause);\r\n\r\n            // Show a generic error to the user\r\n            logger.logError('Something went wrong, please try again later!', null, true);\r\n\r\n            getSourceMappedStackTrace(exception)\r\n                .then(function (sourceMappedStack) {\r\n\r\n                    // Send the exception to the server\r\n                    var $location = $injector.get('$location');\r\n                    var $http = $injector.get('$http');\r\n\r\n                    var exceptionModel = {\r\n                        Message: exception.message,\r\n                        Cause: cause,\r\n                        Url: $location.url(),\r\n                        Stack: sourceMappedStack\r\n                    };\r\n\r\n                    $http.post(exceptionUrl, exceptionModel);\r\n\r\n                    // Rethrow the exception\r\n                    setTimeout(function () {\r\n                        throw exception;\r\n                    });\r\n                });\r\n        };\r\n\r\n        function getSourceMappedStackTrace(exception) {\r\n            var $q = $injector.get('$q'),\r\n                $http = $injector.get('$http'),\r\n                SMConsumer = $window.sourceMap.SourceMapConsumer,\r\n                cache = {};\r\n\r\n            if (exception.stack) { // not all browsers support stack traces\r\n                return $q.all($.map(exception.stack.split(/\\n/), function (stackLine) {\r\n                    var match = stackLine.match(/^(.+)(http.+):(\\d+):(\\d+)/);\r\n                    if (match) {\r\n                        var prefix = match[1], url = match[2], line = match[3], col = match[4];\r\n\r\n                        return getMapForScript(url).then(function (map) {\r\n\r\n                            var pos = map.originalPositionFor({\r\n                                line: parseInt(line, 10),\r\n                                column: parseInt(col, 10)\r\n                            });\r\n\r\n                            var mangledName = prefix.match(/\\s*(at)?\\s*(.*?)\\s*(\\(|@)/);\r\n                            mangledName = (mangledName && mangledName[2]) || '';\r\n\r\n                            return '    at ' + (pos.name ? pos.name : mangledName) + ' ' +\r\n                              $window.location.origin + pos.source + ':' + pos.line + ':' +\r\n                              pos.column;\r\n                        }, function () {\r\n                            return stackLine;\r\n                        });\r\n                    } else {\r\n                        return $q.when(stackLine);\r\n                    }\r\n                })).then(function (lines) {\r\n                    return lines.join('\\n');\r\n                });\r\n            } else {\r\n                return $q.when('');\r\n            }\r\n\r\n            // Retrieve a SourceMap object for a minified script URL\r\n            function getMapForScript(url) {\r\n                if (cache[url]) {\r\n                    return cache[url];\r\n                } else {\r\n                    var promise = $http.get(url).then(function (response) {\r\n                        var m = response.data.match(/\\/\\/# sourceMappingURL=(.+\\.map)/);\r\n                        if (m) {\r\n                            var path = url.match(/^(.+)\\/[^/]+$/);\r\n                            path = path && path[1];\r\n                            return $http.get(path + '/' + m[1]).then(function (response) {\r\n                                return new SMConsumer(response.data);\r\n                            });\r\n                        } else {\r\n                            return $q.reject();\r\n                        }\r\n                    });\r\n                    cache[url] = promise;\r\n                    return promise;\r\n                }\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .config(['AnalyticsProvider', 'analyticsTrackingCode', 'analyticsDomainName', analyticsConfig]);\r\n\r\n    angular.module('main').run(['Analytics', function (Analytics) { }]);\r\n\r\n    function analyticsConfig(AnalyticsProvider, analyticsTrackingCode, analyticsDomainName) {\r\n        AnalyticsProvider.setAccount(analyticsTrackingCode)\r\n            .setDomainName(analyticsDomainName)\r\n            .ignoreFirstPageLoad(true);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .config(['$routeProvider', '$locationProvider', routeConfig]);\r\n\r\n    angular.module('main')\r\n        .run(['$rootScope', '$location', 'locationHistory', 'logger', routeRun]);\r\n\r\n    function routeConfig($routeProvider, $locationProvider) {\r\n\r\n        // Routes\r\n        $routeProvider\r\n\r\n            /* Content */\r\n            .when('/', { title: getContentRouteTitle, templateUrl: getContentTemplateUrl, enableDisqus: true, resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/default.aspx', { title: getContentRouteTitle, templateUrl: getContentTemplateUrl, enableDisqus: true, resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            // Different than normal content, enableDisqus: false\r\n            .when('/_system/content/404/', { title: function () { return '404'; }, templateUrl: '/_system/views/content/404.html?v=0.49.0', enableDisqus: false, resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/content/:key/', { title: getContentRouteTitle, templateUrl: getContentTemplateUrl, enableDisqus: true, resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n\r\n            /* CMRP List + View + Edit pages */\r\n            .when('/_system/resourcePool', { title: function () { return 'CMRP List'; }, templateUrl: '/_system/views/resourcePool/resourcePoolList.html?v=0.49.1', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/resourcePool/new', { title: function () { return 'New CMRP'; }, templateUrl: '/_system/views/resourcePool/resourcePoolManage.html?v=0.49.0', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/resourcePool/:resourcePoolId/edit', { title: function () { return 'Edit CMRP'; }, templateUrl: '/_system/views/resourcePool/resourcePoolManage.html?v=0.49.0', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/resourcePool/:resourcePoolId', { title: function () { return 'View CMRP'; }, templateUrl: '/_system/views/resourcePool/resourcePoolView.html?v=0.49.0', enableDisqus: true, resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n\r\n            /* Account */\r\n            .when('/_system/account/accountEdit', { title: function () { return 'Account Edit'; }, templateUrl: '/_system/views/account/accountEdit.html?v=0.49.0', accessType: 'authenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/account/addPassword', { title: function () { return 'Add Password'; }, templateUrl: '/_system/views/account/addPassword.html?v=0.49.0', accessType: 'authenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/account/changeEmail', { title: function () { return 'Change Email'; }, templateUrl: '/_system/views/account/changeEmail.html?v=0.49.0', accessType: 'authenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/account/changePassword', { title: function () { return 'Change Password'; }, templateUrl: '/_system/views/account/changePassword.html?v=0.49.0', accessType: 'authenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/account/confirmEmail', { title: function () { return 'Confirm Email'; }, templateUrl: '/_system/views/account/confirmEmail.html?v=0.49.0', accessType: 'authenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/account/login', { title: function () { return 'Login'; }, templateUrl: '/_system/views/account/login.html?v=0.49.0', accessType: 'unauthenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/account/register', { title: function () { return 'Register'; }, templateUrl: '/_system/views/account/register.html?v=0.49.0', accessType: 'unauthenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n            .when('/_system/account/resetPassword', { title: function () { return 'Reset Password'; }, templateUrl: '/_system/views/account/resetPassword.html?v=0.49.0', accessType: 'unauthenticatedRequired', resolve: { validateAccess: ['userFactory', '$route', '$q', 'locationHistory', '$location', 'logger', validateAccess] } })\r\n\r\n            /* Otherwise */\r\n            .otherwise({ redirectTo: '/_system/content/404' }); // TODO Is it possible to return Response.StatusCode = 404; ?\r\n\r\n        // Html5Mode is on, if supported (# will not be used)\r\n        if (window.history && window.history.pushState) {\r\n            $locationProvider.html5Mode({ enabled: true });\r\n        }\r\n\r\n        function getManageRouteTitle(params) {\r\n\r\n            var entity = params.entity[0].toUpperCase() + params.entity.substring(1);\r\n\r\n            var action = typeof params.action !== 'undefined' ?\r\n                params.action[0].toUpperCase() + params.action.substring(1) :\r\n                'List';\r\n\r\n            return entity + ' ' + action;\r\n        }\r\n\r\n        function getContentRouteTitle(params) {\r\n\r\n            var title = typeof params.key !== 'undefined' ?\r\n                params.key[0] + params.key.substring(1) :\r\n                'Home'; // Default view\r\n\r\n            return title;\r\n        }\r\n\r\n        function getContentTemplateUrl(params) {\r\n\r\n            var key = typeof params.key !== 'undefined' ?\r\n                params.key :\r\n                'home'; // Default view\r\n\r\n            return '/_system/views/content/' + key + '.html?v=0.49.0';\r\n        }\r\n\r\n        function validateAccess(userFactory, $route, $q, locationHistory, $location, logger) {\r\n\r\n            logger = logger.forSource('validateAccess');\r\n\r\n            var deferred = $q.defer();\r\n\r\n            locationHistory.createItem($location, $route.current)\r\n                .then(function () {\r\n                    userFactory.getCurrentUser()\r\n                        .then(function (currentUser) {\r\n                            if ($route.current.accessType !== 'undefined') {\r\n\r\n                                // Invalid access cases\r\n                                if (($route.current.accessType === 'unauthenticatedRequired' && currentUser.isAuthenticated()) ||\r\n                                    ($route.current.accessType === 'authenticatedRequired' && !currentUser.isAuthenticated())) {\r\n                                    deferred.reject({ accessType: $route.current.accessType });\r\n                                }\r\n                            }\r\n\r\n                            deferred.resolve();\r\n                        })\r\n                        .catch(function () {\r\n                            deferred.reject(); // TODO Handle?\r\n                        });\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n\r\n    function routeRun($rootScope, $location, locationHistory, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource('routeRun');\r\n\r\n        $rootScope.$on('$routeChangeSuccess', routeChangeSuccess);\r\n        $rootScope.$on('$routeChangeError', routeChangeError);\r\n\r\n        // Navigate to correct page in 'Invalid access' cases\r\n        function routeChangeError(event, current, previous, eventObj) {\r\n            if (eventObj.accessType === 'unauthenticatedRequired') {\r\n                $location.url(locationHistory.previousItem('unauthenticatedRequired').url());\r\n            } else if (eventObj.accessType === 'authenticatedRequired') {\r\n                $location.url('/_system/account/login?error=To be able to continue, please login first');\r\n            }\r\n        }\r\n\r\n        function routeChangeSuccess(event, current, previous) {\r\n\r\n            // View title\r\n            var viewTitle = '';\r\n            if (typeof current.title !== 'undefined') {\r\n                // TODO Is this correct?\r\n                viewTitle = current.title(current.params);\r\n            }\r\n            $rootScope.viewTitle = viewTitle;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'Element';\r\n    angular.module('main')\r\n        .factory(factoryId, ['$rootScope', 'logger', elementFactory]);\r\n\r\n    function elementFactory($rootScope, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Server-side\r\n        Object.defineProperty(Element.prototype, 'IsMainElement', {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: function () { return this.backingFields._IsMainElement; },\r\n            set: function (value) {\r\n\r\n                var self = this;\r\n\r\n                if (self.backingFields._IsMainElement !== value) {\r\n                    self.backingFields._IsMainElement = value;\r\n\r\n                    // TODO When this prop set in constructor, ResourcePool is null, in such case, ignore\r\n                    // However, it would be better to always have a ResourcePool? / SH - 29 Nov. '15\r\n                    if (typeof self.ResoucePool === 'undefined') {\r\n                        return;\r\n                    }\r\n\r\n                    // Main element check: If there is another element that its IsMainElement flag is true, make it false\r\n                    if (value) {\r\n                        self.ResourcePool.ElementSet.forEach(function (element) {\r\n                            if (element !== self && element.IsMainElement) {\r\n                                element.IsMainElement = false;\r\n                            }\r\n                        });\r\n\r\n                        // Update selectedElement of resourcePool\r\n                        self.ResourcePool.selectedElement(self);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Return\r\n        return Element;\r\n\r\n        function Element() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.Id = 0;\r\n            self.Name = '';\r\n            // TODO breezejs - Cannot assign a navigation property in an entity ctor\r\n            //self.ResourcePool = null;\r\n            //self.ElementFieldSet = [];\r\n            //self.ElementItemSet = [];\r\n            //self.ParentFieldSet = [];\r\n\r\n            // Local variables\r\n            self.backingFields = {\r\n                // Server-side\r\n                _IsMainElement: false,\r\n\r\n                // Client-side\r\n                _parent: null,\r\n                _familyTree: null,\r\n                _elementFieldIndexSet: null,\r\n                _indexRating: null,\r\n                _directIncomeField: null,\r\n                _multiplierField: null,\r\n                _totalResourcePoolAmount: null\r\n            };\r\n            self.isEditing = false;\r\n\r\n            // Functions\r\n            self.directIncome = directIncome;\r\n            self.directIncomeField = directIncomeField;\r\n            self.directIncomeIncludingResourcePoolAmount = directIncomeIncludingResourcePoolAmount;\r\n            self.elementFieldIndexSet = elementFieldIndexSet;\r\n            self.familyTree = familyTree;\r\n            self.fullSize = fullSize;\r\n            self.indexRating = indexRating;\r\n            self.multiplier = multiplier;\r\n            self.multiplierField = multiplierField;\r\n            self.parent = parent;\r\n            self.resourcePoolAmount = resourcePoolAmount;\r\n            self.setDirectIncomeField = setDirectIncomeField;\r\n            self.setElementFieldIndexSet = setElementFieldIndexSet;\r\n            self.setFamilyTree = setFamilyTree;\r\n            self.setIndexRating = setIndexRating;\r\n            self.setMultiplierField = setMultiplierField;\r\n            self.setParent = setParent;\r\n            self.totalDirectIncome = totalDirectIncome;\r\n            self.totalDirectIncomeIncludingResourcePoolAmount = totalDirectIncomeIncludingResourcePoolAmount;\r\n            self.totalIncome = totalIncome;\r\n            self.totalIncomeAverage = totalIncomeAverage;\r\n            self.totalResourcePoolAmount = totalResourcePoolAmount;\r\n\r\n            /*** Implementations ***/\r\n\r\n            function directIncome() {\r\n\r\n                // TODO Check totalIncome notes\r\n\r\n                var value = 0;\r\n                self.ElementItemSet.forEach(function (item) {\r\n                    value += item.directIncome();\r\n                });\r\n\r\n                return value;\r\n            }\r\n\r\n            function directIncomeField() {\r\n\r\n                // TODO In case of add / remove fields?\r\n                if (self.backingFields._directIncomeField === null) {\r\n                    self.setDirectIncomeField();\r\n                }\r\n\r\n                return self.backingFields._directIncomeField;\r\n            }\r\n\r\n            function directIncomeIncludingResourcePoolAmount() {\r\n\r\n                // TODO Check totalIncome notes\r\n\r\n                var value = 0;\r\n                self.ElementItemSet.forEach(function (item) {\r\n                    value += item.directIncomeIncludingResourcePoolAmount();\r\n                });\r\n\r\n                return value;\r\n            }\r\n\r\n            function elementFieldIndexSet() {\r\n                if (self.backingFields._elementFieldIndexSet === null) {\r\n                    self.setElementFieldIndexSet();\r\n                }\r\n                return self.backingFields._elementFieldIndexSet;\r\n            }\r\n\r\n            function familyTree() {\r\n\r\n                // TODO In case of add / remove elements?\r\n                if (self.backingFields._familyTree === null) {\r\n                    self.setFamilyTree();\r\n                }\r\n\r\n                return self.backingFields._familyTree;\r\n            }\r\n\r\n            // UI related: Determines whether the chart & element details will use full row (col-md-4 vs col-md-12 etc.)\r\n            // TODO Obsolete for the moment!\r\n            function fullSize() {\r\n                return (self.ElementFieldSet.length > 4) || self.elementFieldIndexSet().length > 2;\r\n            }\r\n\r\n            function getElementFieldIndexSet(element) {\r\n\r\n                var sortedElementFieldSet = element.ElementFieldSet.sort(function (a, b) { return a.SortOrder - b.SortOrder; });\r\n                var indexSet = [];\r\n\r\n                // Validate\r\n                sortedElementFieldSet.forEach(function (field) {\r\n                    if (field.IndexEnabled) {\r\n                        indexSet.push(field);\r\n                    }\r\n\r\n                    if (field.DataType === 6 && field.SelectedElement !== null) {\r\n                        var childIndexSet = getElementFieldIndexSet(field.SelectedElement);\r\n\r\n                        childIndexSet.forEach(function (childIndex) {\r\n                            indexSet.push(childIndex);\r\n                        });\r\n                    }\r\n                });\r\n\r\n                return indexSet;\r\n            }\r\n\r\n            function indexRating() {\r\n\r\n                if (self.backingFields._indexRating === null) {\r\n                    self.setIndexRating(false);\r\n                }\r\n\r\n                return self.backingFields._indexRating;\r\n            }\r\n\r\n            function multiplier() {\r\n\r\n                // TODO Check totalIncome notes\r\n\r\n                var value = 0;\r\n                self.ElementItemSet.forEach(function (item) {\r\n                    value += item.multiplier();\r\n                });\r\n\r\n                return value;\r\n            }\r\n\r\n            function multiplierField() {\r\n\r\n                // TODO In case of add / remove field?\r\n                if (self.backingFields._multiplierField !== null) {\r\n                    self.setMultiplierField();\r\n                }\r\n\r\n                return self.backingFields._multiplierField;\r\n            }\r\n\r\n            function parent() {\r\n\r\n                // TODO In case of add / remove elements?\r\n                if (self.backingFields._parent === null) {\r\n                    self.setParent();\r\n                }\r\n\r\n                return self.backingFields._parent;\r\n            }\r\n\r\n            function resourcePoolAmount() {\r\n\r\n                // TODO Check totalIncome notes\r\n\r\n                var value = 0;\r\n                self.ElementItemSet.forEach(function (item) {\r\n                    value += item.resourcePoolAmount();\r\n                });\r\n\r\n                return value;\r\n            }\r\n\r\n            function setDirectIncomeField() {\r\n                var result = self.ElementFieldSet.filter(function (field) {\r\n                    return field.DataType === 11;\r\n                });\r\n\r\n                if (result.length > 0) {\r\n                    self.backingFields._directIncomeField = result[0];\r\n                }\r\n            }\r\n\r\n            function setElementFieldIndexSet() {\r\n                self.backingFields._elementFieldIndexSet = getElementFieldIndexSet(self);\r\n            }\r\n\r\n            function setFamilyTree() {\r\n\r\n                self.backingFields._familyTree = [];\r\n\r\n                var element = self;\r\n                while (element !== null) {\r\n                    self.backingFields._familyTree.unshift(element);\r\n                    element = element.parent();\r\n                }\r\n\r\n                // TODO At the moment it's only upwards, later include children?\r\n            }\r\n\r\n            function setIndexRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var indexSet = self.elementFieldIndexSet();\r\n\r\n                var value = 0;\r\n                indexSet.forEach(function (index) {\r\n                    value += index.indexRating();\r\n                });\r\n\r\n                if (self.backingFields._indexRating !== value) {\r\n                    self.backingFields._indexRating = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.elementFieldIndexSet().forEach(function (index) {\r\n                            index.setIndexRatingPercentage();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setMultiplierField() {\r\n                var result = self.ElementFieldSet.filter(function (field) {\r\n                    return field.DataType === 12;\r\n                });\r\n\r\n                if (result.length > 0) {\r\n                    self.backingFields._multiplierField = result[0];\r\n                }\r\n            }\r\n\r\n            function setParent() {\r\n                if (self.ParentFieldSet.length > 0) {\r\n                    self.backingFields._parent = self.ParentFieldSet[0].Element;\r\n                }\r\n            }\r\n\r\n            function totalDirectIncome() {\r\n\r\n                // TODO Check totalIncome notes\r\n\r\n                var value = 0;\r\n                self.ElementItemSet.forEach(function (item) {\r\n                    value += item.totalDirectIncome();\r\n                });\r\n\r\n                return value;\r\n            }\r\n\r\n            function totalDirectIncomeIncludingResourcePoolAmount() {\r\n\r\n                // TODO Check totalIncome notes\r\n\r\n                var value = 0;\r\n                self.ElementItemSet.forEach(function (item) {\r\n                    value += item.totalDirectIncomeIncludingResourcePoolAmount();\r\n                });\r\n\r\n                return value;\r\n            }\r\n\r\n            function totalIncome() {\r\n\r\n                // TODO If elementItems could set their parent element's totalIncome when their totalIncome changes, it wouldn't be necessary to sum this result everytime?\r\n\r\n                var value = 0;\r\n                self.ElementItemSet.forEach(function (item) {\r\n                    value += item.totalIncome();\r\n                });\r\n\r\n                return value;\r\n            }\r\n\r\n            function totalIncomeAverage() {\r\n\r\n                // Validate\r\n                if (self.ElementItemSet.length === 0) {\r\n                    return 0;\r\n                }\r\n\r\n                return self.totalIncome() / self.ElementItemSet.length;\r\n            }\r\n\r\n            // TODO This is out of pattern!\r\n            function totalResourcePoolAmount() {\r\n\r\n                // TODO Check totalIncome notes\r\n\r\n                var value;\r\n\r\n                if (self === self.ResourcePool.mainElement()) {\r\n\r\n                    value = self.ResourcePool.InitialValue;\r\n\r\n                    self.ElementItemSet.forEach(function (item) {\r\n                        value += item.totalResourcePoolAmount();\r\n                    });\r\n\r\n                } else {\r\n                    if (self.ResourcePool.mainElement() !== null) {\r\n                        value = self.ResourcePool.mainElement().totalResourcePoolAmount();\r\n                    }\r\n                }\r\n\r\n                //logger.log('TRPA-A ' + value.toFixed(2));\r\n\r\n                if (self.backingFields._totalResourcePoolAmount !== value) {\r\n                    self.backingFields._totalResourcePoolAmount = value;\r\n\r\n                    //logger.log('TRPA-B ' + value.toFixed(2));\r\n\r\n                    self.elementFieldIndexSet().forEach(function (field) {\r\n                        // TODO How about this check?\r\n                        // if (field.DataType === 11) { - \r\n                        field.setIndexIncome();\r\n                        // }\r\n                    });\r\n                }\r\n\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'ElementCell';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', elementCellFactory]);\r\n\r\n    function elementCellFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Return\r\n        return ElementCell;\r\n\r\n        function ElementCell() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.Id = 0;\r\n            self.ElementFieldId = 0;\r\n            self.ElementItemId = 0;\r\n            self.StringValue = ''; // Computed value - Used in: resourcePoolEditor.html\r\n            self.NumericValueTotal = 0; // Computed value - Used in: setOtherUsersNumericValueTotal, setCurrentUserNumericValue\r\n            self.NumericValueCount = 0; // Computed value - Used in: setOtherUsersNumericValueCount\r\n            self.SelectedElementItemId = null;\r\n            // TODO breezejs - Cannot assign a navigation property in an entity ctor\r\n            //self.ElementField = null;\r\n            //self.ElementItem = null;\r\n            //self.SelectedElementItem = null;\r\n            //self.UserElementCellSet = [];\r\n\r\n            // Local variables\r\n            self.backingFields = {\r\n                _currentUserNumericValue: null,\r\n                _otherUsersNumericValueTotal: null,\r\n                _otherUsersNumericValueCount: null,\r\n                _numericValue: null,\r\n                _numericValueMultiplied: null,\r\n                _numericValueMultipliedPercentage: null,\r\n                _passiveRating: null,\r\n                _aggressiveRating: null,\r\n                _rating: null,\r\n                _ratingPercentage: null,\r\n                _indexIncome: null\r\n            };\r\n            self.isEditing = false;\r\n\r\n            // Functions\r\n            self.aggressiveRating = aggressiveRating;\r\n            self.currentUserCell = currentUserCell;\r\n            self.currentUserNumericValue = currentUserNumericValue;\r\n            self.indexIncome = indexIncome;\r\n            self.numericValue = numericValue;\r\n            self.numericValueAverage = numericValueAverage;\r\n            self.numericValueCount = numericValueCount;\r\n            self.numericValueMultiplied = numericValueMultiplied;\r\n            self.numericValueMultipliedPercentage = numericValueMultipliedPercentage;\r\n            self.numericValueTotal = numericValueTotal;\r\n            self.otherUsersNumericValueCount = otherUsersNumericValueCount;\r\n            self.otherUsersNumericValueTotal = otherUsersNumericValueTotal;\r\n            self.passiveRating = passiveRating;\r\n            self.rating = rating;\r\n            self.ratingPercentage = ratingPercentage;\r\n            self.setAggressiveRating = setAggressiveRating;\r\n            self.setCurrentUserNumericValue = setCurrentUserNumericValue;\r\n            self.setIndexIncome = setIndexIncome;\r\n            self.setNumericValue = setNumericValue;\r\n            self.setNumericValueMultiplied = setNumericValueMultiplied;\r\n            self.setNumericValueMultipliedPercentage = setNumericValueMultipliedPercentage;\r\n            self.setOtherUsersNumericValueCount = setOtherUsersNumericValueCount;\r\n            self.setOtherUsersNumericValueTotal = setOtherUsersNumericValueTotal;\r\n            self.setPassiveRating = setPassiveRating;\r\n            self.setRating = setRating;\r\n            self.setRatingPercentage = setRatingPercentage;\r\n            self.value = value;\r\n\r\n            /*** Implementations ***/\r\n\r\n            function aggressiveRating() {\r\n\r\n                if (self.backingFields._aggressiveRating === null) {\r\n                    self.setAggressiveRating(false);\r\n                }\r\n\r\n                return self.backingFields._aggressiveRating;\r\n            }\r\n\r\n            function currentUserCell() {\r\n                return self.UserElementCellSet.length > 0 ?\r\n                    self.UserElementCellSet[0] :\r\n                    null;\r\n            }\r\n\r\n            function currentUserNumericValue() {\r\n\r\n                if (self.backingFields._currentUserNumericValue === null) {\r\n                    self.setCurrentUserNumericValue(false);\r\n                }\r\n\r\n                return self.backingFields._currentUserNumericValue;\r\n            }\r\n\r\n            // TODO This is out of pattern!\r\n            function indexIncome() {\r\n\r\n                //if (self.backingFields._indexIncome === null) {\r\n                self.setIndexIncome();\r\n                //}\r\n\r\n                return self.backingFields._indexIncome;\r\n            }\r\n\r\n            function numericValue() {\r\n\r\n                if (self.backingFields._numericValue === null) {\r\n                    self.setNumericValue(false);\r\n                }\r\n\r\n                return self.backingFields._numericValue;\r\n            }\r\n\r\n            function numericValueAverage() {\r\n\r\n                if (self.numericValueCount() === null) {\r\n                    return null;\r\n                }\r\n\r\n                return self.numericValueCount() === 0 ?\r\n                    0 :\r\n                    self.numericValueTotal() / self.numericValueCount();\r\n            }\r\n\r\n            function numericValueCount() {\r\n                return self.ElementField.UseFixedValue ?\r\n                    self.currentUserCell() !== null && self.currentUserCell().UserId === self.ElementField.Element.ResourcePool.UserId ? // If it belongs to current user\r\n                    1 :\r\n                    self.otherUsersNumericValueCount() :\r\n                    self.otherUsersNumericValueCount() + 1; // There is always default value, increase count by 1\r\n            }\r\n\r\n            function numericValueMultiplied() {\r\n\r\n                if (self.backingFields._numericValueMultiplied === null) {\r\n                    self.setNumericValueMultiplied(false);\r\n                }\r\n\r\n                return self.backingFields._numericValueMultiplied;\r\n            }\r\n\r\n            function numericValueMultipliedPercentage() {\r\n                if (self.backingFields._numericValueMultipliedPercentage === null) {\r\n                    self.setNumericValueMultipliedPercentage(false);\r\n                }\r\n\r\n                return self.backingFields._numericValueMultipliedPercentage;\r\n            }\r\n\r\n            function numericValueTotal() {\r\n                return self.ElementField.UseFixedValue ?\r\n                    self.currentUserCell() !== null && self.currentUserCell().UserId === self.ElementField.Element.ResourcePool.UserId ? // If it belongs to current user\r\n                    self.currentUserNumericValue() :\r\n                    self.otherUsersNumericValueTotal() :\r\n                    self.otherUsersNumericValueTotal() + self.currentUserNumericValue();\r\n            }\r\n\r\n            // TODO Since this is a fixed value based on NumericValueCount & current user's rate,\r\n            // it could be calculated on server, check it later again / SH - 03 Aug. '15\r\n            function otherUsersNumericValueCount() {\r\n\r\n                // Set other users' value on the initial call\r\n                if (self.backingFields._otherUsersNumericValueCount === null) {\r\n                    self.setOtherUsersNumericValueCount();\r\n                }\r\n\r\n                return self.backingFields._otherUsersNumericValueCount;\r\n            }\r\n\r\n            // TODO Since this is a fixed value based on NumericValueTotal & current user's rate,\r\n            // it could be calculated on server, check it later again / SH - 03 Aug. '15\r\n            function otherUsersNumericValueTotal() {\r\n\r\n                // Set other users' value on the initial call\r\n                if (self.backingFields._otherUsersNumericValueTotal === null) {\r\n                    self.setOtherUsersNumericValueTotal();\r\n                }\r\n\r\n                return self.backingFields._otherUsersNumericValueTotal;\r\n            }\r\n\r\n            function passiveRating() {\r\n                if (self.backingFields._passiveRating === null) {\r\n                    self.setPassiveRating(false);\r\n                }\r\n\r\n                return self.backingFields._passiveRating;\r\n            }\r\n\r\n            function rating() {\r\n\r\n                if (self.backingFields._rating === null) {\r\n                    self.setRating(false);\r\n                }\r\n\r\n                return self.backingFields._rating;\r\n            }\r\n\r\n            function ratingPercentage() {\r\n\r\n                if (self.backingFields._ratingPercentage === null) {\r\n                    self.setRatingPercentage(false);\r\n                }\r\n\r\n                return self.backingFields._ratingPercentage;\r\n            }\r\n\r\n            // TODO Currently updateRelated is always 'false'?\r\n            function setAggressiveRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0; // Default value?\r\n\r\n                if (self.ElementField.IndexEnabled && self.ElementField.referenceRatingMultiplied() > 0) {\r\n                    switch (self.ElementField.IndexSortType) {\r\n                        case 1: { // HighestToLowest (High rating is better)\r\n                            value = (1 - self.numericValueMultipliedPercentage()) / self.ElementField.referenceRatingMultiplied();\r\n                            break;\r\n                        }\r\n                        case 2: { // LowestToHighest (Low rating is better)\r\n                            value = self.numericValueMultiplied() / self.ElementField.referenceRatingMultiplied();\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (!self.ElementField.referenceRatingAllEqualFlag()) {\r\n                        value = 1 - value;\r\n                    }\r\n                }\r\n\r\n                if (self.backingFields._aggressiveRating !== value) {\r\n                    self.backingFields._aggressiveRating = value;\r\n\r\n                    // Update related values\r\n                    if (updateRelated) {\r\n                        // TODO ?\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setCurrentUserNumericValue(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value;\r\n                var userCell = self.currentUserCell();\r\n\r\n                switch (self.ElementField.DataType) {\r\n                    case 2: { value = userCell !== null ? userCell.BooleanValue : 0; break; }\r\n                    case 3: { value = userCell !== null ? userCell.IntegerValue : 0; break; }\r\n                    case 4: { value = userCell !== null ? userCell.DecimalValue : 50; /* Default value? */ break; }\r\n                        // TODO 5 (DateTime?)\r\n                    case 11: {\r\n                        // DirectIncome: No need to try user's cell, always return all users', which will be CMRP owner's value\r\n                        value = self.NumericValueTotal !== null ? self.NumericValueTotal : 0;\r\n                        break;\r\n                    }\r\n                    case 12: { value = userCell !== null ? userCell.DecimalValue : 0; /* Default value? */ break; }\r\n                        // default: { throw 'currentUserNumericValue() - Not supported element field type: ' + self.ElementField.DataType; }\r\n                }\r\n\r\n                if (self.backingFields._currentUserNumericValue !== value) {\r\n                    self.backingFields._currentUserNumericValue = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.setNumericValue();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setIndexIncome(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0; // Default value?\r\n\r\n                if (self.ElementField.DataType === 6 && self.SelectedElementItem !== null) {\r\n                    // item's index income / how many times this item has been selected (used) by higher items\r\n                    // TODO Check whether ParentCellSet gets updated when selecting / deselecting an item\r\n                    value = self.SelectedElementItem.totalResourcePoolIncome() / self.SelectedElementItem.ParentCellSet.length;\r\n                } else {\r\n                    if (self.ElementField.IndexEnabled) {\r\n                        value = self.ElementField.indexIncome() * self.ratingPercentage();\r\n                    }\r\n                }\r\n\r\n                if (self.backingFields._indexIncome !== value) {\r\n                    self.backingFields._indexIncome = value;\r\n\r\n                    // TODO Update related?\r\n                    // item.totalResourcePoolIncome\r\n                }\r\n            }\r\n\r\n            function setNumericValue(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value;\r\n\r\n                if (typeof self.ElementField !== 'undefined') {\r\n                    switch (self.ElementField.Element.ResourcePool.RatingMode) {\r\n                        case 1: { value = self.currentUserNumericValue(); break; } // Current user's\r\n                        case 2: { value = self.numericValueAverage(); break; } // All\r\n                    }\r\n\r\n                }\r\n\r\n                // If it's different...\r\n                if (self.backingFields._numericValue !== value) {\r\n                    self.backingFields._numericValue = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n\r\n                        if (self.ElementField.DataType === 11) {\r\n                            self.ElementItem.setDirectIncome();\r\n                        }\r\n\r\n                        self.setNumericValueMultiplied();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setNumericValueMultiplied(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value;\r\n\r\n                // if (typeof self.ElementField === 'undefined' || !self.ElementField.IndexEnabled) {\r\n                if (typeof self.ElementField === 'undefined') {\r\n                    value = 0; // ?\r\n                } else {\r\n                    value = self.numericValue() * self.ElementItem.multiplier();\r\n                    //logger.log(self.ElementField.Name[0] + '-' + self.ElementItem.Name[0] + ' NVMA ' + self.numericValue());\r\n                    //logger.log(self.ElementField.Name[0] + '-' + self.ElementItem.Name[0] + ' NVMB ' + self.ElementItem.multiplier());\r\n                }\r\n\r\n                if (self.backingFields._numericValueMultiplied !== value) {\r\n                    self.backingFields._numericValueMultiplied = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.ElementField.setNumericValueMultiplied();\r\n                    }\r\n\r\n                    // IMPORTANT REMARK: If the field is using IndexSortType 1,\r\n                    // then it would be better to directly call field.setReferenceRatingMultiplied() method.\r\n                    // It would be quicker to calculate.\r\n                    // However, since field.setNumericValueMultiplied() will make 'numericValueMultipliedPercentage' calculations\r\n                    // which meanwhile will call referenceRatingMultiplied() method anyway. So it becomes redundant.\r\n                    // This code block could possibly be improved with a IndexSortType switch case,\r\n                    // but it seems it would be bit overkill.\r\n                    // Still something to think about it later? / SH - 22 Oct. '15\r\n                    //self.ElementField.setReferenceRatingMultiplied();\r\n                }\r\n            }\r\n\r\n            function setNumericValueMultipliedPercentage(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0;\r\n\r\n                if (self.ElementField.IndexEnabled && self.ElementField.numericValueMultiplied() > 0) {\r\n                    value = self.numericValueMultiplied() / self.ElementField.numericValueMultiplied();\r\n                }\r\n\r\n                if (self.backingFields._numericValueMultipliedPercentage !== value) {\r\n                    self.backingFields._numericValueMultipliedPercentage = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        // TODO ?\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setOtherUsersNumericValueCount() {\r\n                self.backingFields._otherUsersNumericValueCount = self.NumericValueCount;\r\n\r\n                // Exclude current user's\r\n                if (self.UserElementCellSet.length > 0) {\r\n                    self.backingFields._otherUsersNumericValueCount--;\r\n                }\r\n            }\r\n\r\n            function setOtherUsersNumericValueTotal() {\r\n\r\n                self.backingFields._otherUsersNumericValueTotal = self.NumericValueTotal !== null ?\r\n                    self.NumericValueTotal :\r\n                    0;\r\n\r\n                // Exclude current user's\r\n                if (self.UserElementCellSet.length > 0) {\r\n\r\n                    var userValue = 0;\r\n                    switch (self.ElementField.DataType) {\r\n                        // TODO Check bool to decimal conversion?\r\n                        case 2: { userValue = self.UserElementCellSet[0].BooleanValue; break; }\r\n                        case 3: { userValue = self.UserElementCellSet[0].IntegerValue; break; }\r\n                        case 4: { userValue = self.UserElementCellSet[0].DecimalValue; break; }\r\n                            // TODO 5 - DateTime?\r\n                        case 11: { userValue = self.UserElementCellSet[0].DecimalValue; break; }\r\n                            // TODO 12 - Multiplier?\r\n                            //default: {\r\n                            //    throw 'setOtherUsersNumericValueTotal - Not supported element field type: ' + self.ElementField.DataType;\r\n                            //}\r\n                    }\r\n\r\n                    self.backingFields._otherUsersNumericValueTotal -= userValue;\r\n                }\r\n            }\r\n\r\n            function setPassiveRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0;\r\n\r\n                if (self.ElementField.IndexEnabled) {\r\n\r\n                    switch (self.ElementField.IndexSortType) {\r\n                        case 1: { // HightestToLowest (High rating is better)\r\n                            value = self.numericValueMultipliedPercentage();\r\n                            break;\r\n                        }\r\n                        case 2: { // LowestToHighest (Low rating is better)\r\n                            if (self.ElementField.passiveRating() > 0) {\r\n                                value = (1 - self.numericValueMultipliedPercentage()) / self.ElementField.passiveRating();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (self.backingFields._passiveRating !== value) {\r\n                    self.backingFields._passiveRating = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        // TODO ?\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0;\r\n\r\n                // If there is only one item, then always %100\r\n                if (self.ElementField.ElementCellSet.length === 1) {\r\n                    value = 1;\r\n                } else {\r\n                    switch (self.ElementField.IndexCalculationType) {\r\n                        case 1: // Aggressive rating\r\n                            {\r\n                                value = self.aggressiveRating();\r\n                                break;\r\n                            }\r\n                        case 2: // Passive rating\r\n                            {\r\n                                value = self.passiveRating();\r\n                                break;\r\n                            }\r\n                    }\r\n                }\r\n\r\n                if (self.backingFields._rating !== value) {\r\n                    self.backingFields._rating = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        // TODO ?\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setRatingPercentage(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0;\r\n\r\n                if (self.ElementField.IndexEnabled && self.ElementField.rating() > 0) {\r\n                    value = self.rating() / self.ElementField.rating();\r\n                }\r\n\r\n                if (self.backingFields._ratingPercentage !== value) {\r\n                    self.backingFields._ratingPercentage = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        // TODO ?\r\n                    }\r\n                }\r\n            }\r\n\r\n            function value() {\r\n\r\n                var value = null;\r\n                //var currentUserCell = self.UserElementCellSet.length > 0\r\n                //    ? self.UserElementCellSet[0]\r\n                //    : null;\r\n\r\n                switch (self.ElementField.DataType) {\r\n                    case 1: {\r\n                        if (self.UserElementCellSet.length > 0) {\r\n                            value = self.UserElementCellSet[0].StringValue;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 2: {\r\n                        if (self.UserElementCellSet.length > 0) {\r\n                            value = self.UserElementCellSet[0].BooleanValue ? 'True' : 'False';\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 3: {\r\n                        if (self.UserElementCellSet.length > 0) {\r\n                            value = self.UserElementCellSet[0].IntegerValue;\r\n                        }\r\n                        break;\r\n                    }\r\n                    // TODO 5 (DateTime?)\r\n                    case 4:\r\n                    case 11:\r\n                    case 12: {\r\n                        if (self.UserElementCellSet.length > 0) {\r\n                            value = self.UserElementCellSet[0].DecimalValue;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case 6: {\r\n                        if (self.SelectedElementItem !== null) {\r\n                            value = self.SelectedElementItem.Name;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'ElementField';\r\n    angular.module('main')\r\n        .factory(factoryId, ['$rootScope', 'logger', elementFieldFactory]);\r\n\r\n    function elementFieldFactory($rootScope, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Server-side\r\n        Object.defineProperty(ElementField.prototype, 'DataType', {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: function () { return this.backingFields._dataType; },\r\n            set: function (value) {\r\n\r\n                var self = this;\r\n                if (self.backingFields._dataType !== value) {\r\n\r\n                    // Related element cells: Clear old values and set default values if necessary\r\n                    self.ElementCellSet.forEach(function (elementCell) {\r\n\r\n                        elementCell.SelectedElementItemId = null;\r\n\r\n                        // Remove related user cell\r\n                        // TODO Similar to resourcePoolFactory.js - function removeElementCell(elementCell)\r\n                        var userElementCellSet = elementCell.UserElementCellSet.slice();\r\n                        userElementCellSet.forEach(function (userElementCell) {\r\n                            // TODO Should this also be done through broadcast & on dataContext.js? / SH - 14 Dec. '15\r\n                            userElementCell.entityAspect.setDetached();\r\n                        });\r\n\r\n                        // Add user element cell, if the new type is not 'Element'\r\n                        if (value !== 6) {\r\n\r\n                            var userElementCell = elementCell.currentUserCell();\r\n\r\n                            var isNew = userElementCell === null;\r\n\r\n                            if (isNew) {\r\n                                // TODO Similar to resourcePoolFactory.js - function createElementCell(elementCell)\r\n                                userElementCell = {\r\n                                    User: self.Element.ResourcePool.User,\r\n                                    ElementCell: elementCell\r\n                                };\r\n                            }\r\n\r\n                            switch (value) {\r\n                                case 1: { userElementCell.StringValue = ''; break; }\r\n                                case 2: { userElementCell.BooleanValue = false; break; }\r\n                                case 3: { userElementCell.IntegerValue = 0; break; }\r\n                                case 4: { userElementCell.DecimalValue = 50; break; }\r\n                                    // TODO 5 (DateTime?)\r\n                                case 11: { userElementCell.DecimalValue = 100; break; }\r\n                                case 12: { userElementCell.DecimalValue = 0; break; }\r\n                            }\r\n\r\n                            if (isNew) {\r\n                                $rootScope.$broadcast('ElementField_createUserElementCell', userElementCell);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    // Finally, set it\r\n                    self.backingFields._dataType = value;\r\n                }\r\n            }\r\n        });\r\n\r\n        Object.defineProperty(ElementField.prototype, 'IndexEnabled', {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: function () { return this.backingFields._indexEnabled; },\r\n            set: function (value) {\r\n\r\n                if (this.backingFields._indexEnabled !== value) {\r\n                    this.backingFields._indexEnabled = value;\r\n\r\n                    this.IndexCalculationType = value ? 1 : 0;\r\n                    this.IndexSortType = value ? 1 : 0;\r\n\r\n                    // TODO Complete this block!\r\n\r\n                    //// Update related\r\n                    //// a. Element\r\n                    //this.Element.setElementFieldIndexSet();\r\n\r\n                    //// b. Item(s)\r\n                    //this.ElementCellSet.forEach(function(cell) {\r\n                    //    var item = cell.ElementItem;\r\n                    //    item.setElementCellIndexSet();\r\n                    //});\r\n\r\n                    //// c. Cells\r\n                    //this.ElementCellSet.forEach(function(cell) {\r\n                    //    cell.setNumericValueMultipliedPercentage(false);\r\n                    //});\r\n                    //this.setReferenceRatingMultiplied();\r\n\r\n                    /* IndexEnabled related functions */\r\n                    //cell.setAggressiveRating();\r\n                    //cell.setratingPercentage();\r\n                    //cell.setIndexIncome();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Return\r\n        return ElementField;\r\n\r\n        function ElementField() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.Id = 0;\r\n            self.ElementId = 0;\r\n            self.Name = '';\r\n            //self.DataType = 1;\r\n            self.SelectedElementId = null;\r\n            self.UseFixedValue = null;\r\n            self.IndexCalculationType = 0;\r\n            self.IndexSortType = 0;\r\n            self.SortOrder = 0;\r\n            self.IndexRatingTotal = 0; // Computed value - Used in: setOtherUsersIndexRatingTotal\r\n            self.IndexRatingCount = 0; // Computed value - Used in: setOtherUsersIndexRatingCount\r\n            // TODO breezejs - Cannot assign a navigation property in an entity ctor\r\n            //self.Element = null;\r\n            //self.SelectedElement = null;\r\n            //self.ElementCellSet = [];\r\n            //self.UserElementFieldSet = [];\r\n\r\n            // Local variables\r\n            self.backingFields = {\r\n                _dataType: 1,\r\n                _indexEnabled: false,\r\n                _currentUserIndexRating: null,\r\n                _otherUsersIndexRatingTotal: null,\r\n                _otherUsersIndexRatingCount: null,\r\n                _indexRating: null,\r\n                _indexRatingPercentage: null,\r\n                _numericValueMultiplied: null,\r\n                _passiveRating: null,\r\n                _referenceRatingMultiplied: null,\r\n                // Aggressive rating formula prevents the organizations with the worst rating to get any income.\r\n                // However, in case all ratings are equal, then no one can get any income from the pool.\r\n                // This flag is used to determine this special case and let all organizations get a same share from the pool.\r\n                // See the usage in aggressiveRating() in elementCell.js\r\n                // TODO Usage of this field is correct?\r\n                _referenceRatingAllEqualFlag: true,\r\n                _aggressiveRating: null,\r\n                _rating: null,\r\n                _indexIncome: null\r\n            };\r\n            self.isEditing = false;\r\n\r\n            // Functions\r\n            self.currentUserElementField = currentUserElementField;\r\n            self.currentUserIndexRating = currentUserIndexRating;\r\n            self.indexIncome = indexIncome;\r\n            self.indexRating = indexRating;\r\n            self.indexRatingAverage = indexRatingAverage;\r\n            self.indexRatingCount = indexRatingCount;\r\n            self.indexRatingPercentage = indexRatingPercentage;\r\n            self.indexRatingTotal = indexRatingTotal;\r\n            self.numericValueMultiplied = numericValueMultiplied;\r\n            self.otherUsersIndexRatingCount = otherUsersIndexRatingCount;\r\n            self.otherUsersIndexRatingTotal = otherUsersIndexRatingTotal;\r\n            self.passiveRating = passiveRating;\r\n            self.rating = rating;\r\n            self.referenceRatingAllEqualFlag = referenceRatingAllEqualFlag;\r\n            self.referenceRatingMultiplied = referenceRatingMultiplied;\r\n            self.setCurrentUserIndexRating = setCurrentUserIndexRating;\r\n            self.setIndexIncome = setIndexIncome;\r\n            self.setIndexRating = setIndexRating;\r\n            self.setIndexRatingPercentage = setIndexRatingPercentage;\r\n            self.setNumericValueMultiplied = setNumericValueMultiplied;\r\n            self.setOtherUsersIndexRatingCount = setOtherUsersIndexRatingCount;\r\n            self.setOtherUsersIndexRatingTotal = setOtherUsersIndexRatingTotal;\r\n            self.setPassiveRating = setPassiveRating;\r\n            self.setRating = setRating;\r\n            self.setReferenceRatingAllEqualFlag = setReferenceRatingAllEqualFlag;\r\n            self.setReferenceRatingMultiplied = setReferenceRatingMultiplied;\r\n\r\n            /*** Implementations ***/\r\n\r\n            function currentUserElementField() {\r\n                return self.UserElementFieldSet.length > 0 ?\r\n                    self.UserElementFieldSet[0] :\r\n                    null;\r\n            }\r\n\r\n            function currentUserIndexRating() {\r\n\r\n                if (self.backingFields._currentUserIndexRating === null) {\r\n                    self.setCurrentUserIndexRating(false);\r\n                }\r\n\r\n                return self.backingFields._currentUserIndexRating;\r\n            }\r\n\r\n            function indexIncome() {\r\n\r\n                if (self.backingFields._indexIncome === null) {\r\n                    self.setIndexIncome(false);\r\n                }\r\n\r\n                return self.backingFields._indexIncome;\r\n            }\r\n\r\n            function indexRating() {\r\n\r\n                if (self.backingFields._indexRating === null) {\r\n                    self.setIndexRating(false);\r\n                }\r\n\r\n                return self.backingFields._indexRating;\r\n            }\r\n\r\n            function indexRatingAverage() {\r\n\r\n                if (self.indexRatingCount() === null) {\r\n                    return null;\r\n                }\r\n\r\n                return self.indexRatingCount() === 0 ?\r\n                    0 :\r\n                    self.indexRatingTotal() / self.indexRatingCount();\r\n            }\r\n\r\n            function indexRatingCount() {\r\n                return self.otherUsersIndexRatingCount() + 1;\r\n            }\r\n\r\n            function indexRatingPercentage() {\r\n\r\n                if (self.backingFields._indexRatingPercentage === null) {\r\n                    self.setIndexRatingPercentage(false);\r\n                }\r\n\r\n                return self.backingFields._indexRatingPercentage;\r\n            }\r\n\r\n            function indexRatingTotal() {\r\n                return self.otherUsersIndexRatingTotal() + self.currentUserIndexRating();\r\n            }\r\n\r\n            function numericValueMultiplied() {\r\n\r\n                if (self.backingFields._numericValueMultiplied === null) {\r\n                    self.setNumericValueMultiplied(false);\r\n                }\r\n\r\n                return self.backingFields._numericValueMultiplied;\r\n            }\r\n\r\n            // TODO Since this is a fixed value based on IndexRatingCount & current user's rate,\r\n            // it could be calculated on server, check it later again / SH - 03 Aug. '15\r\n            function otherUsersIndexRatingCount() {\r\n\r\n                // Set other users' value on the initial call\r\n                if (self.backingFields._otherUsersIndexRatingCount === null) {\r\n                    self.setOtherUsersIndexRatingCount();\r\n                }\r\n\r\n                return self.backingFields._otherUsersIndexRatingCount;\r\n            }\r\n\r\n            // TODO Since this is a fixed value based on IndexRatingTotal & current user's rate,\r\n            // it could be calculated on server, check it later again / SH - 03 Aug. '15\r\n            function otherUsersIndexRatingTotal() {\r\n\r\n                // Set other users' value on the initial call\r\n                if (self.backingFields._otherUsersIndexRatingTotal === null) {\r\n                    self.setOtherUsersIndexRatingTotal();\r\n                }\r\n\r\n                return self.backingFields._otherUsersIndexRatingTotal;\r\n            }\r\n\r\n            // Helper function for Index Rating Type 1 case (low rating is better)\r\n            function passiveRating() {\r\n                if (self.backingFields._passiveRating === null) {\r\n                    self.setPassiveRating(false);\r\n                }\r\n\r\n                return self.backingFields._passiveRating;\r\n            }\r\n\r\n            function rating() {\r\n\r\n                if (self.backingFields._rating === null) {\r\n                    self.setRating(false);\r\n                }\r\n\r\n                return self.backingFields._rating;\r\n            }\r\n\r\n            function referenceRatingAllEqualFlag(value) {\r\n                return self.backingFields._referenceRatingAllEqualFlag;\r\n            }\r\n\r\n            function referenceRatingMultiplied() {\r\n\r\n                if (self.backingFields._referenceRatingMultiplied === null) {\r\n                    self.setReferenceRatingMultiplied(false);\r\n                }\r\n\r\n                return self.backingFields._referenceRatingMultiplied;\r\n            }\r\n\r\n            function setCurrentUserIndexRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = self.currentUserElementField() !== null ?\r\n                    self.currentUserElementField().Rating :\r\n                    50; // If there is no rating, this is the default value?\r\n\r\n                if (self.backingFields._currentUserIndexRating !== value) {\r\n                    self.backingFields._currentUserIndexRating = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.setIndexRating();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setIndexIncome(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = self.Element.totalResourcePoolAmount() * self.indexRatingPercentage();\r\n\r\n                //if (self.IndexEnabled) {\r\n                //logger.log(self.Name[0] + ' II ' + value.toFixed(2));\r\n                //}\r\n\r\n                if (self.backingFields._indexIncome !== value) {\r\n                    self.backingFields._indexIncome = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setIndexIncome();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setIndexRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0; // Default value?\r\n\r\n                switch (self.Element.ResourcePool.RatingMode) {\r\n                    case 1: { value = self.currentUserIndexRating(); break; } // Current user's\r\n                    case 2: { value = self.indexRatingAverage(); break; } // All\r\n                }\r\n\r\n                //logger.log(self.Name[0] + ' IR ' + value.toFixed(2));\r\n\r\n                if (self.backingFields._indexRating !== value) {\r\n                    self.backingFields._indexRating = value;\r\n\r\n                    // TODO Update related\r\n                    if (updateRelated) {\r\n                        self.Element.ResourcePool.mainElement().setIndexRating();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setIndexRatingPercentage(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0; // Default value?\r\n\r\n                var elementIndexRating = self.Element.ResourcePool.mainElement().indexRating();\r\n\r\n                if (elementIndexRating === 0) {\r\n                    value = 0;\r\n                } else {\r\n                    value = self.indexRating() / elementIndexRating;\r\n                }\r\n\r\n                //logger.log(self.Name[0] + ' IRP ' + value.toFixed(2));\r\n\r\n                if (self.backingFields._indexRatingPercentage !== value) {\r\n                    self.backingFields._indexRatingPercentage = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.setIndexIncome();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setNumericValueMultiplied(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0; // Default value?\r\n\r\n                // Validate\r\n                if (self.ElementCellSet.length === 0) {\r\n                    value = 0; // ?\r\n                } else {\r\n                    self.ElementCellSet.forEach(function (cell) {\r\n                        value += cell.numericValueMultiplied();\r\n                        //logger.log(self.Name[0] + '-' + cell.ElementItem.Name[0] + ' NVMA ' + cell.numericValueMultiplied());\r\n                    });\r\n                }\r\n\r\n                if (self.backingFields._numericValueMultiplied !== value) {\r\n                    self.backingFields._numericValueMultiplied = value;\r\n\r\n                    //logger.log(self.Name[0] + ' NVMB ' + value.toFixed(2));\r\n\r\n                    // Update related?\r\n                    if (updateRelated && self.IndexEnabled) {\r\n\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setNumericValueMultipliedPercentage(false);\r\n                        });\r\n\r\n                        self.setPassiveRating(false);\r\n\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setPassiveRating(false);\r\n                        });\r\n\r\n                        self.setReferenceRatingMultiplied(false);\r\n\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setAggressiveRating(false);\r\n                        });\r\n\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setRating(false);\r\n                        });\r\n\r\n                        self.setRating(false);\r\n\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setRatingPercentage(false);\r\n                        });\r\n\r\n                        //self.setIndexIncome(false);\r\n\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setIndexIncome(false);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setOtherUsersIndexRatingCount() {\r\n                self.backingFields._otherUsersIndexRatingCount = self.IndexRatingCount;\r\n\r\n                // Exclude current user's\r\n                if (self.currentUserElementField() !== null) {\r\n                    self.backingFields._otherUsersIndexRatingCount--;\r\n                }\r\n            }\r\n\r\n            function setOtherUsersIndexRatingTotal() {\r\n                self.backingFields._otherUsersIndexRatingTotal = self.IndexRatingTotal !== null ?\r\n                    self.IndexRatingTotal :\r\n                    0;\r\n\r\n                // Exclude current user's\r\n                if (self.currentUserElementField() !== null) {\r\n                    self.backingFields._otherUsersIndexRatingTotal -= self.currentUserElementField().Rating;\r\n                }\r\n            }\r\n\r\n            function setPassiveRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0;\r\n\r\n                self.ElementCellSet.forEach(function (cell) {\r\n                    value += 1 - cell.numericValueMultipliedPercentage();\r\n                });\r\n\r\n                if (self.backingFields._passiveRating !== value) {\r\n                    self.backingFields._passiveRating = value;\r\n\r\n                    if (updateRelated) {\r\n                        // TODO ?\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setRating(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = 0; // Default value?\r\n\r\n                // Validate\r\n                self.ElementCellSet.forEach(function (cell) {\r\n                    value += cell.rating();\r\n                });\r\n\r\n                //logger.log(self.Name[0] + ' AR ' + value.toFixed(2));\r\n\r\n                if (self.backingFields._rating !== value) {\r\n                    self.backingFields._rating = value;\r\n\r\n                    //logger.log(self.Name[0] + ' AR OK');\r\n\r\n                    if (updateRelated) {\r\n\r\n                        // Update related\r\n                        self.ElementCellSet.forEach(function (cell) {\r\n                            cell.setRatingPercentage(false);\r\n                        });\r\n\r\n                        self.setIndexIncome();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setReferenceRatingAllEqualFlag(value) {\r\n\r\n                if (self.backingFields._referenceRatingAllEqualFlag !== value) {\r\n                    self.backingFields._referenceRatingAllEqualFlag = value;\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            // TODO Currently updateRelated is always 'false'?\r\n            function setReferenceRatingMultiplied(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = null;\r\n                var allEqualFlag = true;\r\n\r\n                // Validate\r\n                if (self.ElementCellSet.length === 0) {\r\n                    value = 0; // ?\r\n                } else {\r\n\r\n                    self.ElementCellSet.forEach(function (cell) {\r\n\r\n                        if (value === null) {\r\n\r\n                            switch (self.IndexSortType) {\r\n                                case 1: { // HighestToLowest (High number is better)\r\n                                    value = (1 - cell.numericValueMultipliedPercentage());\r\n                                    break;\r\n                                }\r\n                                case 2: { // LowestToHighest (Low number is better)\r\n                                    value = cell.numericValueMultiplied();\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            switch (self.IndexSortType) {\r\n                                case 1: { // HighestToLowest (High number is better)\r\n\r\n                                    if (1 - cell.numericValueMultipliedPercentage() !== value) {\r\n                                        allEqualFlag = false;\r\n                                    }\r\n\r\n                                    if (1 - cell.numericValueMultipliedPercentage() > value) {\r\n                                        value = 1 - cell.numericValueMultipliedPercentage();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                case 2: { // LowestToHighest (Low number is better)\r\n\r\n                                    if (cell.numericValueMultiplied() !== value) {\r\n                                        allEqualFlag = false;\r\n                                    }\r\n\r\n                                    if (cell.numericValueMultiplied() > value) {\r\n                                        value = cell.numericValueMultiplied();\r\n                                    }\r\n\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                //logger.log(self.Name[0] + '-' + cell.ElementItem.Name[0] + ' RRMA ' + value.toFixed(2));\r\n\r\n                // Set all equal flag\r\n                var flagUpdated = self.setReferenceRatingAllEqualFlag(allEqualFlag);\r\n                var ratingUpdated = false;\r\n\r\n                // Only if it's different..\r\n                if (self.backingFields._referenceRatingMultiplied !== value) {\r\n                    self.backingFields._referenceRatingMultiplied = value;\r\n\r\n                    ratingUpdated = true;\r\n\r\n                    //logger.log(self.Name[0] + ' RRMB ' + value.toFixed(2));\r\n                }\r\n\r\n                // Update related\r\n                if ((flagUpdated || ratingUpdated) && updateRelated) {\r\n\r\n                    // TODO ?!\r\n\r\n                    self.ElementCellSet.forEach(function (cell) {\r\n                        cell.setAggressiveRating(false);\r\n                    });\r\n\r\n                    // self.setAggressiveRating();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'ElementItem';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', elementItemFactory]);\r\n\r\n    function elementItemFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Return\r\n        return ElementItem;\r\n\r\n        function ElementItem() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.Id = 0;\r\n            self.ElementId = 0;\r\n            self.Name = '';\r\n            // TODO breezejs - Cannot assign a navigation property in an entity ctor\r\n            //self.Element = null;\r\n            //self.ElementCellSet = [];\r\n            //self.ParentCellSet = [];\r\n\r\n            // Local variables\r\n            self.backingFields = {\r\n                _elementCellIndexSet: null,\r\n                _directIncome: null,\r\n                _multiplier: null,\r\n                _totalDirectIncome: null,\r\n                _resourcePoolAmount: null,\r\n                _totalResourcePoolAmount: null,\r\n                _totalResourcePoolIncome: null\r\n            };\r\n            self.isEditing = false;\r\n\r\n            // Functions\r\n            self.directIncome = directIncome;\r\n            self.directIncomeIncludingResourcePoolAmount = directIncomeIncludingResourcePoolAmount;\r\n            self.elementCellIndexSet = elementCellIndexSet;\r\n            self.incomeStatus = incomeStatus;\r\n            self.multiplier = multiplier;\r\n            self.resourcePoolAmount = resourcePoolAmount;\r\n            self.setDirectIncome = setDirectIncome;\r\n            self.setElementCellIndexSet = setElementCellIndexSet;\r\n            self.setMultiplier = setMultiplier;\r\n            self.setResourcePoolAmount = setResourcePoolAmount;\r\n            self.setTotalDirectIncome = setTotalDirectIncome;\r\n            self.setTotalResourcePoolAmount = setTotalResourcePoolAmount;\r\n            self.totalDirectIncome = totalDirectIncome;\r\n            self.totalDirectIncomeIncludingResourcePoolAmount = totalDirectIncomeIncludingResourcePoolAmount;\r\n            self.totalIncome = totalIncome;\r\n            self.totalResourcePoolAmount = totalResourcePoolAmount;\r\n            self.totalResourcePoolIncome = totalResourcePoolIncome;\r\n\r\n            /*** Implementations ***/\r\n\r\n            function directIncome() {\r\n\r\n                if (self.backingFields._directIncome === null) {\r\n                    self.setDirectIncome(false);\r\n                }\r\n\r\n                return self.backingFields._directIncome;\r\n            }\r\n\r\n            function directIncomeIncludingResourcePoolAmount() { // A.k.a Sales Price incl. VAT\r\n                return self.directIncome() + self.resourcePoolAmount();\r\n            }\r\n\r\n            function elementCellIndexSet() {\r\n\r\n                if (self.backingFields._elementCellIndexSet === null) {\r\n                    self.setElementCellIndexSet();\r\n                }\r\n\r\n                return self.backingFields._elementCellIndexSet;\r\n            }\r\n\r\n            function getElementCellIndexSet(elementItem) {\r\n\r\n                var indexSet = [];\r\n                var sortedElementCellSet = elementItem.ElementCellSet.sort(function (a, b) {\r\n                    return a.ElementField.SortOrder - b.ElementField.SortOrder;\r\n                });\r\n\r\n                sortedElementCellSet.forEach(function (cell) {\r\n\r\n                    if (cell.ElementField.IndexEnabled) {\r\n                        indexSet.push(cell);\r\n                    }\r\n\r\n                    if (cell.ElementField.DataType === 6 && cell.SelectedElementItem !== null) {\r\n                        var childIndexSet = getElementCellIndexSet(cell.SelectedElementItem);\r\n\r\n                        if (childIndexSet.length > 0) {\r\n                            indexSet.push(cell);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return indexSet;\r\n            }\r\n\r\n            function incomeStatus() {\r\n\r\n                var totalIncome = self.totalIncome();\r\n                // TODO Make rounding better, instead of toFixed + number\r\n                var averageIncome = Number(self.Element.totalIncomeAverage().toFixed(2));\r\n\r\n                if (totalIncome === averageIncome) {\r\n                    return 'average';\r\n                } else if (totalIncome < averageIncome) {\r\n                    return 'low';\r\n                } else if (totalIncome > averageIncome) {\r\n                    return 'high';\r\n                }\r\n            }\r\n\r\n            function multiplier() {\r\n\r\n                if (self.backingFields._multiplier === null) {\r\n                    self.setMultiplier(false);\r\n                }\r\n\r\n                return self.backingFields._multiplier;\r\n            }\r\n\r\n            function resourcePoolAmount() {\r\n\r\n                if (self.backingFields._resourcePoolAmount === null) {\r\n                    self.setResourcePoolAmount(false);\r\n                }\r\n\r\n                return self.backingFields._resourcePoolAmount;\r\n            }\r\n\r\n            function setDirectIncome(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                // First, find direct income cell\r\n                var directIncomeCell = null;\r\n\r\n                var result = self.ElementCellSet.filter(function (elementCell) {\r\n                    return elementCell.ElementField.DataType === 11;\r\n                });\r\n\r\n                if (result.length > 0) {\r\n                    directIncomeCell = result[0];\r\n                }\r\n\r\n                var value;\r\n                if (directIncomeCell === null) {\r\n                    value = 0;\r\n                } else {\r\n                    value = directIncomeCell.numericValue();\r\n                }\r\n\r\n                if (self.backingFields._directIncome !== value) {\r\n                    self.backingFields._directIncome = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.setTotalDirectIncome();\r\n                        self.setResourcePoolAmount();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setElementCellIndexSet() {\r\n                self.backingFields._elementCellIndexSet = getElementCellIndexSet(self);\r\n            }\r\n\r\n            function setMultiplier(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                // First, find the multiplier cell\r\n                var multiplierCell = null;\r\n\r\n                var result = self.ElementCellSet.filter(function(elementCell) {\r\n                    return elementCell.ElementField.DataType === 12;\r\n                });\r\n\r\n                if (result.length > 0) {\r\n                    multiplierCell = result[0];\r\n                }\r\n\r\n                var value = 0;\r\n\r\n                // If there is no multiplier field defined on this element, return 1, so it can return calculate the income correctly\r\n                // TODO Cover 'add new multiplier field' case as well!\r\n                if (multiplierCell === null) {\r\n                    value = 1;\r\n                } else {\r\n\r\n                    // If there is a multiplier field on the element but user is not set any value, return 0 as the default value\r\n                    if (multiplierCell.currentUserCell() === null ||\r\n                        multiplierCell.currentUserCell().DecimalValue === null) {\r\n                        value = 0;\r\n                    } else { // Else, user's\r\n                        value = multiplierCell.currentUserCell().DecimalValue;\r\n                    }\r\n                }\r\n\r\n                if (self.backingFields._multiplier !== value) {\r\n                    self.backingFields._multiplier = value;\r\n\r\n                    // Update related\r\n                    self.setTotalDirectIncome();\r\n                    self.setTotalResourcePoolAmount();\r\n                }\r\n            }\r\n\r\n            function setResourcePoolAmount(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = self.directIncome() * self.Element.ResourcePool.resourcePoolRatePercentage();\r\n\r\n                if (self.backingFields._resourcePoolAmount !== value) {\r\n                    self.backingFields._resourcePoolAmount = value;\r\n\r\n                    // TODO Update related\r\n                    if (updateRelated) {\r\n                        self.setTotalResourcePoolAmount();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setTotalDirectIncome(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = self.directIncome() * self.multiplier();\r\n\r\n                if (self.backingFields._totalDirectIncome !== value) {\r\n                    self.backingFields._totalDirectIncome = value;\r\n\r\n                    // TODO Update related\r\n                    if (updateRelated) {\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setTotalResourcePoolAmount(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = self.resourcePoolAmount() * self.multiplier();\r\n\r\n                if (self.backingFields._totalResourcePoolAmount !== value) {\r\n                    self.backingFields._totalResourcePoolAmount = value;\r\n\r\n                    // TODO Update related\r\n                    if (updateRelated) {\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            function totalDirectIncome() {\r\n\r\n                if (self.backingFields._totalDirectIncome === null) {\r\n                    self.setTotalDirectIncome(false);\r\n                }\r\n\r\n                return self.backingFields._totalDirectIncome;\r\n            }\r\n\r\n            function totalDirectIncomeIncludingResourcePoolAmount() { // A.k.a Total Sales Price incl. VAT\r\n                return self.directIncomeIncludingResourcePoolAmount() * self.multiplier();\r\n            }\r\n\r\n            function totalIncome() {\r\n                var totalIncome = self.totalDirectIncome() + self.totalResourcePoolIncome();\r\n                // TODO Make rounding better, instead of toFixed + number\r\n                return Number(totalIncome.toFixed(2));\r\n            }\r\n\r\n            function totalResourcePoolAmount() {\r\n\r\n                if (self.backingFields._totalResourcePoolAmount === null) {\r\n                    self.setTotalResourcePoolAmount(false);\r\n                }\r\n\r\n                return self.backingFields._totalResourcePoolAmount;\r\n            }\r\n\r\n            // TODO This is out of pattern!\r\n            function totalResourcePoolIncome() {\r\n\r\n                var value = 0;\r\n\r\n                self.ElementCellSet.forEach(function (cell) {\r\n                    value += cell.indexIncome();\r\n                });\r\n\r\n                if (self.backingFields._totalResourcePoolIncome !== value) {\r\n                    self.backingFields._totalResourcePoolIncome = value;\r\n\r\n                    // Update related\r\n                    // TODO Is this correct? It looks like it didn't affect anything?\r\n                    self.ParentCellSet.forEach(function (parentCell) {\r\n                        parentCell.setIndexIncome();\r\n                    });\r\n                }\r\n\r\n                return value;\r\n            }\r\n\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'Enums';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', enumsFactory]);\r\n\r\n    function enumsFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        var self = {};\r\n\r\n        self.ElementFieldDataType = {\r\n\r\n            // A field that holds string value.\r\n            // Use StringValue property to set its value on ElementItem level.\r\n            'String': 1,\r\n\r\n            // A field that holds boolean value.\r\n            // Use BooleanValue property to set its value on ElementItem level.\r\n            'Boolean': 2,\r\n\r\n            // A field that holds integer value.\r\n            // Use IntegerValue property to set its value on ElementItem level.\r\n            'Integer': 3,\r\n\r\n            // A field that holds decimal value.\r\n            // Use DecimalValue property to set its value on ElementItem level.\r\n            'Decimal': 4,\r\n\r\n            //// A field that holds DateTime value.\r\n            //// Use DateTimeValue property to set its value on ElementItem level.\r\n            //'DateTime': 5,\r\n\r\n            // A field that holds another defined Element object within the resource pool.\r\n            // Use SelectedElementItem property to set its value on ElementItem level.\r\n            'Element': 6,\r\n\r\n            // The field that presents each item's main income (e.g. Sales Price).\r\n            // Also resource pool amount will be calculated based on this field.\r\n            // Defined once per Element (at the moment, can be changed to per Resource Pool).\r\n            // Use DecimalValue property to set its value on ElementItem level.\r\n            'DirectIncome': 11,\r\n\r\n            // The multiplier of the resource pool (e.g. Number of sales, number of users).\r\n            // Defined once per Element (at the moment, can be changed to per Resource Pool).\r\n            // Use DecimalValue property to set its value on ElementItem level.\r\n            'Multiplier': 12\r\n        };\r\n        \r\n        self.ElementFieldIndexCalculationType = {\r\n            // Default type.\r\n            // Uses the lowest score as the base (reference) rating in the group, then calculates the difference from that base.\r\n            // Base rating (lowest) gets 0 from the pool and other items get an amount based on their difference.\r\n            // Aims to maximize the benefit of the pool.\r\n            'Aggressive': 1,\r\n\r\n            // Sums all ratings and calculates the percentages.\r\n            // All items get an amount, including the lowest scored item.\r\n            // Good for cases that only use 'Resource Pool - Initial Amount' feature.\r\n            'Passive': 2\r\n        };\r\n\r\n        self.ElementFieldIndexSortType = {\r\n\r\n            // Default type.\r\n            // High rating is better.\r\n            'Highest': 1,\r\n\r\n            // Low rating is better.\r\n            'Lowest': 2\r\n        };\r\n\r\n        self.getEnumKey = function (enumTableKey, value) {\r\n            for (var tableKey in self) {\r\n\r\n                // Ignore these tables\r\n                if (enumTableKey === '$get' || enumTableKey === 'getEnumKey') {\r\n                    return;\r\n                }\r\n\r\n                // Search through enum tables & their values\r\n                if (tableKey === enumTableKey) {\r\n                    for (var valueKey in self[tableKey]) {\r\n                        if (self[tableKey][valueKey] === value) {\r\n                            return valueKey;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return self;\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'ResourcePool';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', resourcePoolFactory]);\r\n\r\n    function resourcePoolFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Server-side properties\r\n        Object.defineProperty(ResourcePool.prototype, 'UseFixedResourcePoolRate', {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: function () { return this.backingFields._useFixedResourcePoolRate; },\r\n            set: function (value) {\r\n\r\n                if (this.backingFields._useFixedResourcePoolRate !== value) {\r\n                    this.backingFields._useFixedResourcePoolRate = value;\r\n\r\n                    this.setResourcePoolRate();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Client-side properties\r\n        Object.defineProperty(ResourcePool.prototype, 'RatingMode', {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: function () { return this.backingFields._ratingMode; },\r\n            set: function (value) {\r\n                if (this.backingFields._ratingMode !== value) {\r\n                    this.backingFields._ratingMode = value;\r\n\r\n                    this.setResourcePoolRate();\r\n\r\n                    this.ElementSet.forEach(function (element) {\r\n\r\n                        element.ElementFieldSet.forEach(function (field) {\r\n\r\n                            // Field calculations\r\n                            if (field.IndexEnabled) {\r\n                                field.setIndexRating();\r\n                            }\r\n\r\n                            if (!field.UseFixedValue) {\r\n                                field.ElementCellSet.forEach(function (cell) {\r\n\r\n                                    // Cell calculations\r\n                                    switch (field.DataType) {\r\n                                        case 2:\r\n                                        case 3:\r\n                                        case 4:\r\n                                            // TODO 5 (DateTime?)\r\n                                        case 11:\r\n                                        case 12: {\r\n                                            cell.setNumericValue();\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        // Return\r\n        return ResourcePool;\r\n\r\n        function ResourcePool() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.Id = 0;\r\n            self.UserId = 0;\r\n            self.Name = '';\r\n            self.InitialValue = 0;\r\n            self.ResourcePoolRateTotal = 0; // Computed value - Used in: setOtherUsersResourcePoolRateTotal\r\n            self.ResourcePoolRateCount = 0; // Computed value - Used in: setOtherUsersResourcePoolRateCount\r\n            self.RatingCount = 0; // Computed value - Used in: resourcePoolEditor.html\r\n            // TODO breezejs - Cannot assign a navigation property in an entity ctor\r\n            //self.User = null;\r\n            //self.ElementSet = [];\r\n            //self.UserResourcePoolSet = [];\r\n\r\n            // Local variables\r\n            self.backingFields = {\r\n                _currentUserResourcePoolRate: null,\r\n                _isAdded: false,\r\n                _otherUsersResourcePoolRateTotal: null,\r\n                _otherUsersResourcePoolRateCount: null,\r\n                _ratingMode: 1, // Only my ratings vs. All users' ratings\r\n                _resourcePoolRate: null,\r\n                _resourcePoolRatePercentage: null,\r\n                _selectedElement: null,\r\n                _useFixedResourcePoolRate: false\r\n            };\r\n            self.isEditing = false; // Determines whether the object is being edited or not\r\n            self.isTemp = false; // Determines whether object was created for demo purposes or not\r\n            // TODO Move this to field.js?\r\n            self.displayMultiplierFunctions = true; // In some cases, it's not necessary for the user to change multiplier\r\n\r\n            // Functions\r\n            self._init = _init;\r\n            self.currentUserResourcePool = currentUserResourcePool;\r\n            self.currentUserResourcePoolRate = currentUserResourcePoolRate;\r\n            self.displayResourcePoolDetails = displayResourcePoolDetails;\r\n            self.displayRatingMode = displayRatingMode;\r\n            self.getEntities = getEntities;\r\n            // Determines whether entityState is actually isAdded.\r\n            // Anonymous users can also add/edit resource pool.\r\n            // However, when an anonymous user adds a new resource pool, it actually doesn't save to database and entityState stays as isAdded().\r\n            // Then, when the user clicks on 'Cancel CMRP', rejectChanges() will be called, which removes the resource pool.\r\n            // To prevent this issue, when anon user calls saveChanges, this flag will be used (isAdded will become true) and acceptChanges will be called (still not saving to actual database).\r\n            // Now, calling rejectChanges will return the entities to their previous state without any problem.\r\n            // And if the anon user will register or login, this flag will be checked in dataContext.js and all the related entities will be converted back to isAdded() state.\r\n            // SH - 30 Nov. '15\r\n            self.isAdded = isAdded;\r\n            self.mainElement = mainElement;\r\n            self.name = name;\r\n            self.otherUsersResourcePoolRateCount = otherUsersResourcePoolRateCount;\r\n            self.otherUsersResourcePoolRateTotal = otherUsersResourcePoolRateTotal;\r\n            self.resourcePoolRate = resourcePoolRate;\r\n            self.resourcePoolRateAverage = resourcePoolRateAverage;\r\n            self.resourcePoolRateCount = resourcePoolRateCount;\r\n            self.resourcePoolRatePercentage = resourcePoolRatePercentage;\r\n            self.resourcePoolRateTotal = resourcePoolRateTotal;\r\n            self.selectedElement = selectedElement;\r\n            self.setCurrentUserResourcePoolRate = setCurrentUserResourcePoolRate;\r\n            self.setOtherUsersResourcePoolRateCount = setOtherUsersResourcePoolRateCount;\r\n            self.setOtherUsersResourcePoolRateTotal = setOtherUsersResourcePoolRateTotal;\r\n            self.setResourcePoolRate = setResourcePoolRate;\r\n            self.setResourcePoolRatePercentage = setResourcePoolRatePercentage;\r\n            self.toggleRatingMode = toggleRatingMode;\r\n            self.updateAnonymousEntities = updateAnonymousEntities;\r\n            self.updateCache = updateCache;\r\n\r\n            /*** Implementations ***/\r\n\r\n            // Should be called after createEntity or retrieving it from server\r\n            function _init(setComputedFields) {\r\n                setComputedFields = typeof setComputedFields !== 'undefined' ? setComputedFields : false;\r\n\r\n                // Set initial values of computed fields\r\n                if (setComputedFields) {\r\n\r\n                    var userRatings = [];\r\n\r\n                    // ResourcePool\r\n                    self.UserResourcePoolSet.forEach(function (userResourcePool) {\r\n                        self.ResourcePoolRateTotal += userResourcePool.ResourcePoolRate;\r\n                        self.ResourcePoolRateCount += 1;\r\n\r\n                        if (userRatings.indexOf(userResourcePool.UserId) === -1) {\r\n                            userRatings.push(userResourcePool.UserId);\r\n                        }\r\n                    });\r\n\r\n                    // Fields\r\n                    self.ElementSet.forEach(function (element) {\r\n                        element.ElementFieldSet.forEach(function (elementField) {\r\n                            elementField.UserElementFieldSet.forEach(function (userElementField) {\r\n                                elementField.IndexRatingTotal += userElementField.IndexRating;\r\n                                elementField.IndexRatingCount += 1;\r\n\r\n                                if (userRatings.indexOf(userElementField.UserId) === -1) {\r\n                                    userRatings.push(userElementField.UserId);\r\n                                }\r\n                            });\r\n\r\n                            // Cells\r\n                            elementField.ElementCellSet.forEach(function (elementCell) {\r\n                                elementCell.UserElementCellSet.forEach(function (userElementCell) {\r\n                                    elementCell.StringValue = ''; // TODO ?\r\n                                    elementCell.NumericValueTotal += userElementCell.DecimalValue; // TODO Correct approach?\r\n                                    elementCell.NumericValueCount += 1;\r\n\r\n                                    if (elementField.IndexEnabled) {\r\n                                        if (userRatings.indexOf(userElementCell.UserId) === -1) {\r\n                                            userRatings.push(userElementCell.UserId);\r\n                                        }\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n\r\n                    // Rating count\r\n                    self.RatingCount = userRatings.length;\r\n                }\r\n\r\n                // Set otherUsers' data\r\n                self.setOtherUsersResourcePoolRateTotal();\r\n                self.setOtherUsersResourcePoolRateCount();\r\n\r\n                // Elements\r\n                if (typeof self.ElementSet !== 'undefined') {\r\n                    self.ElementSet.forEach(function (element) {\r\n\r\n                        // Fields\r\n                        if (typeof element.ElementFieldSet !== 'undefined') {\r\n                            element.ElementFieldSet.forEach(function (field) {\r\n\r\n                                field.setOtherUsersIndexRatingTotal();\r\n                                field.setOtherUsersIndexRatingCount();\r\n\r\n                                // Cells\r\n                                if (typeof field.ElementCellSet !== 'undefined') {\r\n                                    field.ElementCellSet.forEach(function (cell) {\r\n\r\n                                        cell.setOtherUsersNumericValueTotal();\r\n                                        cell.setOtherUsersNumericValueCount();\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                updateCache();\r\n            }\r\n\r\n            function currentUserResourcePool() {\r\n                return self.UserResourcePoolSet.length > 0 ?\r\n                    self.UserResourcePoolSet[0] :\r\n                    null;\r\n            }\r\n\r\n            function currentUserResourcePoolRate() {\r\n\r\n                if (self.backingFields._currentUserResourcePoolRate === null) {\r\n                    self.setCurrentUserResourcePoolRate(false);\r\n                }\r\n\r\n                return self.backingFields._currentUserResourcePoolRate;\r\n            }\r\n\r\n            function displayResourcePoolDetails() {\r\n                return self.selectedElement().directIncomeField() !== null &&\r\n                    self.selectedElement().elementFieldIndexSet().length > 0;\r\n            }\r\n\r\n            // Checks whether resource pool has any item that can be rateable\r\n            // Obsolete: Replaced with RatingCount > 0 / coni2k - 21 Feb. '16\r\n            function displayRatingMode() {\r\n\r\n                // Check resource pool level first\r\n                if (!self.UseFixedResourcePoolRate) {\r\n                    return true;\r\n                }\r\n\r\n                // Field index level\r\n                for (var elementIndex = 0; elementIndex < self.ElementSet.length; elementIndex++) {\r\n                    var element = self.ElementSet[elementIndex];\r\n\r\n                    // If there are multiple indexes, then the users can set index rating\r\n                    if (element.elementFieldIndexSet().length > 1) {\r\n                        return true;\r\n                    }\r\n\r\n                    // If there is an index without a fixed value\r\n                    if (element.elementFieldIndexSet().length > 0 && !element.elementFieldIndexSet()[0].UseFixedValue) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            function getEntities() {\r\n\r\n                var entities = [];\r\n\r\n                // No need to continue\r\n                if (self.isTemp) {\r\n                    return entities;\r\n                }\r\n\r\n                // Resource pool\r\n                entities.push(self);\r\n\r\n                // User resource pools\r\n                self.UserResourcePoolSet.forEach(function (userResourcePool) {\r\n                    entities.push(userResourcePool);\r\n                });\r\n\r\n                // Elements\r\n                self.ElementSet.forEach(function (element) {\r\n                    entities.push(element);\r\n\r\n                    // Fields\r\n                    element.ElementFieldSet.forEach(function (elementField) {\r\n                        entities.push(elementField);\r\n\r\n                        // User element fields\r\n                        elementField.UserElementFieldSet.forEach(function (userElementField) {\r\n                            entities.push(userElementField);\r\n                        });\r\n                    });\r\n\r\n                    // Items\r\n                    element.ElementItemSet.forEach(function (elementItem) {\r\n                        entities.push(elementItem);\r\n\r\n                        // Cells\r\n                        elementItem.ElementCellSet.forEach(function (elementCell) {\r\n                            entities.push(elementCell);\r\n\r\n                            // User cells\r\n                            elementCell.UserElementCellSet.forEach(function (userElementCell) {\r\n                                entities.push(userElementCell);\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n\r\n                return entities;\r\n            }\r\n\r\n            function isAdded(value) {\r\n                if (typeof value !== 'undefined') {\r\n                    self.backingFields._isAdded = value;\r\n                }\r\n                return self.backingFields._isAdded;\r\n            }\r\n\r\n            function mainElement() {\r\n                var result = self.ElementSet.filter(function (element) {\r\n                    return element.IsMainElement;\r\n                });\r\n\r\n                return result.length > 0 ? result[0] : null;\r\n            }\r\n\r\n            function name() {\r\n                var name = self.Name;\r\n                name += self.isEditing ? ' - Editing' : '';\r\n                return name;\r\n            }\r\n\r\n            // TODO Since this is a fixed value based on ResourcePoolRateCount & current user's rate,\r\n            // it could be calculated on server, check it later again / SH - 03 Aug. '15\r\n            function otherUsersResourcePoolRateCount() {\r\n\r\n                // Set other users' value on the initial call\r\n                if (self.backingFields._otherUsersResourcePoolRateCount === null) {\r\n                    self.setOtherUsersResourcePoolRateCount();\r\n                }\r\n\r\n                return self.backingFields._otherUsersResourcePoolRateCount;\r\n            }\r\n\r\n            // TODO Since this is a fixed value based on ResourcePoolRateTotal & current user's rate,\r\n            // it could be calculated on server, check it later again / SH - 03 Aug. '15\r\n            function otherUsersResourcePoolRateTotal() {\r\n\r\n                // Set other users' value on the initial call\r\n                if (self.backingFields._otherUsersResourcePoolRateTotal === null) {\r\n                    self.setOtherUsersResourcePoolRateTotal();\r\n                }\r\n\r\n                return self.backingFields._otherUsersResourcePoolRateTotal;\r\n            }\r\n\r\n            function resourcePoolRate() {\r\n\r\n                if (self.backingFields._resourcePoolRate === null) {\r\n                    self.setResourcePoolRate(false);\r\n                }\r\n\r\n                return self.backingFields._resourcePoolRate;\r\n            }\r\n\r\n            function resourcePoolRateAverage() {\r\n\r\n                if (self.resourcePoolRateCount() === null) {\r\n                    return null;\r\n                }\r\n\r\n                return self.resourcePoolRateCount() === 0 ?\r\n                    0 :\r\n                    self.resourcePoolRateTotal() / self.resourcePoolRateCount();\r\n            }\r\n\r\n            function resourcePoolRateCount() {\r\n                return self.UseFixedResourcePoolRate ?\r\n                    self.currentUserResourcePool() !== null && self.currentUserResourcePool().UserId === self.UserId ? // If it belongs to current user\r\n                    1 :\r\n                    self.otherUsersResourcePoolRateCount() :\r\n                    self.otherUsersResourcePoolRateCount() + 1; // There is always default value, increase count by 1\r\n            }\r\n\r\n            function resourcePoolRatePercentage() {\r\n\r\n                if (self.backingFields._resourcePoolRatePercentage === null) {\r\n                    self.setResourcePoolRatePercentage(false);\r\n                }\r\n\r\n                return self.backingFields._resourcePoolRatePercentage;\r\n            }\r\n\r\n            function resourcePoolRateTotal() {\r\n                return self.UseFixedResourcePoolRate ?\r\n                    self.currentUserResourcePool() !== null && self.currentUserResourcePool().UserId === self.UserId ? // If it belongs to current user\r\n                    self.currentUserResourcePoolRate() :\r\n                    self.otherUsersResourcePoolRateTotal() :\r\n                    self.otherUsersResourcePoolRateTotal() + self.currentUserResourcePoolRate();\r\n            }\r\n\r\n            function selectedElement(value) {\r\n\r\n                // Set new value\r\n                if (typeof value !== 'undefined' && self.backingFields._selectedElement !== value) {\r\n                    self.backingFields._selectedElement = value;\r\n                }\r\n\r\n                // If there is no existing value (initial state), use mainElement() as the selected\r\n                if (self.backingFields._selectedElement === null && self.mainElement()) {\r\n                    self.backingFields._selectedElement = self.mainElement();\r\n                }\r\n\r\n                return self.backingFields._selectedElement;\r\n            }\r\n\r\n            function setCurrentUserResourcePoolRate(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = self.currentUserResourcePool() !== null ?\r\n                    self.currentUserResourcePool().ResourcePoolRate :\r\n                    10; // Default value?\r\n\r\n                if (self.backingFields._currentUserResourcePoolRate !== value) {\r\n                    self.backingFields._currentUserResourcePoolRate = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.setResourcePoolRate();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setOtherUsersResourcePoolRateCount() {\r\n\r\n                self.backingFields._otherUsersResourcePoolRateCount = self.ResourcePoolRateCount;\r\n\r\n                // Exclude current user's\r\n                if (self.currentUserResourcePool() !== null) {\r\n                    self.backingFields._otherUsersResourcePoolRateCount--;\r\n                }\r\n            }\r\n\r\n            function setOtherUsersResourcePoolRateTotal() {\r\n                self.backingFields._otherUsersResourcePoolRateTotal = self.ResourcePoolRateTotal !== null ?\r\n                    self.ResourcePoolRateTotal :\r\n                    0;\r\n\r\n                // Exclude current user's\r\n                if (self.currentUserResourcePool() !== null) {\r\n                    self.backingFields._otherUsersResourcePoolRateTotal -= self.currentUserResourcePool().ResourcePoolRate;\r\n                }\r\n            }\r\n\r\n            function setResourcePoolRate(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value;\r\n\r\n                if (self.UseFixedResourcePoolRate) {\r\n                    value = self.resourcePoolRateAverage();\r\n                } else {\r\n                    switch (self.RatingMode) {\r\n                        case 1: { value = self.currentUserResourcePoolRate(); break; } // Current user's\r\n                        case 2: { value = self.resourcePoolRateAverage(); break; } // All\r\n                    }\r\n                }\r\n\r\n                if (self.backingFields._resourcePoolRate !== value) {\r\n                    self.backingFields._resourcePoolRate = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.setResourcePoolRatePercentage();\r\n                    }\r\n                }\r\n            }\r\n\r\n            function setResourcePoolRatePercentage(updateRelated) {\r\n                updateRelated = typeof updateRelated === 'undefined' ? true : updateRelated;\r\n\r\n                var value = self.resourcePoolRate() === 0 ?\r\n                    0 :\r\n                    self.resourcePoolRate() / 100;\r\n\r\n                if (self.backingFields._resourcePoolRatePercentage !== value) {\r\n                    self.backingFields._resourcePoolRatePercentage = value;\r\n\r\n                    // Update related\r\n                    if (updateRelated) {\r\n                        self.ElementSet.forEach(function (element) {\r\n\r\n                            element.ElementItemSet.forEach(function (item) {\r\n                                item.setResourcePoolAmount();\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function toggleRatingMode() {\r\n                self.RatingMode = self.RatingMode === 1 ? 2 : 1;\r\n            }\r\n\r\n            // TOOD Should be obsolete if we could start using \"auto save anonymous user\"\r\n            function updateAnonymousEntities() {\r\n\r\n                if (!self.isAdded()) {\r\n                    return;\r\n                }\r\n\r\n                // Turn the flag off\r\n                self.isAdded(false);\r\n\r\n                // Resource pool itself\r\n                self.entityAspect.setAdded();\r\n\r\n                // User resource pools\r\n                self.UserResourcePoolSet.forEach(function (userResourcePool) {\r\n                    userResourcePool.entityAspect.setAdded();\r\n                });\r\n\r\n                // Elements\r\n                self.ElementSet.forEach(function (element) {\r\n                    element.entityAspect.setAdded();\r\n\r\n                    // Fields\r\n                    element.ElementFieldSet.forEach(function (elementField) {\r\n                        elementField.entityAspect.setAdded();\r\n\r\n                        // User element fields\r\n                        elementField.UserElementFieldSet.forEach(function (userElementField) {\r\n                            userElementField.entityAspect.setAdded();\r\n                        });\r\n                    });\r\n\r\n                    // Items\r\n                    element.ElementItemSet.forEach(function (elementItem) {\r\n                        elementItem.entityAspect.setAdded();\r\n\r\n                        // Cells\r\n                        elementItem.ElementCellSet.forEach(function (elementCell) {\r\n                            elementCell.entityAspect.setAdded();\r\n\r\n                            // User cells\r\n                            elementCell.UserElementCellSet.forEach(function (userElementCell) {\r\n                                userElementCell.entityAspect.setAdded();\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n\r\n            // TODO Most of these functions are related with userService.js - updateX functions\r\n            // Try to merge these two - Actually try to handle these actions within the related entity / SH - 27 Nov. '15\r\n            function updateCache() {\r\n\r\n                var isUnchanged = false;\r\n\r\n                self.setCurrentUserResourcePoolRate();\r\n\r\n                // Elements\r\n                if (typeof self.ElementSet !== 'undefined') {\r\n                    self.ElementSet.forEach(function (element) {\r\n\r\n                        // TODO Review this later / SH - 24 Nov. '15\r\n                        element.setElementFieldIndexSet();\r\n\r\n                        // Fields\r\n                        if (typeof element.ElementFieldSet !== 'undefined') {\r\n                            element.ElementFieldSet.forEach(function (field) {\r\n\r\n                                if (field.IndexEnabled) {\r\n                                    // TODO Actually index rating can't be set through resourcePoolEdit page and no need to update this cache\r\n                                    // But still keep it as a reminder? / SH - 29 Nov. '15\r\n                                    field.setCurrentUserIndexRating();\r\n                                }\r\n\r\n                                // Cells\r\n                                if (typeof field.ElementCellSet !== 'undefined') {\r\n                                    field.ElementCellSet.forEach(function (cell) {\r\n\r\n                                        switch (cell.ElementField.DataType) {\r\n                                            case 1: {\r\n                                                // TODO Again what a mess!\r\n                                                // StringValue is a computed value, it should normally come from the server\r\n                                                // But in case resource pool was just created, then it should be directly set like this.\r\n                                                // Otherwise, it doesn't show its value on editor.\r\n                                                // And on top of it, since it changes, breeze thinks that 'cell' is modified and tries to send it server\r\n                                                // which results an error. So that's why modified check & acceptChanges parts were added.\r\n                                                // SH - 01 Dec. '15\r\n                                                if (cell.UserElementCellSet.length > 0) {\r\n                                                    isUnchanged = cell.entityAspect.entityState.isUnchanged();\r\n                                                    cell.StringValue = cell.UserElementCellSet[0].StringValue;\r\n                                                    if (isUnchanged) { cell.entityAspect.acceptChanges(); }\r\n                                                }\r\n                                                break;\r\n                                            }\r\n                                            case 2:\r\n                                            case 3:\r\n                                            case 4:\r\n                                                // TODO DateTime?\r\n                                                {\r\n                                                    cell.setCurrentUserNumericValue();\r\n                                                    break;\r\n                                                }\r\n                                            case 11:\r\n                                                {\r\n                                                    // TODO DirectIncome is always calculated from NumericValueTotal\r\n                                                    // Which is actually not correct but till that its fixed, update it like this / SH - 29 Nov. '15\r\n                                                    // Also check 'What a mess' of StringValue\r\n                                                    if (cell.UserElementCellSet.length > 0) {\r\n                                                        isUnchanged = cell.entityAspect.entityState.isUnchanged();\r\n                                                        cell.NumericValueTotal = cell.UserElementCellSet[0].DecimalValue;\r\n                                                        if (isUnchanged) { cell.entityAspect.acceptChanges(); }\r\n                                                    }\r\n\r\n                                                    cell.setCurrentUserNumericValue();\r\n                                                    break;\r\n                                                }\r\n                                            case 12:\r\n                                                {\r\n                                                    cell.ElementItem.setMultiplier();\r\n\r\n                                                    if (cell.ElementField.IndexEnabled) {\r\n                                                        cell.setNumericValueMultiplied();\r\n                                                    }\r\n\r\n                                                    break;\r\n                                                }\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'User';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', userFactory]);\r\n\r\n    function userFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Return\r\n        return User;\r\n\r\n        function User() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.Id = 0;\r\n            self.Email = '';\r\n            self.EmailConfirmed = false;\r\n            self.UserName = '';\r\n            self.FirstName = '';\r\n            self.MiddleName = '';\r\n            self.LastName = '';\r\n            self.PhoneNumber = '';\r\n            self.PhoneNumberConfirmed = false;\r\n            self.TwoFactorEnabled = false;\r\n            self.AccessFailedCount = 0;\r\n            self.LockoutEnabled = false;\r\n            self.LockoutEndDateUtc = null;\r\n            self.Notes = '';\r\n            self.CreatedOn = new Date();\r\n            self.ModifiedOn = new Date();\r\n            self.DeletedOn = null;\r\n            // TODO breezejs - Cannot assign a navigation property in an entity ctor\r\n            //self.Claims = null;\r\n            //self.Logins = [];\r\n            //self.Roles = [];\r\n\r\n            // Client-side\r\n            self.isEditing = false;\r\n\r\n            // Functions\r\n            self.getEntities = getEntities;\r\n            self.hasPassword = hasPassword;\r\n            self.isAuthenticated = isAuthenticated;\r\n\r\n            /*** Implementations ***/\r\n\r\n            function getEntities() {\r\n\r\n                var entities = [];\r\n\r\n                entities.push(self);\r\n\r\n                self.ResourcePoolSet.forEach(function (resourcePool) {\r\n                    var resourcePoolEntities = resourcePool.getEntities(); // TODO Probably there is an easier way to do this?\r\n                    resourcePoolEntities.forEach(function (entity) {\r\n                        entities.push(entity);\r\n                    });\r\n                });\r\n\r\n                // TODO Other user related entities?\r\n\r\n                return entities;\r\n            }\r\n\r\n            function hasPassword() {\r\n                if (typeof self.Claims === 'undefined') {\r\n                    throw new Error('Invalid operation: Claims is undefined');\r\n                }\r\n\r\n                for (var i = 0; i < self.Claims.length; i++) {\r\n                    var claim = self.Claims[i];\r\n                    if (claim.ClaimType === 'HasNoPassword') {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            function isAuthenticated() {\r\n                return self.Id > 0;\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'UserElementCell';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', userElementCellFactory]);\r\n\r\n    function userElementCellFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Properties\r\n        Object.defineProperty(UserElementCell.prototype, 'DecimalValue', {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: function () { return this.backingFields._DecimalValue; },\r\n            set: function (value) {\r\n                if (this.backingFields._DecimalValue !== value) {\r\n                    this.backingFields._DecimalValue = value;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Return\r\n        return UserElementCell;\r\n\r\n        function UserElementCell() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.UserId = 0;\r\n            self.ElementCellId = 0;\r\n            self.StringValue = null;\r\n            self.BooleanValue = null;\r\n            self.IntegerValue = null;\r\n            // \r\n            self.DateTimeValue = null;\r\n\r\n            // Local variables\r\n            self.backingFields = {\r\n                _DecimalValue: null\r\n            };\r\n            self.isEditing = false;\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'UserElementField';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', userElementFieldFactory]);\r\n\r\n    function userElementFieldFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Return\r\n        return UserElementField;\r\n\r\n        function UserElementField() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.UserId = 0;\r\n            self.ElementFieldId = 0;\r\n            self.Rating = 0;\r\n\r\n            // Local variables\r\n            self.isEditing = false;\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'UserResourcePool';\r\n    angular.module('main')\r\n        .factory(factoryId, ['logger', userResourcePoolFactory]);\r\n\r\n    function userResourcePoolFactory(logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Return\r\n        return UserResourcePool;\r\n\r\n        function UserResourcePool() {\r\n\r\n            var self = this;\r\n\r\n            // Server-side\r\n            self.UserId = 0;\r\n            self.ResourcePoolId = 0;\r\n            self.ResourcePoolRate = 0;\r\n\r\n            // Local variables\r\n            self.isEditing = false;\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'applicationFactory';\r\n    angular.module('main')\r\n        .factory(factoryId, ['$http', '$q', 'serviceAppUrl', 'logger', applicationFactory]);\r\n\r\n    function applicationFactory($http, $q, serviceAppUrl, logger) {\r\n        logger = logger.forSource(factoryId);\r\n\r\n        var applicationInfoUrl = serviceAppUrl + '/api/Application/ApplicationInfo';\r\n        var applicationInfo = null;\r\n\r\n        // Factory methods\r\n        var factory = {\r\n            getApplicationInfo: getApplicationInfo\r\n        };\r\n\r\n        return factory;\r\n\r\n        /*** Implementations ***/\r\n\r\n        function getApplicationInfo() {\r\n\r\n            var deferred = $q.defer();\r\n\r\n            if (applicationInfo !== null) {\r\n                deferred.resolve(applicationInfo);\r\n            }\r\n            else {\r\n                $http.get(applicationInfoUrl)\r\n                    .success(function (data) {\r\n                        applicationInfo = data;\r\n                        deferred.resolve(applicationInfo);\r\n                    })\r\n                    .error(function (data, status, headers, config) {\r\n                        // TODO Check this approach? - Just return 'Something went wrong'?\r\n                        deferred.reject({ data: data, status: status, headers: headers, config: config });\r\n                    });\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})();\r\n","/***\r\n * Service: dataContext \r\n *\r\n * Handles all persistence and creation/deletion of app entities\r\n * using BreezeJS.\r\n *\r\n ***/\r\n(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'dataContext';\r\n    angular.module('main')\r\n        .factory(factoryId, ['entityManagerFactory', '$q', '$rootScope', '$timeout', 'logger', dataContext]);\r\n\r\n    function dataContext(entityManagerFactory, $q, $rootScope, $timeout, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Manager\r\n        var currentUser = { isAuthenticated: function () { return false; } };\r\n        var manager = null;\r\n        var metadataReadyPromise = null;\r\n        var saveTimer = null;\r\n\r\n        // Factory methods\r\n        var factory = {\r\n            clear: clear,\r\n            createEntity: createEntity,\r\n            executeQuery: executeQuery,\r\n            fetchEntityByKey: fetchEntityByKey,\r\n            getChanges: getChanges,\r\n            getChangesCount: getChangesCount,\r\n            getEntities: getEntities,\r\n            hasChanges: hasChanges,\r\n            metadataReady: metadataReady,\r\n            rejectChanges: rejectChanges,\r\n            saveChanges: saveChanges,\r\n            saveChangesAlt: saveChangesAlt,\r\n            updateAnonymousChanges: updateAnonymousChanges\r\n        };\r\n\r\n        // Event handlers\r\n        $rootScope.$on('ElementField_createUserElementCell', createUserElementCell);\r\n        $rootScope.$on('userFactory_currentUserChanged', currentUserChanged);\r\n\r\n        _init();\r\n\r\n        return factory;\r\n\r\n        /*** Implementations ***/\r\n\r\n        function _init() {\r\n            manager = entityManagerFactory.newManager();\r\n        }\r\n\r\n        function clear() {\r\n            manager.clear();\r\n        }\r\n\r\n        function createEntity(entityType, initialValues) {\r\n\r\n            // All entities will be created in isEditing state by default\r\n            if (typeof initialValues.isEditing === 'undefined') {\r\n                initialValues.isEditing = true;\r\n            }\r\n\r\n            return manager.createEntity(entityType, initialValues);\r\n        }\r\n\r\n        function createUserElementCell(event, userElementCell) {\r\n            return createEntity('UserElementCell', userElementCell);\r\n        }\r\n\r\n        function currentUserChanged(event, newUser) {\r\n            currentUser = newUser;\r\n        }\r\n\r\n        function executeQuery(query) {\r\n            return manager.executeQuery(query);\r\n        }\r\n\r\n        function fetchEntityByKey(typeName, keyValues, checkLocalCacheFirst) {\r\n            return manager.fetchEntityByKey(typeName, keyValues, checkLocalCacheFirst);\r\n        }\r\n\r\n        function getChanges(entityTypeName, entityState) {\r\n            entityTypeName = typeof entityTypeName !== 'undefined' ? entityTypeName : null;\r\n            entityState = typeof entityState !== 'undefined' ? entityState : null;\r\n\r\n            var all = manager.getChanges();\r\n            var changes = [];\r\n\r\n            // Filters\r\n            all.forEach(function (change) {\r\n                if (!change.isEditing &&\r\n                    (entityTypeName === null || change.entityType.shortName === entityTypeName) &&\r\n                    (entityState === null || change.entityAspect.entityState === entityState)) {\r\n                    changes.push(change);\r\n                }\r\n            });\r\n\r\n            return changes;\r\n            // return manager.getChanges();\r\n        }\r\n\r\n        function getChangesCount() {\r\n            return getChanges().length;\r\n            // return manager.getChanges().length;\r\n        }\r\n\r\n        function getEntities(entityTypes, entityStates) {\r\n            return manager.getEntities(entityTypes, entityStates);\r\n        }\r\n\r\n        function hasChanges() {\r\n            return manager.hasChanges();\r\n        }\r\n\r\n        function metadataReady() {\r\n\r\n            if (metadataReadyPromise === null) {\r\n\r\n                var deferred = $q.defer();\r\n\r\n                metadataReadyPromise = deferred.promise;\r\n\r\n                if (manager.metadataStore.isEmpty()) {\r\n                    manager.fetchMetadata()\r\n                        .then(function () {\r\n                            deferred.resolve();\r\n                        },\r\n                        function (error) {\r\n                            deferred.reject(error);\r\n                        });\r\n                } else {\r\n                    deferred.resolve();\r\n                }\r\n            }\r\n\r\n            return metadataReadyPromise;\r\n        }\r\n\r\n        function rejectChanges() {\r\n            manager.rejectChanges();\r\n        }\r\n\r\n        function saveChanges(delay) {\r\n            delay = typeof delay !== 'undefined' ? delay : 0;\r\n\r\n            // Anonymous user check\r\n            if (!currentUser.isAuthenticated()) {\r\n                $rootScope.$broadcast('anonymousUserInteracted');\r\n                return $q.reject({});\r\n            }\r\n\r\n            // Cancel existing timers (delay the save)\r\n            if (saveTimer !== null) {\r\n                $timeout.cancel(saveTimer);\r\n            }\r\n\r\n            // Save immediately or wait based on delay\r\n            if (delay === 0) {\r\n                return saveChangesInternal();\r\n            } else {\r\n                saveTimer = $timeout(function () {\r\n                    saveChangesInternal();\r\n                }, delay);\r\n                return saveTimer;\r\n            }\r\n\r\n            // TODO Is it necessary to cancel the timer at the end of the service, like this ?\r\n\r\n            //// When the DOM element is removed from the page,\r\n            //// AngularJS will trigger the $destroy event on\r\n            //// the scope. This gives us a chance to cancel any\r\n            //// pending timer that we may have.\r\n            //$scope.$on(\"$destroy\", function (event) {\r\n            //    $timeout.cancel(increaseMultiplierTimeoutInitial);\r\n            //    $timeout.cancel(increaseMultiplierTimeoutRecursive);\r\n            //});\r\n        }\r\n\r\n        function saveChangesInternal() {\r\n\r\n            var count = getChangesCount();\r\n            var promise = null;\r\n            var saveBatches = prepareSaveBatches();\r\n            saveBatches.forEach(function (batch) {\r\n\r\n                // ignore empty batches (except 'null' which means \"save everything else\")\r\n                if (batch === null || batch.length > 0) {\r\n\r\n                    // Broadcast, so UI can block\r\n                    $rootScope.$broadcast('saveChangesStart');\r\n\r\n                    promise = promise ?\r\n                        promise.then(function () { return manager.saveChanges(batch); }) :\r\n                        manager.saveChanges(batch);\r\n                }\r\n            });\r\n\r\n            // There is nothing to save?\r\n            if (promise === null) {\r\n                promise = $q.resolve(null);\r\n            }\r\n\r\n            return promise.then(success).catch(failed).finally(completed);\r\n\r\n            function success(result) {\r\n                logger.logSuccess('Saved ' + count + ' change(s)');\r\n                return result;\r\n            }\r\n\r\n            function failed(error) {\r\n                if (typeof error.status !== 'undefined' && error.status === '409') {\r\n                    logger.logError('Save failed!<br />The record you attempted to edit was modified by another user after you got the original value. The edit operation was canceled.', error, true);\r\n                } else if (typeof error.entityErrors !== 'undefined') {\r\n\r\n                    var errorMessage = 'Save failed!<br />';\r\n\r\n                    for (var key in error.entityErrors) {\r\n                        var entityError = error.entityErrors[key];\r\n                        errorMessage += entityError.errorMessage + '<br />';\r\n                    }\r\n\r\n                    logger.logError(errorMessage, null, true);\r\n\r\n                } else {\r\n                    logger.logError('Save failed!', error, true);\r\n                }\r\n\r\n                return $q.reject(error); // pass error along to next handler\r\n            }\r\n\r\n            function completed() {\r\n\r\n                // Broadcast, so UI can unblock\r\n                $rootScope.$broadcast('saveChangesCompleted');\r\n            }\r\n\r\n            function prepareSaveBatches() {\r\n\r\n                var batches = [];\r\n\r\n                // RowVersion fix\r\n                // TODO How about Deleted state?\r\n                var modifiedEntities = getChanges(null, breeze.EntityState.Modified);\r\n                modifiedEntities.forEach(function (entity) {\r\n                    var rowVersion = entity.RowVersion;\r\n                    entity.RowVersion = '';\r\n                    entity.RowVersion = rowVersion;\r\n                });\r\n                batches.push(modifiedEntities);\r\n\r\n                /* Aaargh! \r\n                * Web API OData doesn't calculate the proper save order\r\n                * which means, if we aren't careful on the client,\r\n                * we could save a new TodoItem before we saved its parent new TodoList\r\n                * or delete the parent TodoList before saving its deleted child TodoItems.\r\n                * OData says it is up to the client to save entities in the order\r\n                * required by referential constraints of the database.\r\n                * While we could save each time you make a change, that sucks.\r\n                * So we'll divvy up the pending changes into 4 batches\r\n                * 1. Deleted Todos\r\n                * 2. Deleted TodoLists\r\n                * 3. Added TodoLists\r\n                * 4. Every other change\r\n                */\r\n\r\n                batches.push(getChanges('UserElementCell', breeze.EntityState.Deleted));\r\n                batches.push(getChanges('ElementCell', breeze.EntityState.Deleted));\r\n                batches.push(getChanges('ElementItem', breeze.EntityState.Deleted));\r\n                batches.push(getChanges('UserElementField', breeze.EntityState.Deleted));\r\n                batches.push(getChanges('ElementField', breeze.EntityState.Deleted));\r\n                batches.push(getChanges('Element', breeze.EntityState.Deleted));\r\n                batches.push(getChanges('UserResourcePool', breeze.EntityState.Deleted));\r\n                batches.push(getChanges('ResourcePool', breeze.EntityState.Deleted));\r\n\r\n                batches.push(getChanges('ResourcePool', breeze.EntityState.Added));\r\n                batches.push(getChanges('UserResourcePool', breeze.EntityState.Added));\r\n                batches.push(getChanges('Element', breeze.EntityState.Added));\r\n                batches.push(getChanges('ElementField', breeze.EntityState.Added));\r\n                batches.push(getChanges('UserElementField', breeze.EntityState.Added));\r\n                batches.push(getChanges('ElementItem', breeze.EntityState.Added));\r\n                batches.push(getChanges('ElementCell', breeze.EntityState.Added));\r\n                batches.push(getChanges('UserElementCell', breeze.EntityState.Added));\r\n\r\n                // batches.push(null); // empty = save all remaining pending changes\r\n\r\n                return batches;\r\n                /*\r\n                 *  No we can't flatten into one request because Web API OData reorders\r\n                 *  arbitrarily, causing the database failure we're trying to avoid.\r\n                 */\r\n            }\r\n        }\r\n\r\n        function saveChangesAlt(entities, delay) {\r\n            delay = typeof delay !== 'undefined' ? delay : 0;\r\n\r\n            // Anonymous user check\r\n            if (!currentUser.isAuthenticated()) {\r\n                $rootScope.$broadcast('anonymousUserInteracted');\r\n                return $q.reject({});\r\n            }\r\n\r\n            // Cancel existing timers (delay the save)\r\n            if (saveTimer !== null) {\r\n                $timeout.cancel(saveTimer);\r\n            }\r\n\r\n            // Save immediately or wait based on delay\r\n            if (delay === 0) {\r\n                return saveChangesInternalAlt(entities);\r\n            } else {\r\n                saveTimer = $timeout(function () {\r\n                    saveChangesInternalAlt(entities);\r\n                }, delay);\r\n                return saveTimer;\r\n            }\r\n\r\n            // TODO Is it necessary to cancel the timer at the end of the service, like this ?\r\n\r\n            //// When the DOM element is removed from the page,\r\n            //// AngularJS will trigger the $destroy event on\r\n            //// the scope. This gives us a chance to cancel any\r\n            //// pending timer that we may have.\r\n            //$scope.$on(\"$destroy\", function (event) {\r\n            //    $timeout.cancel(increaseMultiplierTimeoutInitial);\r\n            //    $timeout.cancel(increaseMultiplierTimeoutRecursive);\r\n            //});\r\n        }\r\n\r\n        function saveChangesInternalAlt(entities) {\r\n\r\n            var count = entities.length; // getChangesCount();\r\n            var promise = null;\r\n            var saveBatches = prepareSaveBatches(entities);\r\n            saveBatches.forEach(function (batch) {\r\n\r\n                // ignore empty batches (except 'null' which means \"save everything else\")\r\n                if (batch === null || batch.length > 0) {\r\n\r\n                    // Broadcast, so UI can block\r\n                    $rootScope.$broadcast('saveChangesStart');\r\n\r\n                    promise = promise ?\r\n                        promise.then(function () { return manager.saveChanges(batch); }) :\r\n                        manager.saveChanges(batch);\r\n                }\r\n            });\r\n            return promise.then(success).catch(failed).finally(completed);\r\n\r\n            function success(result) {\r\n                logger.logSuccess('Saved ' + count + ' change(s)');\r\n                return result;\r\n            }\r\n\r\n            function failed(error) {\r\n                if (typeof error.status !== 'undefined' && error.status === '409') {\r\n                    logger.logError('Save failed!<br />The record you attempted to edit was modified by another user after you got the original value. The edit operation was canceled.', error, true);\r\n                } else if (typeof error.entityErrors !== 'undefined') {\r\n\r\n                    var errorMessage = 'Save failed!<br />';\r\n\r\n                    for (var key in error.entityErrors) {\r\n                        var entityError = error.entityErrors[key];\r\n                        errorMessage += entityError.errorMessage + '<br />';\r\n                    }\r\n\r\n                    logger.logError(errorMessage, null, true);\r\n\r\n                } else {\r\n                    logger.logError('Save failed!', error, true);\r\n                }\r\n\r\n                return $q.reject(error); // pass error along to next handler\r\n            }\r\n\r\n            function completed() {\r\n\r\n                // Broadcast, so UI can unblock\r\n                $rootScope.$broadcast('saveChangesCompleted');\r\n            }\r\n\r\n            function prepareSaveBatches(entities) {\r\n\r\n                var batches = [];\r\n\r\n                // RowVersion fix\r\n                // TODO How about Deleted state?\r\n                var modifiedEntities = [];\r\n                entities.forEach(function (entity) {\r\n                    if (entity.entityAspect.entityState.isModified()) {\r\n                        var rowVersion = entity.RowVersion;\r\n                        entity.RowVersion = '';\r\n                        entity.RowVersion = rowVersion;\r\n                        modifiedEntities.push(entity);\r\n                    }\r\n                });\r\n                batches.push(modifiedEntities);\r\n\r\n                /* Aaargh! \r\n                * Web API OData doesn't calculate the proper save order\r\n                * which means, if we aren't careful on the client,\r\n                * we could save a new TodoItem before we saved its parent new TodoList\r\n                * or delete the parent TodoList before saving its deleted child TodoItems.\r\n                * OData says it is up to the client to save entities in the order\r\n                * required by referential constraints of the database.\r\n                * While we could save each time you make a change, that sucks.\r\n                * So we'll divvy up the pending changes into 4 batches\r\n                * 1. Deleted Todos\r\n                * 2. Deleted TodoLists\r\n                * 3. Added TodoLists\r\n                * 4. Every other change\r\n                */\r\n\r\n                batches.push(getEntities(entities, 'UserElementCell', breeze.EntityState.Deleted));\r\n                batches.push(getEntities(entities, 'ElementCell', breeze.EntityState.Deleted));\r\n                batches.push(getEntities(entities, 'ElementItem', breeze.EntityState.Deleted));\r\n                batches.push(getEntities(entities, 'UserElementField', breeze.EntityState.Deleted));\r\n                batches.push(getEntities(entities, 'ElementField', breeze.EntityState.Deleted));\r\n                batches.push(getEntities(entities, 'Element', breeze.EntityState.Deleted));\r\n                batches.push(getEntities(entities, 'UserResourcePool', breeze.EntityState.Deleted));\r\n                batches.push(getEntities(entities, 'ResourcePool', breeze.EntityState.Deleted));\r\n\r\n                batches.push(getEntities(entities, 'ResourcePool', breeze.EntityState.Added));\r\n                batches.push(getEntities(entities, 'UserResourcePool', breeze.EntityState.Added));\r\n                batches.push(getEntities(entities, 'Element', breeze.EntityState.Added));\r\n                batches.push(getEntities(entities, 'ElementField', breeze.EntityState.Added));\r\n                batches.push(getEntities(entities, 'UserElementField', breeze.EntityState.Added));\r\n                batches.push(getEntities(entities, 'ElementItem', breeze.EntityState.Added));\r\n                batches.push(getEntities(entities, 'ElementCell', breeze.EntityState.Added));\r\n                batches.push(getEntities(entities, 'UserElementCell', breeze.EntityState.Added));\r\n\r\n                function getEntities(entities, typeName, entityState) {\r\n                    var result = [];\r\n\r\n                    entities.forEach(function (entity) {\r\n                        if (entity.entityType.shortName === typeName && entity.entityAspect.entityState === entityState) {\r\n                            result.push(entity);\r\n                        }\r\n                    });\r\n\r\n                    return result;\r\n                }\r\n\r\n                // batches.push(null); // empty = save all remaining pending changes\r\n\r\n                return batches;\r\n                /*\r\n                 *  No we can't flatten into one request because Web API OData reorders\r\n                 *  arbitrarily, causing the database failure we're trying to avoid.\r\n                 */\r\n            }\r\n        }\r\n\r\n        // When the user interact with the application without registering or login in,\r\n        // it creates an anonymous user and all entity creations done by this user\r\n        // If the user has actually an account and logs in afterwards, this function moves all those changes to that logged in user\r\n        function updateAnonymousChanges(anonymousUser, newUser) {\r\n\r\n            var deferred = $q.defer();\r\n\r\n            if (typeof anonymousUser === 'undefined' || anonymousUser === null) {\r\n                deferred.reject('anonymousUser parameter cannot be undefined or null');\r\n            }\r\n\r\n            if (typeof newUser === 'undefined' || newUser === null) {\r\n                deferred.reject('newUser parameter cannot be undefined or null');\r\n            }\r\n\r\n            var existingEntityPromises = [];\r\n            anonymousUser.UserResourcePoolSet.forEach(function (userResourcePool) {\r\n                var keyValues = [newUser.Id, userResourcePool.ResourcePoolId];\r\n                var promise = fetchEntityByKey('UserResourcePool', keyValues);\r\n                existingEntityPromises.push(promise);\r\n            });\r\n\r\n            anonymousUser.UserElementFieldSet.forEach(function (userElementField) {\r\n                var keyValues = [newUser.Id, userElementField.ElementFieldId];\r\n                var promise = fetchEntityByKey('UserElementField', keyValues);\r\n                existingEntityPromises.push(promise);\r\n            });\r\n\r\n            anonymousUser.UserElementCellSet.forEach(function (userElementCell) {\r\n                var keyValues = [newUser.Id, userElementCell.ElementCellId];\r\n                var promise = fetchEntityByKey('UserElementCell', keyValues);\r\n                existingEntityPromises.push(promise);\r\n            });\r\n\r\n            $q.all(existingEntityPromises).then(function () {\r\n\r\n                // Resource pools\r\n                anonymousUser.ResourcePoolSet.forEach(function (anonymousResourcePool) {\r\n                    anonymousResourcePool.User = newUser;\r\n                });\r\n\r\n                // User resource pools\r\n                var userResourcePoolSet = anonymousUser.UserResourcePoolSet.slice();\r\n                userResourcePoolSet.forEach(function (anonymousUserResourcePool) {\r\n\r\n                    var result = newUser.UserResourcePoolSet.filter(function (userResourcePool) {\r\n                        return userResourcePool.ResourcePoolId === anonymousUserResourcePool.ResourcePoolId;\r\n                    });\r\n\r\n                    if (result.length > 0) { // If there is an existing entity, update it and remove the anonymous one\r\n                        result[0].ResourcePoolRate = anonymousUserResourcePool.ResourcePoolRate;\r\n                        anonymousUserResourcePool.entityAspect.rejectChanges();\r\n                    } else { // Otherwise update the anonymous one with the new user\r\n                        anonymousUserResourcePool.User = newUser;\r\n                    }\r\n                });\r\n\r\n                // User element fields\r\n                var userElementFieldSet = anonymousUser.UserElementFieldSet.slice();\r\n                userElementFieldSet.forEach(function (anonymousUserElementField) {\r\n\r\n                    // If existing entity, then make it modified\r\n                    var result = newUser.UserElementFieldSet.filter(function (userElementField) {\r\n                        return userElementField.ElementFieldId === anonymousUserElementField.ElementFieldId;\r\n                    });\r\n\r\n                    if (result.length > 0) { // If there is an existing entity, update it and remove the anonymous one\r\n                        result[0].Rating = anonymousUserElementField.Rating;\r\n                        anonymousUserElementField.entityAspect.rejectChanges();\r\n                    } else { // Otherwise update the anonymous one with the new user\r\n                        anonymousUserElementField.User = newUser;\r\n                    }\r\n                });\r\n\r\n                // User element cells\r\n                var userElementCellSet = anonymousUser.UserElementCellSet.slice();\r\n                userElementCellSet.forEach(function (anonymousUserElementCell) {\r\n\r\n                    // If existing entity, then make it modified\r\n                    var result = newUser.UserElementCellSet.filter(function (userElementCell) {\r\n                        return userElementCell.ElementCellId === anonymousUserElementCell.ElementCellId;\r\n                    });\r\n\r\n                    if (result.length > 0) { // If there is an existing entity, update it and remove the anonymous one\r\n                        result[0].StringValue = anonymousUserElementCell.StringValue;\r\n                        result[0].BooleanValue = anonymousUserElementCell.BooleanValue;\r\n                        result[0].IntegerValue = anonymousUserElementCell.IntegerValue;\r\n                        result[0].DecimalValue = anonymousUserElementCell.DecimalValue;\r\n                        result[0].DateTimeValue = anonymousUserElementCell.DateTimeValue;\r\n                        anonymousUserElementCell.entityAspect.rejectChanges();\r\n                    } else { // Otherwise update the anonymous one with the new user\r\n                        anonymousUserElementCell.User = newUser;\r\n                    }\r\n                });\r\n\r\n                // Remove the old (anonymous) user\r\n                anonymousUser.entityAspect.rejectChanges();\r\n\r\n                deferred.resolve();\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})();","/***\r\n * Service: entityManagerFactory \r\n *\r\n * Configures BreezeJS and creates new instance(s) of the \r\n * BreezeJS EntityManager for use in a 'dataContext' service\r\n *\r\n ***/\r\n(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'entityManagerFactory';\r\n    angular.module('main')\r\n        .factory(factoryId, ['breeze',\r\n            'Element',\r\n            'ElementCell',\r\n            'ElementField',\r\n            'ElementItem',\r\n            'ResourcePool',\r\n            'User',\r\n            'UserElementCell',\r\n            'UserElementField',\r\n            'UserResourcePool',\r\n            '$rootScope',\r\n            'serviceAppUrl',\r\n            'logger',\r\n            entityManagerFactory]);\r\n\r\n    function entityManagerFactory(breeze,\r\n        Element,\r\n        ElementCell,\r\n        ElementField,\r\n        ElementItem,\r\n        ResourcePool,\r\n        User,\r\n        UserElementCell,\r\n        UserElementField,\r\n        UserResourcePool,\r\n        $rootScope,\r\n        serviceAppUrl,\r\n        logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // var serviceRoot = window.location.protocol + '//localhost:15001/';\r\n        var serviceRoot = serviceAppUrl;\r\n        var serviceName = serviceRoot + '/odata';\r\n        var factory = {\r\n            newManager: newManager,\r\n            serviceName: serviceName\r\n        };\r\n\r\n        return factory;\r\n\r\n        function newManager() {\r\n            var manager = new breeze.EntityManager(serviceName);\r\n            var store = manager.metadataStore;\r\n\r\n            store.registerEntityTypeCtor('Element', Element);\r\n            store.registerEntityTypeCtor('ElementCell', ElementCell);\r\n            store.registerEntityTypeCtor('ElementField', ElementField);\r\n            store.registerEntityTypeCtor('ElementItem', ElementItem);\r\n            store.registerEntityTypeCtor('ResourcePool', ResourcePool);\r\n            store.registerEntityTypeCtor('User', User);\r\n            store.registerEntityTypeCtor('UserElementCell', UserElementCell);\r\n            store.registerEntityTypeCtor('UserElementField', UserElementField);\r\n            store.registerEntityTypeCtor('UserResourcePool', UserResourcePool);\r\n\r\n            return manager;\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'locationHistory';\r\n    angular.module('main')\r\n        .factory(factoryId, ['resourcePoolFactory', '$q', 'logger', locationHistory]);\r\n\r\n    function locationHistory(resourcePoolFactory, $q, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        var self = {\r\n            history: [new LocationItem('/')],\r\n            historyLimit: 10\r\n        };\r\n\r\n        var factory = {\r\n            createItem: createItem,\r\n            getHistory: getHistory,\r\n            previousItem: previousItem\r\n        };\r\n\r\n        // Return\r\n        return factory;\r\n\r\n        /*** Implementations ***/\r\n\r\n        function createItem($location, $routeCurrent) {\r\n\r\n            var deferred = $q.defer();\r\n\r\n            // TODO Try to use only routeCurrent?\r\n            var itemUrl = $location.url();\r\n            var accessType = $routeCurrent.accessType;\r\n            var resourcePoolId = $routeCurrent.params.resourcePoolId;\r\n            var isEdit = $location.path().substring($location.path().lastIndexOf('/') + 1) === 'edit';\r\n\r\n            if (typeof resourcePoolId !== 'undefined') {\r\n                resourcePoolFactory.getResourcePool(resourcePoolId).then(createItemInternal);\r\n            } else {\r\n                createItemInternal();\r\n            }\r\n\r\n            function createItemInternal(resourcePool) {\r\n                var item = new LocationItem(itemUrl, accessType, resourcePool, isEdit);\r\n                self.history.push(item);\r\n\r\n                // Only keep limited number of items\r\n                if (self.history.length > self.historyLimit) {\r\n                    self.history.splice(0, self.history.length - self.historyLimit);\r\n                }\r\n\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function getHistory() {\r\n            return self.history.slice();\r\n        }\r\n\r\n        function previousItem(excludeAccessType) {\r\n            excludeAccessType = typeof excludeAccessType !== 'undefined' ? excludeAccessType : '';\r\n\r\n            for (var i = self.history.length - 2; i >= 0; i--) {\r\n                var item = self.history[i];\r\n\r\n                if (excludeAccessType === '' || excludeAccessType !== item.accessType) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n\r\n        function LocationItem(itemUrl, accessType, resourcePool, isEdit) {\r\n            itemUrl = typeof itemUrl !== 'undefined' ? itemUrl : '';\r\n            accessType = typeof accessType !== 'undefined' ? accessType : 'undefined';\r\n            resourcePool = typeof resourcePool !== 'undefined' ? resourcePool : null;\r\n            isEdit = typeof isEdit !== 'undefined' ? isEdit : false;\r\n\r\n            var self = this;\r\n            self.itemUrl = itemUrl;\r\n            self.accessType = accessType;\r\n            self.resourcePool = resourcePool;\r\n            self.isEdit = isEdit;\r\n            self.url = url;\r\n\r\n            function url() {\r\n                return self.resourcePool !== null ?\r\n                    self.isEdit ?\r\n                    '/_system/resourcePool/' + self.resourcePool.Id + '/edit' :\r\n                    '/_system/resourcePool/' + self.resourcePool.Id :\r\n                    self.itemUrl;\r\n            }\r\n        }\r\n    }\r\n})();","/***\r\n * Service: logger \r\n *\r\n * Provides semantic logging services with help of\r\n * Angular's $log service that writes to the console and\r\n * John Papa's 'toastr.js': https://github.com/CodeSeven/toastr\r\n *\r\n ***/\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .factory('logger', ['$log', logger]);\r\n\r\n    function logger($log) {\r\n        configureToastr();\r\n\r\n        var factory = {\r\n            forSource: forSource,\r\n            log: log,\r\n            logError: logError,\r\n            logInfo: logInfo,\r\n            logSuccess: logSuccess,\r\n            logWarning: logWarning\r\n        };\r\n\r\n        return factory;\r\n\r\n        function configureToastr() {\r\n            toastr.options = {\r\n                \"positionClass\": \"toast-bottom-right\"\r\n            };\r\n        }\r\n\r\n        function forSource(src) {\r\n            return {\r\n                log: function (m, d, s, t, o) { return log(m, d, src, s, t, o); },\r\n                logError: function (m, d, s, t, o) { return logError(m, d, src, s, t, o); },\r\n                logInfo: function (m, d, s, t, o) { return logInfo(m, d, src, s, t, o); },\r\n                logSuccess: function (m, d, s, t, o) { return logSuccess(m, d, src, s, t, o); },\r\n                logWarning: function (m, d, s, t, o) { return logWarning(m, d, src, s, t, o); },\r\n            };\r\n        }\r\n\r\n        function log(message, data, source, showToast, title, optionsOverride) {\r\n            return logIt(message, data, source, showToast, title, optionsOverride, 'debug');\r\n        }\r\n\r\n        function logError(message, data, source, showToast, title, optionsOverride) {\r\n            return logIt(message, data, source, showToast, title, optionsOverride, 'error');\r\n        }\r\n\r\n        function logInfo(message, data, source, showToast, title, optionsOverride) {\r\n            return logIt(message, data, source, showToast, title, optionsOverride, 'info');\r\n        }\r\n\r\n        function logSuccess(message, data, source, showToast, title, optionsOverride) {\r\n            return logIt(message, data, source, showToast, title, optionsOverride, 'success');\r\n        }\r\n\r\n        function logWarning(message, data, source, showToast, title, optionsOverride) {\r\n            return logIt(message, data, source, showToast, title, optionsOverride, 'warning');\r\n        }\r\n\r\n        function logIt(message, data, source, showToast, title, optionsOverride, toastType) {\r\n            showToast = typeof showToast === 'undefined' ? false : showToast;\r\n            var currentDateTime = new Date().getHours() + ':' +\r\n                new Date().getMinutes() + ':' +\r\n                new Date().getSeconds();\r\n            source = source ? '[' + source + '] ' : '';\r\n            var write;\r\n            switch (toastType) {\r\n                case 'debug': write = $log.debug; break;\r\n                case 'error': write = $log.error; break;\r\n                case 'info': write = $log.info; break;\r\n                case 'success': write = $log.log; break;\r\n                case 'warning': write = $log.warn; break;\r\n            }\r\n            write(currentDateTime, source, message, data);\r\n            var toast = null;\r\n            if (showToast) {\r\n                switch (toastType) {\r\n                    case 'debug': toast = toastr.info(message, title, optionsOverride); break;\r\n                    case 'error': toast = toastr.error(message, title, optionsOverride); break;\r\n                    case 'info': toast = toastr.info(message, title, optionsOverride); break;\r\n                    case 'success': toast = toastr.success(message, title, optionsOverride); break;\r\n                    case 'warning': toast = toastr.warning(message, title, optionsOverride); break;\r\n                }\r\n            }\r\n            return toast;\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'resourcePoolFactory';\r\n    angular.module('main')\r\n        .config(['$provide', extendFactory]);\r\n\r\n    function extendFactory($provide) {\r\n        $provide.decorator(factoryId, ['$delegate', 'ResourcePool', 'Element', 'userFactory', 'dataContext', '$rootScope', 'logger', resourcePoolFactory]);\r\n    }\r\n\r\n    function resourcePoolFactory($delegate, ResourcePool, Element, userFactory, dataContext, $rootScope, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        var fetched = [];\r\n\r\n        // Factory methods\r\n        $delegate.acceptChanges = acceptChanges;\r\n        $delegate.cancelResourcePool = cancelResourcePool;\r\n        $delegate.copyResourcePool = copyResourcePool;\r\n        $delegate.createElement = createElement;\r\n        $delegate.createElementField = createElementField;\r\n        $delegate.createElementItem = createElementItem;\r\n        $delegate.createResourcePoolBasic = createResourcePoolBasic;\r\n        $delegate.createResourcePoolDirectIncomeAndMultiplier = createResourcePoolDirectIncomeAndMultiplier;\r\n        $delegate.createResourcePoolTwoElements = createResourcePoolTwoElements;\r\n        $delegate.getResourcePoolExpanded = getResourcePoolExpanded;\r\n        $delegate.removeElement = removeElement;\r\n        $delegate.removeElementField = removeElementField;\r\n        $delegate.removeElementItem = removeElementItem;\r\n        $delegate.removeResourcePool = removeResourcePool;\r\n\r\n        // User logged out\r\n        $rootScope.$on('userFactory_currentUserChanged', function () {\r\n            fetched = [];\r\n        });\r\n\r\n        return $delegate;\r\n\r\n        /*** Implementations ***/\r\n\r\n        function acceptChanges(resourcePool) {\r\n\r\n            // Set isAdded flag to true, so before saving it to database,\r\n            // we can replace resource pool and its child entities state back to 'isAdded'\r\n            if (resourcePool.entityAspect.entityState.isAdded()) {\r\n                resourcePool.isAdded(true);\r\n            }\r\n\r\n            // Resource pool itself\r\n            resourcePool.entityAspect.acceptChanges();\r\n\r\n            // If isAdded, then make it modified, so it be retrieved when getChanges() called\r\n            if (resourcePool.isAdded()) {\r\n                resourcePool.entityAspect.setModified();\r\n            }\r\n\r\n            // User resource pools\r\n            resourcePool.UserResourcePoolSet.forEach(function (userResourcePool) {\r\n                userResourcePool.entityAspect.acceptChanges();\r\n            });\r\n\r\n            // Elements\r\n            resourcePool.ElementSet.forEach(function (element) {\r\n                element.entityAspect.acceptChanges();\r\n\r\n                // Fields\r\n                element.ElementFieldSet.forEach(function (elementField) {\r\n                    elementField.entityAspect.acceptChanges();\r\n\r\n                    // User element fields\r\n                    elementField.UserElementFieldSet.forEach(function (userElementField) {\r\n                        userElementField.entityAspect.acceptChanges();\r\n                    });\r\n                });\r\n\r\n                // Items\r\n                element.ElementItemSet.forEach(function (elementItem) {\r\n                    elementItem.entityAspect.acceptChanges();\r\n\r\n                    // Cells\r\n                    elementItem.ElementCellSet.forEach(function (elementCell) {\r\n                        elementCell.entityAspect.acceptChanges();\r\n\r\n                        // User cells\r\n                        elementCell.UserElementCellSet.forEach(function (userElementCell) {\r\n                            userElementCell.entityAspect.acceptChanges();\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        function cancelResourcePool(resourcePool) {\r\n\r\n            // Resource pool itself\r\n            resourcePool.entityAspect.rejectChanges();\r\n\r\n            // User resource pools\r\n            resourcePool.UserResourcePoolSet.forEach(function (userResourcePool) {\r\n                userResourcePool.entityAspect.rejectChanges();\r\n            });\r\n\r\n            // Elements\r\n            resourcePool.ElementSet.forEach(function (element) {\r\n                element.entityAspect.rejectChanges();\r\n\r\n                // Fields\r\n                element.ElementFieldSet.forEach(function (elementField) {\r\n                    elementField.entityAspect.rejectChanges();\r\n\r\n                    // User element fields\r\n                    elementField.UserElementFieldSet.forEach(function (userElementField) {\r\n                        userElementField.entityAspect.rejectChanges();\r\n                    });\r\n                });\r\n\r\n                // Items\r\n                element.ElementItemSet.forEach(function (elementItem) {\r\n                    elementItem.entityAspect.rejectChanges();\r\n\r\n                    // Cells\r\n                    elementItem.ElementCellSet.forEach(function (elementCell) {\r\n                        elementCell.entityAspect.rejectChanges();\r\n\r\n                        // User cells\r\n                        elementCell.UserElementCellSet.forEach(function (userElementCell) {\r\n                            userElementCell.entityAspect.rejectChanges();\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        function copyResourcePool(resourcePoolSource) {\r\n            // TODO\r\n        }\r\n\r\n        function createElement(element) {\r\n            return dataContext.createEntity('Element', element);\r\n        }\r\n\r\n        function createElementCell(elementCellInitial) {\r\n\r\n            var elementCell = dataContext.createEntity('ElementCell', elementCellInitial);\r\n\r\n            // User element cell\r\n            if (elementCell.ElementField.DataType !== 6) {\r\n\r\n                var userElementCell = {\r\n                    User: elementCell.ElementField.Element.ResourcePool.User,\r\n                    ElementCell: elementCell\r\n                };\r\n\r\n                switch (elementCell.ElementField.DataType) {\r\n                    case 1: { userElementCell.StringValue = ''; break; }\r\n                    case 2: { userElementCell.BooleanValue = false; break; }\r\n                    case 3: { userElementCell.IntegerValue = 0; break; }\r\n                    case 4: { userElementCell.DecimalValue = 50; break; }\r\n                        // TODO 5 (DateTime?)\r\n                    case 11: { userElementCell.DecimalValue = 100; break; }\r\n                    case 12: { userElementCell.DecimalValue = 0; break; }\r\n                }\r\n\r\n                dataContext.createEntity('UserElementCell', userElementCell);\r\n            }\r\n\r\n            return elementCell;\r\n        }\r\n\r\n        function createElementField(elementField) {\r\n\r\n            elementField = dataContext.createEntity('ElementField', elementField);\r\n\r\n            // Related cells\r\n            elementField.Element.ElementItemSet.forEach(function (elementItem) {\r\n                createElementCell({\r\n                    ElementField: elementField,\r\n                    ElementItem: elementItem\r\n                });\r\n            });\r\n\r\n            return elementField;\r\n        }\r\n\r\n        function createElementItem(elementItem) {\r\n\r\n            elementItem = dataContext.createEntity('ElementItem', elementItem);\r\n\r\n            // Related cells\r\n            elementItem.Element.ElementFieldSet.forEach(function (elementField) {\r\n                createElementCell({\r\n                    ElementField: elementField,\r\n                    ElementItem: elementItem\r\n                });\r\n            });\r\n\r\n            return elementItem;\r\n        }\r\n\r\n        function createResourcePoolBasic(initializeResourcePool) {\r\n            initializeResourcePool = typeof initializeResourcePool !== 'undefined' ? initializeResourcePool : false;\r\n\r\n            return userFactory.getCurrentUser()\r\n                .then(function (currentUser) {\r\n\r\n                    var resourcePoolRate = 10;\r\n\r\n                    var resourcePool = dataContext.createEntity('ResourcePool', {\r\n                        User: currentUser,\r\n                        Name: 'New CMRP',\r\n                        InitialValue: 100,\r\n                        UseFixedResourcePoolRate: true\r\n                    });\r\n\r\n                    dataContext.createEntity('UserResourcePool', {\r\n                        User: currentUser,\r\n                        ResourcePool: resourcePool,\r\n                        ResourcePoolRate: resourcePoolRate\r\n                    });\r\n\r\n                    var element = createElement({\r\n                        ResourcePool: resourcePool,\r\n                        Name: 'New element'\r\n                    });\r\n                    element.IsMainElement = true;\r\n\r\n                    // Importance field (index)\r\n                    var importanceField = createElementField({\r\n                        Element: element,\r\n                        Name: 'Importance',\r\n                        DataType: 4,\r\n                        UseFixedValue: false,\r\n                        IndexEnabled: true,\r\n                        IndexCalculationType: 2,\r\n                        IndexSortType: 1,\r\n                        SortOrder: 1\r\n                    });\r\n\r\n                    // Item 1\r\n                    var item1 = createElementItem({\r\n                        Element: element,\r\n                        Name: 'New item 1'\r\n                    });\r\n\r\n                    // Item 2\r\n                    var item2 = createElementItem({\r\n                        Element: element,\r\n                        Name: 'New item 2'\r\n                    });\r\n\r\n                    // Initialize\r\n                    if (initializeResourcePool) {\r\n                        resourcePool._init(true);\r\n                    }\r\n\r\n                    return resourcePool;\r\n                });\r\n        }\r\n\r\n        function createResourcePoolDirectIncomeAndMultiplier(initializeResourcePool) {\r\n            initializeResourcePool = typeof initializeResourcePool !== 'undefined' ? initializeResourcePool : false;\r\n\r\n            return createResourcePoolBasic()\r\n                .then(function (resourcePool) {\r\n\r\n                    // Convert Importance field to Sales Price field\r\n                    var salesPriceField = resourcePool.mainElement().ElementFieldSet[0];\r\n                    salesPriceField.Name = 'Sales Price';\r\n                    salesPriceField.DataType = 11;\r\n                    salesPriceField.UseFixedValue = true;\r\n                    salesPriceField.IndexEnabled = false;\r\n                    salesPriceField.IndexCalculationType = 0;\r\n                    salesPriceField.IndexSortType = 0;\r\n\r\n                    // Update Sales Price field cells\r\n                    var cell1 = salesPriceField.ElementCellSet[0];\r\n                    var cell2 = salesPriceField.ElementCellSet[1];\r\n\r\n                    // Number of Sales field\r\n                    var numberOfSalesField = createElementField({\r\n                        Element: resourcePool.mainElement(),\r\n                        Name: 'Number of Sales',\r\n                        DataType: 12,\r\n                        UseFixedValue: false,\r\n                        SortOrder: 2\r\n                    });\r\n\r\n                    if (initializeResourcePool) {\r\n                        resourcePool._init(true);\r\n                    }\r\n\r\n                    return resourcePool;\r\n                });\r\n        }\r\n\r\n        function createResourcePoolTwoElements(initializeResourcePool) {\r\n            initializeResourcePool = typeof initializeResourcePool !== 'undefined' ? initializeResourcePool : false;\r\n\r\n            return createResourcePoolBasic()\r\n                .then(function (resourcePool) {\r\n\r\n                    // Element 2 & items\r\n                    var element2 = resourcePool.ElementSet[0];\r\n                    element2.Name = 'Child';\r\n\r\n                    var element2Item1 = element2.ElementItemSet[0];\r\n                    var element2Item2 = element2.ElementItemSet[1];\r\n\r\n                    // Element 1\r\n                    var element1 = createElement({\r\n                        ResourcePool: resourcePool,\r\n                        Name: 'Parent'\r\n                    });\r\n                    element1.IsMainElement = true;\r\n\r\n                    // Child field (second element)\r\n                    var childField = createElementField({\r\n                        Element: element1,\r\n                        Name: 'Child',\r\n                        DataType: 6,\r\n                        SelectedElement: element2,\r\n                        UseFixedValue: true,\r\n                        SortOrder: 1\r\n                    });\r\n\r\n                    // Item 1\r\n                    var item1 = createElementItem({\r\n                        Element: element1,\r\n                        Name: 'Parent 1'\r\n                    });\r\n\r\n                    // Item 1 Cell\r\n                    item1.ElementCellSet[0].SelectedElementItem = element2Item1;\r\n\r\n                    // Item 2\r\n                    var item2 = createElementItem({\r\n                        Element: element1,\r\n                        Name: 'Parent 2'\r\n                    });\r\n\r\n                    // Item 2 Cell\r\n                    item2.ElementCellSet[0].SelectedElementItem = element2Item2;\r\n\r\n                    if (initializeResourcePool) {\r\n                        resourcePool._init(true);\r\n                    }\r\n\r\n                    return resourcePool;\r\n                });\r\n        }\r\n\r\n        function getResourcePoolExpanded(resourcePoolId) {\r\n            // TODO Other validations?\r\n            resourcePoolId = Number(resourcePoolId);\r\n\r\n            return userFactory.getCurrentUser()\r\n                .then(function (currentUser) {\r\n\r\n                    // Prepare the query\r\n                    var query = null;\r\n                    var isNewResourcePool = resourcePoolId <= 0; // Determines whether this is just created by this user, or an existing resource pool\r\n                    var fetchedEarlier = false;\r\n                    var fromServer = false;\r\n\r\n                    // If it's not newly created, check the fetched list\r\n                    if (!isNewResourcePool) {\r\n                        fetchedEarlier = fetched.some(function (fetchedId) {\r\n                            return resourcePoolId === fetchedId;\r\n                        });\r\n                    }\r\n\r\n                    fromServer = !isNewResourcePool && !fetchedEarlier;\r\n\r\n                    // Is authorized? No, then get only the public data, yes, then get include user's own records\r\n                    if (currentUser.isAuthenticated() || isNewResourcePool) {\r\n                        query = breeze.EntityQuery\r\n                            .from('ResourcePool')\r\n                            .expand('UserResourcePoolSet, ElementSet.ElementFieldSet.UserElementFieldSet, ElementSet.ElementItemSet.ElementCellSet.UserElementCellSet')\r\n                            .where('Id', 'eq', resourcePoolId);\r\n                    } else {\r\n                        query = breeze.EntityQuery\r\n                            .from('ResourcePool')\r\n                            .expand('ElementSet.ElementFieldSet, ElementSet.ElementItemSet.ElementCellSet')\r\n                            .where('Id', 'eq', resourcePoolId);\r\n                    }\r\n\r\n                    // From server or local?\r\n                    if (fromServer) {\r\n                        query = query.using(breeze.FetchStrategy.FromServer);\r\n                    }\r\n                    else {\r\n                        query = query.using(breeze.FetchStrategy.FromLocalCache);\r\n                    }\r\n\r\n                    return dataContext.executeQuery(query)\r\n                        .then(success)\r\n                        .catch(failed);\r\n\r\n                    function success(response) {\r\n\r\n                        // If there is no cmrp with this Id, return null\r\n                        if (response.results.length === 0) {\r\n                            return null;\r\n                        }\r\n\r\n                        // ResourcePool\r\n                        var resourcePool = response.results[0];\r\n\r\n                        // Init\r\n                        if (fromServer) {\r\n                            resourcePool._init();\r\n                        }\r\n\r\n                        // Add the record into fetched list\r\n                        fetched.push(resourcePool.Id);\r\n\r\n                        return resourcePool;\r\n                    }\r\n\r\n                    function failed(error) {\r\n                        var message = error.message || 'ResourcePool query failed';\r\n                        logger.logError(message, error, true);\r\n                    }\r\n                });\r\n        }\r\n\r\n        function removeElement(element) {\r\n\r\n            // Remove from selectedElement\r\n            if (element.ResourcePool.selectedElement() === element) {\r\n                element.ResourcePool.selectedElement(null);\r\n            }\r\n\r\n            // Related items\r\n            var elementItemSet = element.ElementItemSet.slice();\r\n            elementItemSet.forEach(function (elementItem) {\r\n                removeElementItem(elementItem);\r\n            });\r\n\r\n            // Related fields\r\n            var elementFieldSet = element.ElementFieldSet.slice();\r\n            elementFieldSet.forEach(function (elementField) {\r\n                removeElementField(elementField);\r\n            });\r\n\r\n            element.entityAspect.setDeleted();\r\n        }\r\n\r\n        function removeElementCell(elementCell) {\r\n\r\n            // Related user cells\r\n            var userElementCellSet = elementCell.UserElementCellSet.slice();\r\n            userElementCellSet.forEach(function (userElementCell) {\r\n                userElementCell.entityAspect.setDeleted();\r\n            });\r\n\r\n            elementCell.entityAspect.setDeleted();\r\n        }\r\n\r\n        function removeElementField(elementField) {\r\n\r\n            // Related cells\r\n            var elementCellSet = elementField.ElementCellSet.slice();\r\n            elementCellSet.forEach(function (elementCell) {\r\n                removeElementCell(elementCell);\r\n            });\r\n\r\n            // Related user element fields\r\n            var userElementFieldSet = elementField.UserElementFieldSet.slice();\r\n            userElementFieldSet.forEach(function (userElementField) {\r\n                userElementField.entityAspect.setDeleted();\r\n            });\r\n\r\n            elementField.entityAspect.setDeleted();\r\n        }\r\n\r\n        function removeElementItem(elementItem) {\r\n\r\n            // Related cells\r\n            var elementCellSet = elementItem.ElementCellSet.slice();\r\n            elementCellSet.forEach(function (elementCell) {\r\n                removeElementCell(elementCell);\r\n            });\r\n\r\n            elementItem.entityAspect.setDeleted();\r\n        }\r\n\r\n        function removeResourcePool(resourcePool) {\r\n\r\n            // Related elements\r\n            var elementSet = resourcePool.ElementSet.slice();\r\n            elementSet.forEach(function (element) {\r\n                removeElement(element);\r\n            });\r\n\r\n            // Related user resource pools\r\n            var userResourcePoolSet = resourcePool.UserResourcePoolSet.slice();\r\n            userResourcePoolSet.forEach(function (userResourcePool) {\r\n                userResourcePool.entityAspect.setDeleted();\r\n            });\r\n\r\n            resourcePool.entityAspect.setDeleted();\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'userFactory';\r\n    angular.module('main')\r\n        .config(['$provide', extendFactory]);\r\n\r\n    function extendFactory($provide) {\r\n        $provide.decorator(factoryId, ['$delegate', 'dataContext', '$http', '$q', '$rootScope', '$window', '$location', 'serviceAppUrl', 'logger', userFactory]);\r\n    }\r\n\r\n    function userFactory($delegate, dataContext, $http, $q, $rootScope, $window, $location, serviceAppUrl, logger) {\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // Service urls\r\n        var addPasswordUrl = serviceAppUrl + '/api/Account/AddPassword';\r\n        var changeEmailUrl = serviceAppUrl + '/api/Account/ChangeEmail';\r\n        var changePasswordUrl = serviceAppUrl + '/api/Account/ChangePassword';\r\n        var confirmEmailUrl = serviceAppUrl + '/api/Account/ConfirmEmail';\r\n        var currentUser = null;\r\n        var getCurrentUserPromise = null;\r\n        var registerUrl = serviceAppUrl + '/api/Account/Register';\r\n        var resendConfirmationEmailUrl = serviceAppUrl + '/api/Account/ResendConfirmationEmail';\r\n        var resetPasswordUrl = serviceAppUrl + '/api/Account/ResetPassword';\r\n        var resetPasswordRequestUrl = serviceAppUrl + '/api/Account/ResetPasswordRequest';\r\n        var tokenUrl = serviceAppUrl + '/api/Token';\r\n\r\n        // Service methods\r\n        $delegate.addPassword = addPassword;\r\n        $delegate.changeEmail = changeEmail;\r\n        $delegate.changePassword = changePassword;\r\n        $delegate.confirmEmail = confirmEmail;\r\n        $delegate.getCurrentUser = getCurrentUser;\r\n        $delegate.getToken = getToken;\r\n        $delegate.logout = logout;\r\n        $delegate.register = register;\r\n        $delegate.resendConfirmationEmail = resendConfirmationEmail;\r\n        $delegate.resetPassword = resetPassword;\r\n        $delegate.resetPasswordRequest = resetPasswordRequest;\r\n\r\n        $delegate.updateElementMultiplier = updateElementMultiplier;\r\n        $delegate.updateElementCellMultiplier = updateElementCellMultiplier;\r\n        $delegate.updateElementCellNumericValue = updateElementCellNumericValue;\r\n        $delegate.updateElementFieldIndexRating = updateElementFieldIndexRating;\r\n        $delegate.updateResourcePoolRate = updateResourcePoolRate;\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n            getCurrentUser()\r\n                .then(function () {\r\n                    broadcastUserChanged();\r\n                });\r\n        }\r\n\r\n        return $delegate;\r\n\r\n        /*** Implementations ***/\r\n\r\n        function addPassword(addPasswordBindingModel) {\r\n            return $http.post(addPasswordUrl, addPasswordBindingModel)\r\n                .success(function (updatedUser) {\r\n\r\n                    // Remove 'HasNoPassword' claim\r\n                    var claimIndex = null;\r\n                    for (var i = 0; i < currentUser.Claims.length; i++) {\r\n                        if (currentUser.Claims[i].ClaimType === 'HasNoPassword') {\r\n                            claimIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (claimIndex === null) {\r\n                        // TODO throw error?\r\n                    }\r\n\r\n                    var claims = currentUser.Claims.splice(claimIndex, 1);\r\n                    claims[0].entityAspect.setDetached();\r\n\r\n                    // Sync RowVersion fields\r\n                    syncRowVersion(currentUser, updatedUser);\r\n                })\r\n                .error(handleErrorResult);\r\n        }\r\n\r\n        function changeEmail(changeEmailBindingModel) {\r\n            return $http.post(changeEmailUrl, changeEmailBindingModel)\r\n                .success(function (updatedUser) {\r\n\r\n                    currentUser.Email = updatedUser.Email;\r\n                    currentUser.EmailConfirmed = false;\r\n\r\n                    // Sync RowVersion fields\r\n                    syncRowVersion(currentUser, updatedUser);\r\n                })\r\n                .error(handleErrorResult);\r\n        }\r\n\r\n        function changePassword(changePasswordBindingModel) {\r\n            return $http.post(changePasswordUrl, changePasswordBindingModel)\r\n                .success(function (updatedUser) {\r\n                    // Sync RowVersion fields\r\n                    syncRowVersion(currentUser, updatedUser);\r\n                })\r\n                .error(handleErrorResult);\r\n        }\r\n\r\n        function confirmEmail(confirmEmailBindingModel) {\r\n            return $http.post(confirmEmailUrl, confirmEmailBindingModel)\r\n                .success(function (updatedUser) {\r\n\r\n                    currentUser.EmailConfirmed = true;\r\n\r\n                    // Sync RowVersion fields\r\n                    syncRowVersion(currentUser, updatedUser);\r\n                })\r\n                .error(handleErrorResult);\r\n        }\r\n\r\n        function getToken(email, password, rememberMe, tempToken, isRegister) {\r\n            isRegister = typeof isRegister === 'undefined' ? false : isRegister;\r\n\r\n            var deferred = $q.defer();\r\n\r\n            var tokenData = 'grant_type=password' +\r\n                '&username=' + email +\r\n                '&password=' + password +\r\n                '&rememberMe=' + rememberMe +\r\n                '&tempToken=' + (typeof tempToken !== 'undefined' ? tempToken : '');\r\n\r\n            $http.post(tokenUrl, tokenData, { 'Content-Type': 'application/x-www-form-urlencoded' })\r\n                .success(function (token) {\r\n\r\n                    // Set token to the session\r\n                    $window.localStorage.setItem('token', angular.toJson(token));\r\n\r\n                    // Set currentUser as the old one.\r\n                    // In case if this is coming from login page, anonymous changes will be merged/copied into logged in user\r\n                    var oldUser = currentUser;\r\n\r\n                    getCurrentUser(!isRegister)\r\n                        .then(function () {\r\n\r\n                            if (isRegister) {\r\n\r\n                                // Raise logged in event\r\n                                broadcastUserChanged();\r\n\r\n                                // Update anonymous entities\r\n                                currentUser.ResourcePoolSet.forEach(function (resourcePool) {\r\n                                    resourcePool.updateAnonymousEntities();\r\n                                });\r\n\r\n                                // Save the changes that's been done before the registration\r\n                                dataContext.saveChanges()\r\n                                    .then(function () {\r\n                                        deferred.resolve();\r\n                                    });\r\n                            } else {\r\n\r\n                                // Raise logged in event\r\n                                broadcastUserChanged();\r\n\r\n                                // Move anonymously created entities to this logged in user\r\n                                dataContext.updateAnonymousChanges(oldUser, currentUser)\r\n                                    .then(function () {\r\n\r\n                                        // Update anonymous entities\r\n                                        currentUser.ResourcePoolSet.forEach(function (resourcePool) {\r\n                                            resourcePool.updateAnonymousEntities();\r\n                                        });\r\n\r\n                                        // Save changes\r\n                                        dataContext.saveChanges()\r\n                                            .then(function () {\r\n                                                deferred.resolve();\r\n                                            });\r\n                                    });\r\n                            }\r\n                        });\r\n                })\r\n                .error(function (data, status, headers, config) {\r\n                    handleErrorResult(data, status, headers, config);\r\n                    deferred.reject(data);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        // Returns either anonymous (not authenticated) or logged in user\r\n        function getCurrentUser(resetPromise) {\r\n            resetPromise = typeof resetPromise !== 'undefined' ? resetPromise : false;\r\n\r\n            if (getCurrentUserPromise === null || resetPromise) {\r\n\r\n                var deferred = $q.defer();\r\n                getCurrentUserPromise = deferred.promise;\r\n\r\n                if (localStorage.getItem('token') === null) {\r\n\r\n                    dataContext.metadataReady()\r\n                        .then(function () {\r\n                            var user = dataContext.createEntity('User', { isEditing: false });\r\n                            currentUser = user;\r\n                            deferred.resolve(user);\r\n                        })\r\n                        .catch(function () {\r\n                            // TODO Handle?\r\n                        });\r\n\r\n                } else {\r\n                    var query = breeze.EntityQuery\r\n                        .from('Users')\r\n                        .expand('Claims')\r\n                        .using(breeze.FetchStrategy.FromServer);\r\n\r\n                    dataContext.executeQuery(query)\r\n                        .then(success)\r\n                        .catch(failed);\r\n                }\r\n            }\r\n\r\n            return getCurrentUserPromise;\r\n\r\n            function success(response) {\r\n\r\n                // If the response has an entity, use that, otherwise create an anonymous user\r\n                var user = response.results.length > 0 ?\r\n                    response.results[0] :\r\n                    dataContext.createEntity('User', { isEditing: false });\r\n\r\n                currentUser = user;\r\n                deferred.resolve(user);\r\n            }\r\n\r\n            function failed(error) {\r\n                var message = error.message || 'User query failed';\r\n                // TODO Handle this case better!\r\n                deferred.reject(message);\r\n                throw new Error(message);\r\n            }\r\n        }\r\n\r\n        function getUserElementCell(user, elementCell) {\r\n\r\n            var userCell = elementCell.currentUserCell();\r\n\r\n            if (userCell === null) {\r\n\r\n                // Since there is a delay between client-side changes and actual save operation (editor.js - saveChanges(1500)), these entities might be deleted but not yet saved. \r\n                // To prevent having the exception of creating an entity with the same keys twice, search 'deleted' ones and restore it back to life! / SH - 02 Dec. '15\r\n                var deletedUserCells = dataContext.getEntities(['UserElementCell'], [breeze.EntityState.Deleted]);\r\n                var userCells = deletedUserCells.filter(function (deletedUserCell) {\r\n                    return deletedUserCell.UserId === user.Id && deletedUserCell.ElementCellId === elementCell.Id;\r\n                });\r\n\r\n                if (userCells.length > 0) {\r\n                    userCell = userCells[0];\r\n                    userCell.entityAspect.rejectChanges();\r\n                    userCell.DecimalValue = elementCell.ElementField.DataType === 12 ? 0 : 50; // TODO ?\r\n                }\r\n            }\r\n\r\n            return userCell;\r\n        }\r\n\r\n        function getUserElementField(user, elementField) {\r\n\r\n            var userField = elementField.currentUserElementField();\r\n\r\n            if (userField === null) {\r\n\r\n                // Since there is a delay between client-side changes and actual save operation (editor.js - saveChanges(1500)), these entities might be deleted but not yet saved. \r\n                // To prevent having the exception of creating an entity with the same keys twice, search 'deleted' ones and restore it back to life! / SH - 02 Dec. '15\r\n                var deletedUserFields = dataContext.getEntities(['UserElementField'], [breeze.EntityState.Deleted]);\r\n                var userFields = deletedUserFields.filter(function (deletedUserField) {\r\n                    return deletedUserField.UserId === user.Id && deletedUserField.ElementFieldId === elementField.Id;\r\n                });\r\n\r\n                if (userFields.length > 0) {\r\n                    userField = userFields[0];\r\n                    userField.entityAspect.rejectChanges();\r\n                    userField.Rating = 50;\r\n                }\r\n            }\r\n\r\n            return userField;\r\n        }\r\n\r\n        function getUserResourcePool(user, resourcePool) {\r\n\r\n            var userResourcePool = resourcePool.currentUserResourcePool();\r\n\r\n            if (userResourcePool === null) {\r\n\r\n                // Since there is a delay between client-side changes and actual save operation (editor.js - saveChanges(1500)), these entities might be deleted but not yet saved. \r\n                // To prevent having the exception of creating an entity with the same keys twice, search 'deleted' ones and restore it back to life! / SH - 02 Dec. '15\r\n                var deletedUserResourcePools = dataContext.getEntities(['UserResourcePool'], [breeze.EntityState.Deleted]);\r\n                var userResourcePools = deletedUserResourcePools.filter(function (deletedUserResourcePool) {\r\n                    return deletedUserResourcePool.UserId === user.Id && deletedUserResourcePool.ResourcePoolId === resourcePool.Id;\r\n                });\r\n\r\n                if (userResourcePools.length > 0) {\r\n                    userResourcePool = userResourcePools[0];\r\n                    userResourcePool.entityAspect.rejectChanges();\r\n                    userResourcePool.ResourcePoolRate = 10;\r\n                }\r\n            }\r\n\r\n            return userResourcePool;\r\n        }\r\n\r\n        function handleErrorResult(data, status, headers, config) {\r\n\r\n            // TODO Can this be done on a higher level?\r\n            var message = '';\r\n\r\n            if (typeof data.ModelState !== 'undefined') {\r\n                for (var key in data.ModelState) {\r\n                    var array = data.ModelState[key];\r\n                    array.forEach(addErrorMessage);\r\n                }\r\n            }\r\n\r\n            function addErrorMessage(error) {\r\n                message += error + '<br />';\r\n            }\r\n\r\n            if (message === '' && typeof data.Message !== 'undefined') {\r\n                message = data.Message;\r\n            }\r\n\r\n            if (message === '' && typeof data.error_description !== 'undefined') {\r\n                message = data.error_description;\r\n            }\r\n\r\n            logger.logError(message, null, true);\r\n        }\r\n\r\n        function logout() {\r\n\r\n            // Remove token from the session\r\n            $window.localStorage.removeItem('token');\r\n\r\n            // Clear breeze's metadata store\r\n            dataContext.clear();\r\n\r\n            // Raise logged out event\r\n            return getCurrentUser(true)\r\n                .then(function () {\r\n                    broadcastUserChanged();\r\n                });\r\n        }\r\n\r\n        function broadcastUserChanged() {\r\n            $rootScope.$broadcast('userFactory_currentUserChanged', currentUser);\r\n        }\r\n\r\n        function register(registerBindingModel) {\r\n            return $http.post(registerUrl, registerBindingModel)\r\n                .success(function (newUser) {\r\n\r\n                    // breeze context user entity fix-up!\r\n                    // TODO Try to make this part better, use OData method?\r\n                    currentUser.Id = newUser.Id;\r\n                    currentUser.Email = newUser.Email;\r\n                    currentUser.UserName = newUser.UserName;\r\n                    currentUser.RowVersion = newUser.RowVersion;\r\n                    currentUser.entityAspect.acceptChanges();\r\n\r\n                    return getToken(registerBindingModel.email, registerBindingModel.password, false, true);\r\n                })\r\n                .error(handleErrorResult);\r\n        }\r\n\r\n        function resendConfirmationEmail() {\r\n            return $http.post(resendConfirmationEmailUrl).error(handleErrorResult);\r\n        }\r\n\r\n        function resetPassword(resetPasswordBindingModel) {\r\n            return $http.post(resetPasswordUrl, resetPasswordBindingModel)\r\n                .success(function (updatedUser) {\r\n                    // Sync RowVersion fields\r\n                    syncRowVersion(currentUser, updatedUser);\r\n                })\r\n                .error(handleErrorResult);\r\n        }\r\n\r\n        function resetPasswordRequest(resetPasswordRequestBindingModel) {\r\n            return $http.post(resetPasswordRequestUrl, resetPasswordRequestBindingModel).error(handleErrorResult);\r\n        }\r\n\r\n        // When an entity gets updated through angular, unlike breeze updates, it doesn't sync RowVersion automatically\r\n        // After each update, call this function to sync the entities RowVersion with the server's. Otherwise it'll get Conflict error\r\n        // SH - 05 Jan. '16\r\n        function syncRowVersion(oldEntity, newEntity) {\r\n            // TODO Validations?\r\n            oldEntity.RowVersion = newEntity.RowVersion;\r\n        }\r\n\r\n        // These 'updateX' functions were defined in their related entities (user.js).\r\n        // Only because they had to use createEntity() on dataContext, it was moved to this service.\r\n        // Try do handle them in a better way, maybe by using broadcast?\r\n\r\n        function updateElementMultiplier(element, updateType) {\r\n\r\n            // Find user element cell\r\n            element.ElementItemSet.forEach(function (item) {\r\n\r\n                var multiplierCell;\r\n                for (var cellIndex = 0; cellIndex < item.ElementCellSet.length; cellIndex++) {\r\n                    var elementCell = item.ElementCellSet[cellIndex];\r\n                    if (elementCell.ElementField.DataType === 12) {\r\n                        multiplierCell = elementCell;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                updateElementCellMultiplierInternal(multiplierCell, updateType);\r\n            });\r\n\r\n            // Update related\r\n\r\n            // Update items\r\n            element.ElementItemSet.forEach(function (item) {\r\n                item.setMultiplier();\r\n            });\r\n\r\n            element.ElementFieldSet.forEach(function (field) {\r\n\r\n                if (field.IndexEnabled) {\r\n                    // Update numeric value cells\r\n                    field.ElementCellSet.forEach(function (cell) {\r\n                        cell.setNumericValueMultiplied(false);\r\n                    });\r\n\r\n                    // Update fields\r\n                    field.setNumericValueMultiplied();\r\n                }\r\n            });\r\n        }\r\n\r\n        function updateElementCellMultiplier(elementCell, updateType) {\r\n\r\n            updateElementCellMultiplierInternal(elementCell, updateType);\r\n\r\n            // Update items\r\n            elementCell.ElementField.Element.ElementItemSet.forEach(function (item) {\r\n                item.setMultiplier();\r\n            });\r\n\r\n            if (elementCell.ElementField.IndexEnabled) {\r\n                // Update numeric value cells\r\n                elementCell.ElementField.ElementCellSet.forEach(function (cell) {\r\n                    cell.setNumericValueMultiplied(false);\r\n                });\r\n\r\n                // Update fields\r\n                elementCell.ElementField.setNumericValueMultiplied();\r\n            }\r\n        }\r\n\r\n        function updateElementCellMultiplierInternal(elementCell, updateType) {\r\n\r\n            var userCell = getUserElementCell(currentUser, elementCell);\r\n\r\n            switch (updateType) {\r\n                case 'increase':\r\n                case 'decrease': {\r\n\r\n                    if (userCell === null) { // If there is no item, create it\r\n\r\n                        userCell = dataContext.createEntity('UserElementCell', {\r\n                            User: currentUser,\r\n                            ElementCell: elementCell,\r\n                            DecimalValue: updateType === 'increase' ? 1 : 0,\r\n                            isEditing: false\r\n                        });\r\n\r\n                    } else { // If there is an item, update DecimalValue, but cannot be lower than zero\r\n\r\n                        userCell.DecimalValue = updateType === 'increase' ?\r\n                            userCell.DecimalValue + 1 :\r\n                            userCell.DecimalValue - 1 < 0 ? 0 : userCell.DecimalValue - 1;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n                case 'reset': {\r\n\r\n                    if (userCell !== null) { // If there is an item, delete it\r\n                        userCell.entityAspect.setDeleted();\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        function updateElementCellNumericValue(elementCell, updateType) {\r\n\r\n            var userCell = getUserElementCell(currentUser, elementCell);\r\n\r\n            switch (updateType) {\r\n                case 'increase':\r\n                case 'decrease': {\r\n\r\n                    if (userCell === null) { // If there is no item, create it\r\n\r\n                        dataContext.createEntity('UserElementCell', {\r\n                            User: currentUser,\r\n                            ElementCell: elementCell,\r\n                            DecimalValue: updateType === 'increase' ? 55 : 45,\r\n                            isEditing: false\r\n                        });\r\n\r\n                    } else { // If there is an item, update DecimalValue, but cannot be smaller than zero and cannot be bigger than 100\r\n\r\n                        userCell.DecimalValue = updateType === 'increase' ?\r\n                            userCell.DecimalValue + 5 > 100 ? 100 : userCell.DecimalValue + 5 :\r\n                            userCell.DecimalValue - 5 < 0 ? 0 : userCell.DecimalValue - 5;\r\n                    }\r\n\r\n                    // Update the cached value\r\n                    elementCell.setCurrentUserNumericValue();\r\n\r\n                    break;\r\n                }\r\n                case 'reset': {\r\n\r\n                    if (userCell !== null) { // If there is an item, delete it\r\n                        userCell.entityAspect.setDeleted();\r\n\r\n                        // Update the cached value\r\n                        elementCell.setCurrentUserNumericValue();\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        function updateElementFieldIndexRating(elementField, updateType) {\r\n\r\n            var userElementField = getUserElementField(currentUser, elementField);\r\n\r\n            switch (updateType) {\r\n                case 'increase':\r\n                case 'decrease': {\r\n\r\n                    // If there is no item, create it\r\n                    if (userElementField === null) {\r\n                        userElementField = {\r\n                            User: currentUser,\r\n                            ElementField: elementField,\r\n                            Rating: updateType === 'increase' ? 55 : 45,\r\n                            isEditing: false\r\n                        };\r\n\r\n                        dataContext.createEntity('UserElementField', userElementField);\r\n\r\n                    } else { // If there is an item, update Rating, but cannot be smaller than zero and cannot be bigger than 100\r\n\r\n                        userElementField.Rating = updateType === 'increase' ?\r\n                            userElementField.Rating + 5 > 100 ? 100 : userElementField.Rating + 5 :\r\n                            userElementField.Rating - 5 < 0 ? 0 : userElementField.Rating - 5;\r\n                    }\r\n\r\n                    // Update the cached value\r\n                    elementField.setCurrentUserIndexRating();\r\n\r\n                    break;\r\n                }\r\n                case 'reset': {\r\n\r\n                    // If there is an item, delete it\r\n                    if (userElementField !== null) {\r\n                        userElementField.entityAspect.setDeleted();\r\n\r\n                        // Update the cached value\r\n                        elementField.setCurrentUserIndexRating();\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        function updateResourcePoolRate(resourcePool, updateType) {\r\n\r\n            var userResourcePool = getUserResourcePool(currentUser, resourcePool);\r\n\r\n            switch (updateType) {\r\n                case 'increase':\r\n                case 'decrease': {\r\n\r\n                    // If there is no item, create it\r\n                    if (userResourcePool === null) {\r\n                        userResourcePool = {\r\n                            User: currentUser,\r\n                            ResourcePool: resourcePool,\r\n                            ResourcePoolRate: updateType === 'increase' ? 15 : 5,\r\n                            isEditing: false\r\n                        };\r\n\r\n                        dataContext.createEntity('UserResourcePool', userResourcePool);\r\n\r\n                    } else { // If there is an item, update Rating, but cannot be smaller than zero and cannot be bigger than 1000\r\n\r\n                        userResourcePool.ResourcePoolRate = updateType === 'increase' ?\r\n                            userResourcePool.ResourcePoolRate + 5 > 1000 ? 1000 : userResourcePool.ResourcePoolRate + 5 :\r\n                            userResourcePool.ResourcePoolRate - 5 < 0 ? 0 : userResourcePool.ResourcePoolRate - 5;\r\n                    }\r\n\r\n                    // Update the cached value\r\n                    resourcePool.setCurrentUserResourcePoolRate();\r\n\r\n                    break;\r\n                }\r\n                case 'reset': {\r\n\r\n                    // If there is an item, delete it\r\n                    if (userResourcePool !== null) {\r\n                        userResourcePool.entityAspect.setDeleted();\r\n\r\n                        // Update the cached value\r\n                        resourcePool.setCurrentUserResourcePoolRate();\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n})();\r\n","/***\r\n * Filter: enum\r\n *\r\n * Converts the enum value to its key by searching through tables in Enums.js\r\n *\r\n ***/\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .filter('enum', ['Enums', 'logger', function (Enums, logger) {\r\n\r\n            return function (input, enumTableKey) {\r\n\r\n                if (typeof input === 'undefined' || typeof enumTableKey === 'undefined' || enumTableKey === '') {\r\n                    return null;\r\n                }\r\n\r\n                return Enums.getEnumKey(enumTableKey, input);\r\n            };\r\n        }]);\r\n\r\n})();\r\n","/***\r\n * Filter: numberSymbol\r\n *\r\n * Convert the number to a short format with symbol format.\r\n *\r\n ***/\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .filter('numberSymbol', ['$filter', 'logger', function ($filter, logger) {\r\n            return function (input, decimals) {\r\n\r\n                if (typeof input === 'undefined')\r\n                    return null;\r\n\r\n                decimals = typeof decimals === 'undefined' ? 0 : decimals;\r\n\r\n                var number = Number(input);\r\n                number = decimals > 0 ? number.toFixed(decimals) : number;\r\n                var symbol = '';\r\n\r\n                if (number / Math.pow(10, 12) >= 1) { // Trillion\r\n                    number = number / Math.pow(10, 12);\r\n                    symbol = 'T';\r\n                } else if (number / Math.pow(10, 9) >= 1) { // Billion\r\n                    number = number / Math.pow(10, 9);\r\n                    symbol = 'B';\r\n                } else if (number / Math.pow(10, 6) >= 1) { // Million\r\n                    number = number / Math.pow(10, 6);\r\n                    symbol = 'M';\r\n                } else if (number / Math.pow(10, 3) >= 1) { // Thousand\r\n                    number = number / Math.pow(10, 3);\r\n                    symbol = 'K';\r\n                } else {\r\n                    number = number;\r\n                }\r\n\r\n                return $filter('number')(number, decimals) + symbol;\r\n            };\r\n        }]);\r\n\r\n})();\r\n","/***\r\n * Filter: percentage\r\n *\r\n * Convert the number to a percentage format.\r\n *\r\n ***/\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('main')\r\n        .filter('percentage', ['$filter', function ($filter) {\r\n            return function (input, decimals) {\r\n                // TODO Whether Percentage symbol should be in front or behind of the value differs based on cultural settings\r\n                return $filter('number')(input * 100, decimals) + '%';\r\n            };\r\n        }]);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'AccountEditController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', 'logger', AccountEditController]);\r\n\r\n    function AccountEditController(userFactory, logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var isSaving = false;\r\n\r\n        // Controller methods (alphabetically)\r\n        var vm = this;\r\n        vm.cancelChanges = cancelChanges;\r\n        vm.isSaveDisabled = isSaveDisabled;\r\n        vm.user = null;\r\n        vm.saveChanges = saveChanges;\r\n\r\n        // Get current user\r\n        userFactory.getCurrentUser()\r\n            .then(function (currentUser) {\r\n                vm.user = currentUser;\r\n                vm.user.isEditing = true;\r\n            });\r\n\r\n        /*** Implementations ***/\r\n\r\n        function cancelChanges() {\r\n            // TODO\r\n        }\r\n\r\n        function isSaveDisabled() {\r\n            //return isSaving || (!userFactory.hasChanges());\r\n            return isSaving;\r\n        }\r\n\r\n        function saveChanges() {\r\n\r\n            isSaving = true;\r\n            vm.user.isEditing = false;\r\n            userFactory.saveChanges()\r\n                .then(function (result) {\r\n                    logger.logSuccess('Your changes have been saved!', null, true);\r\n                })\r\n                .catch(function (error) {\r\n\r\n                    // Conflict (Concurrency exception)\r\n                    if (error.status === '409') {\r\n                        // TODO Try to recover!\r\n                    }\r\n                })\r\n                .finally(function () {\r\n                    isSaving = false;\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'AddPasswordController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', '$location', 'logger', AddPasswordController]);\r\n\r\n    function AddPasswordController(userFactory, $location, logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.addPassword = addPassword;\r\n\r\n        function addPassword() {\r\n            userFactory.addPassword(vm)\r\n                .success(function () {\r\n                    $location.url('/');\r\n                    logger.logSuccess('Your password has been set!', null, true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ChangeEmailController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', '$location', 'logger', ChangeEmailController]);\r\n\r\n    function ChangeEmailController(userFactory, $location, logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.isChangeEmailDisabled = false;\r\n        vm.changeEmail = changeEmail;\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n\r\n            // Generate test data if localhost\r\n            if ($location.host() === 'localhost') {\r\n                var now = new Date();\r\n                var year = now.getFullYear();\r\n                var month = now.getMonth() + 1;\r\n                var day = now.getDate();\r\n                var hour = now.getHours();\r\n                var minute = now.getMinutes();\r\n                var second = now.getSeconds();\r\n                var email = 'local_' + year + month + day + '_' + hour + minute + second + '@forcrowd.org';\r\n\r\n                vm.email = email;\r\n            }\r\n        }\r\n\r\n        function changeEmail() {\r\n\r\n            vm.isChangeEmailDisabled = true;\r\n\r\n            userFactory.changeEmail(vm)\r\n                .success(function () {\r\n                    $location.url('/_system/account/confirmEmail');\r\n                })\r\n                .finally(function () {\r\n                    vm.isChangeEmailDisabled = false;\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ChangePasswordController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', '$location', 'logger', ChangePasswordController]);\r\n\r\n    function ChangePasswordController(userFactory, $location, logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.changePassword = changePassword;\r\n\r\n        function changePassword() {\r\n            userFactory.changePassword(vm)\r\n                .success(function () {\r\n                    $location.url('/');\r\n                    logger.logSuccess('Your password has been changed!', null, true);\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ConfirmEmailController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', '$rootScope', '$location', 'logger', ConfirmEmailController]);\r\n\r\n    function ConfirmEmailController(userFactory, $rootScope, $location, logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.currentUser = { EmailConfirmed: false, isAuthenticated: function () { return false; } };\r\n        vm.isResendDisabled = false;\r\n        vm.resendConfirmationEmail = resendConfirmationEmail;\r\n\r\n        _init();\r\n\r\n        /*** Implementations ***/\r\n\r\n        function _init() {\r\n\r\n            userFactory.getCurrentUser()\r\n                .then(function (currentUser) {\r\n\r\n                    vm.currentUser = currentUser;\r\n\r\n                    if (!vm.currentUser.isAuthenticated()) {\r\n                        return;\r\n                    }\r\n\r\n                    // If there is no token, no need to continue\r\n                    var token = $location.search().token;\r\n                    if (typeof token === 'undefined') {\r\n                        return;\r\n                    }\r\n\r\n                    userFactory.confirmEmail({ Token: token });\r\n                });\r\n        }\r\n\r\n        function resendConfirmationEmail() {\r\n\r\n            vm.isResendDisabled = true;\r\n\r\n            userFactory.resendConfirmationEmail()\r\n                .then(function () {\r\n                    logger.logSuccess('Confirmation email has been resent to your email address!', null, true);\r\n                })\r\n                .finally(function () {\r\n                    vm.isResendDisabled = false;\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'LoginController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', '$location', 'locationHistory', 'serviceAppUrl', 'logger', LoginController]);\r\n\r\n    function LoginController(userFactory, $location, locationHistory, serviceAppUrl, logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.email = '';\r\n        vm.login = login;\r\n        vm.getExternalLoginUrl = getExternalLoginUrl;\r\n        vm.password = '';\r\n        vm.rememberMe = false;\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n\r\n            // Error\r\n            var error = $location.search().error;\r\n            if (typeof error !== 'undefined') {\r\n                logger.logError(error, null, true);\r\n                return;\r\n            }\r\n\r\n            login();\r\n        }\r\n\r\n        function login() {\r\n\r\n            // External (temp token) login\r\n            var tempToken = $location.search().tempToken;\r\n            if (typeof tempToken !== 'undefined') {\r\n                userFactory.getToken('', '', vm.rememberMe, tempToken).then(success).catch(failedExternal);\r\n            } else { // Internal login\r\n                if (vm.email !== '' && vm.password !== '') {\r\n                    userFactory.getToken(vm.email, vm.password, vm.rememberMe).then(success);\r\n                }\r\n            }\r\n\r\n            function success() {\r\n                logger.logSuccess('You have been logged in!', null, true);\r\n                $location.url(getReturnUrl());\r\n            }\r\n\r\n            function failedExternal() {\r\n                logger.logError('Invalid token', null, true);\r\n            }\r\n        }\r\n\r\n        function getExternalLoginUrl(provider) {\r\n            return serviceAppUrl + '/api/Account/ExternalLogin?provider=' + provider + '&clientReturnUrl=' + getReturnUrl();\r\n        }\r\n\r\n        function getReturnUrl() {\r\n            // If login pages called after a result from server, it will have \"clientReturnUrl\" param, which will have a higher priority than locationHistory\r\n            var clientReturnUrl = $location.search().clientReturnUrl;\r\n            return typeof clientReturnUrl !== 'undefined' ? clientReturnUrl : locationHistory.previousItem().url();\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'RegisterController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', '$location', 'locationHistory', 'serviceAppUrl', 'logger', RegisterController]);\r\n\r\n    function RegisterController(userFactory, $location, locationHistory, serviceAppUrl, logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.confirmPassword = '';\r\n        vm.email = '';\r\n        vm.getExternalLoginUrl = getExternalLoginUrl;\r\n        vm.password = '';\r\n        vm.register = register;\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n            // Generate test data if localhost\r\n            if ($location.host() === 'localhost') {\r\n                var now = new Date();\r\n                var year = now.getFullYear();\r\n                var month = now.getMonth() + 1;\r\n                var day = now.getDate();\r\n                var hour = now.getHours();\r\n                var minute = now.getMinutes();\r\n                var second = now.getSeconds();\r\n                var email = 'local_' + year + month + day + '_' + hour + minute + second + '@forcrowd.org';\r\n\r\n                vm.email = email;\r\n                vm.password = 'q1w2e3';\r\n                vm.confirmPassword = 'q1w2e3';\r\n            }\r\n        }\r\n\r\n        function getExternalLoginUrl(provider) {\r\n            var returnUrl = locationHistory.previousItem().url();\r\n            return serviceAppUrl + '/api/Account/ExternalLogin?provider=' + provider + '&clientReturnUrl=' + returnUrl;\r\n        }\r\n\r\n        function register() {\r\n            userFactory.register(vm)\r\n                .success(function () {\r\n                    logger.logSuccess('You have been registered!', null, true);\r\n                    $location.url('/_system/account/confirmEmail');\r\n                })\r\n                .error(function (response) {\r\n                    if (typeof response.error_description !== 'undefined') {\r\n                        logger.logError(response.error_description, null, true);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ResetPasswordController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', '$location', 'logger', ResetPasswordController]);\r\n\r\n    function ResetPasswordController(userFactory, $location, logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.email = $location.search().email;\r\n        vm.token = $location.search().token;\r\n        vm.resetPassword = resetPassword;\r\n        vm.resetPasswordRequest = resetPasswordRequest;\r\n        vm.viewMode = typeof $location.search().email === 'undefined' || typeof $location.search().token === 'undefined' ?\r\n            'initial' :\r\n            'received'; // initial | sent | received\r\n\r\n        /*** Implementations ***/\r\n\r\n        function resetPassword() {\r\n            // var resetPasswordBindingModel = { Token: vm.token, NewPassword: vm.newPassword, ConfirmPassword: vm.confirmPassword };\r\n            var resetPasswordBindingModel = vm;\r\n            userFactory.resetPassword(resetPasswordBindingModel)\r\n                .success(function () {\r\n                    $location.url('/_system/account/login');\r\n                    logger.logSuccess('Your password has been reset!', null, true);\r\n                });\r\n        }\r\n\r\n        function resetPasswordRequest() {\r\n            var resetPasswordRequestBindingModel = vm;\r\n            userFactory.resetPasswordRequest(resetPasswordRequestBindingModel)\r\n                .success(function () {\r\n                    vm.viewMode = 'sent';\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ResourcePoolListController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory',\r\n            'logger',\r\n\t\t\tResourcePoolListController]);\r\n\r\n    function ResourcePoolListController(resourcePoolFactory,\r\n        logger) {\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.resourcePoolSet = [];\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n            resourcePoolFactory.getResourcePoolSet(false)\r\n\t\t\t    .then(function (data) {\r\n\t\t\t        vm.resourcePoolSet = data;\r\n\t\t\t    });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ResourcePoolManageController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory',\r\n            'userFactory',\r\n            '$location',\r\n            '$routeParams',\r\n            '$rootScope',\r\n            '$uibModal',\r\n            'Enums',\r\n            'logger',\r\n            ResourcePoolManageController]);\r\n\r\n    function ResourcePoolManageController(resourcePoolFactory,\r\n        userFactory,\r\n        $location,\r\n        $routeParams,\r\n        $rootScope,\r\n        $uibModal,\r\n        Enums,\r\n        logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.addElement = addElement;\r\n        vm.addElementField = addElementField;\r\n        vm.addElementItem = addElementItem;\r\n        vm.cancelElement = cancelElement;\r\n        vm.cancelElementCell = cancelElementCell;\r\n        vm.cancelElementField = cancelElementField;\r\n        vm.cancelElementItem = cancelElementItem;\r\n        vm.cancelResourcePool = cancelResourcePool;\r\n        vm.editElement = editElement;\r\n        vm.editElementCell = editElementCell;\r\n        vm.editElementField = editElementField;\r\n        vm.editElementItem = editElementItem;\r\n        vm.element = null;\r\n        vm.elementMaster = null;\r\n        vm.elementCell = null;\r\n        vm.elementCellMaster = null;\r\n        vm.elementCellSet = elementCellSet;\r\n        vm.elementField = null;\r\n        vm.elementFieldMaster = null;\r\n        vm.elementFieldSet = elementFieldSet;\r\n        vm.elementFieldDataTypeFiltered = elementFieldDataTypeFiltered;\r\n        vm.elementItem = null;\r\n        vm.elementItemMaster = null;\r\n        vm.elementItemSet = elementItemSet;\r\n        vm.entityErrors = [];\r\n        vm.isElementEdit = false;\r\n        vm.isElementNew = true;\r\n        vm.isElementFieldEdit = false;\r\n        vm.isElementFieldNew = true;\r\n        vm.isElementItemEdit = false;\r\n        vm.isElementItemNew = true;\r\n        vm.isNew = $location.path() === '/_system/resourcePool/new';\r\n        vm.isSaveEnabled = isSaveEnabled;\r\n        vm.isSaving = false;\r\n        vm.openCopyModal = openCopyModal;\r\n        vm.openRemoveResourcePoolModal = openRemoveResourcePoolModal;\r\n        vm.removeElement = removeElement;\r\n        vm.removeElementField = removeElementField;\r\n        vm.removeElementItem = removeElementItem;\r\n        vm.removeResourcePool = removeResourcePool;\r\n        vm.resourcePool = { ElementSet: [] };\r\n        vm.resourcePoolId = $routeParams.resourcePoolId;\r\n        vm.saveResourcePool = saveResourcePool;\r\n        vm.saveElement = saveElement;\r\n        vm.saveElementCell = saveElementCell;\r\n        vm.saveElementField = saveElementField;\r\n        vm.saveElementItem = saveElementItem;\r\n\r\n        // Enums\r\n        vm.ElementFieldDataType = Enums.ElementFieldDataType;\r\n        vm.ElementFieldIndexCalculationType = Enums.ElementFieldIndexCalculationType;\r\n        vm.ElementFieldIndexSortType = Enums.ElementFieldIndexSortType;\r\n\r\n        _init();\r\n\r\n        /*** Implementations ***/\r\n\r\n        function _init() {\r\n\r\n            if (vm.isNew) {\r\n                resourcePoolFactory.createResourcePoolBasic()\r\n                    .then(function (resourcePool) {\r\n                        vm.resourcePool = resourcePool;\r\n                        vm.resourcePool.isEditing = true;\r\n\r\n                        // Title\r\n                        // TODO viewTitle was also set in route.js?\r\n                        $rootScope.viewTitle = vm.resourcePool.Name;\r\n                    });\r\n            } else {\r\n                resourcePoolFactory.getResourcePoolExpanded(vm.resourcePoolId)\r\n                    .then(function (resourcePool) {\r\n\r\n                        // Not found, navigate to 404\r\n                        if (resourcePool === null) {\r\n                            $location.url('/_system/content/404');\r\n                            return;\r\n                        }\r\n\r\n                        vm.resourcePool = resourcePool;\r\n                        vm.resourcePool.isEditing = true;\r\n\r\n                        // Title\r\n                        // TODO viewTitle was also set in route.js?\r\n                        $rootScope.viewTitle = vm.resourcePool.Name;\r\n                    });\r\n            }\r\n        }\r\n\r\n        function addElement() {\r\n            vm.element = resourcePoolFactory.createElement({\r\n                ResourcePool: vm.resourcePool,\r\n                Name: 'New element',\r\n                IsMainElement: false\r\n            });\r\n\r\n            vm.isElementEdit = true;\r\n            vm.isElementNew = true;\r\n        }\r\n\r\n        function addElementField() {\r\n\r\n            var element = vm.resourcePool.ElementSet[0];\r\n\r\n            // A temp fix for default value of 'SortOrder'\r\n            // Later handle 'SortOrder' by UI, not by asking\r\n            var sortOrder = element.ElementFieldSet.length + 1;\r\n\r\n            vm.elementField = resourcePoolFactory.createElementField({\r\n                Element: element,\r\n                Name: 'New field',\r\n                DataType: 1,\r\n                SortOrder: sortOrder\r\n            });\r\n\r\n            vm.isElementFieldEdit = true;\r\n            vm.isElementFieldNew = true;\r\n        }\r\n\r\n        function addElementItem() {\r\n            vm.elementItem = { Element: vm.resourcePool.ElementSet[0], Name: 'New item' };\r\n            vm.isElementItemEdit = true;\r\n            vm.isElementItemNew = true;\r\n        }\r\n\r\n        function cancelElement() {\r\n\r\n            // TODO Find a better way?\r\n            // Can't use reject changes because in 'New CMRP' case, these are newly added entities and reject changes removes them / SH - 23 Nov. '15\r\n            if (vm.isElementNew) {\r\n                resourcePoolFactory.removeElement(vm.element);\r\n            } else {\r\n                vm.element.Name = vm.elementMaster.Name;\r\n            }\r\n\r\n            vm.isElementEdit = false;\r\n            vm.element = null;\r\n            vm.elementMaster = null;\r\n        }\r\n\r\n        function cancelElementCell() {\r\n\r\n            // TODO Find a better way?\r\n            // Can't use reject changes because in 'New CMRP' case, these are newly added entities and reject changes removes them / SH - 23 Nov. '15\r\n            vm.elementCell.SelectedElementItemId = vm.elementCellMaster.SelectedElementItemId;\r\n            vm.elementCell.UserElementCellSet[0].StringValue = vm.elementCellMaster.UserElementCellSet[0].StringValue;\r\n            vm.elementCell.UserElementCellSet[0].BooleanValue = vm.elementCellMaster.UserElementCellSet[0].BooleanValue;\r\n            vm.elementCell.UserElementCellSet[0].IntegerValue = vm.elementCellMaster.UserElementCellSet[0].IntegerValue;\r\n            vm.elementCell.UserElementCellSet[0].DecimalValue = vm.elementCellMaster.UserElementCellSet[0].DecimalValue;\r\n            vm.elementCell.UserElementCellSet[0].DateTimeValue = vm.elementCellMaster.UserElementCellSet[0].DateTimeValue;\r\n\r\n            vm.isElementCellEdit = false;\r\n            vm.elementCell = null;\r\n            vm.elementCellMaster = null;\r\n        }\r\n\r\n        function cancelElementField() {\r\n\r\n            // TODO Find a better way?\r\n            // Can't use reject changes because in 'New CMRP' case, these are newly added entities and reject changes removes them / SH - 23 Nov. '15\r\n            if (vm.isElementFieldNew) {\r\n                resourcePoolFactory.removeElementField(vm.elementField);\r\n            } else {\r\n                vm.elementField.Name = vm.elementFieldMaster.Name;\r\n                vm.elementField.DataType = vm.elementFieldMaster.DataType;\r\n                vm.elementField.SelectedElementId = vm.elementFieldMaster.SelectedElementId;\r\n                vm.elementField.UseFixedValue = vm.elementFieldMaster.UseFixedValue;\r\n                vm.elementField.IndexEnabled = vm.elementFieldMaster.IndexEnabled;\r\n                vm.elementField.IndexCalculationType = vm.elementFieldMaster.IndexCalculationType;\r\n                vm.elementField.IndexSortType = vm.elementFieldMaster.IndexSortType;\r\n                vm.elementField.SortOrder = vm.elementFieldMaster.SortOrder;\r\n            }\r\n\r\n            vm.isElementFieldEdit = false;\r\n            vm.elementField = null;\r\n            vm.elementFieldMaster = null;\r\n        }\r\n\r\n        function cancelElementItem() {\r\n\r\n            // TODO Find a better way?\r\n            // Can't use reject changes because in 'New CMRP' case, these are newly added entities and reject changes removes them / SH - 23 Nov. '15\r\n            if (!vm.isElementItemNew) {\r\n                vm.elementItem.Name = vm.elementItemMaster.Name;\r\n            }\r\n\r\n            vm.isElementItemEdit = false;\r\n            vm.elementItem = null;\r\n            vm.elementItemMaster = null;\r\n        }\r\n\r\n        function cancelResourcePool() {\r\n\r\n            resourcePoolFactory.cancelResourcePool(vm.resourcePool);\r\n\r\n            var locationPath = vm.isNew ?\r\n                '/_system/resourcePool' :\r\n                '/_system/resourcePool/' + vm.resourcePool.Id;\r\n\r\n            $location.url(locationPath);\r\n        }\r\n\r\n        function editElement(element) {\r\n            vm.elementMaster = angular.copy(element);\r\n            vm.element = element;\r\n            vm.isElementEdit = true;\r\n            vm.isElementNew = false;\r\n        }\r\n\r\n        function editElementCell(elementCell) {\r\n            vm.elementCellMaster = angular.copy(elementCell);\r\n            vm.elementCell = elementCell;\r\n            vm.isElementCellEdit = true;\r\n        }\r\n\r\n        function editElementField(elementField) {\r\n            vm.elementFieldMaster = angular.copy(elementField);\r\n            vm.elementField = elementField;\r\n            vm.isElementFieldEdit = true;\r\n            vm.isElementFieldNew = false;\r\n        }\r\n\r\n        function editElementItem(elementItem) {\r\n            vm.elementItemMaster = angular.copy(elementItem);\r\n            vm.elementItem = elementItem;\r\n            vm.isElementItemEdit = true;\r\n            vm.isElementItemNew = false;\r\n        }\r\n\r\n        function elementCellSet() {\r\n\r\n            var elementItems = elementItemSet();\r\n\r\n            var list = [];\r\n            elementItems.forEach(function (elementItem) {\r\n                elementItem.ElementCellSet.forEach(function (elementCell) {\r\n                    list.push(elementCell);\r\n                });\r\n            });\r\n            return list;\r\n        }\r\n\r\n        function elementFieldSet() {\r\n            var list = [];\r\n            vm.resourcePool.ElementSet.forEach(function (element) {\r\n                element.ElementFieldSet.forEach(function (elementField) {\r\n                    list.push(elementField);\r\n                });\r\n            });\r\n            return list;\r\n        }\r\n\r\n        function elementFieldDataTypeFiltered() {\r\n\r\n            var filtered = {};\r\n            for (var key in vm.ElementFieldDataType) {\r\n\r\n                // These types can be added only once at the moment\r\n                if (key === 'DirectIncome' || key === 'Multiplier') {\r\n                    var exists = vm.elementField.Element.ElementFieldSet.some(fieldExists);\r\n\r\n                    if (!exists) {\r\n                        filtered[key] = vm.ElementFieldDataType[key];\r\n                    }\r\n                } else if (key === 'Element') { // Element type can only be added if there are more than one element in the pool\r\n                    if (vm.elementField.Element.ResourcePool.ElementSet.length > 1) {\r\n                        filtered[key] = vm.ElementFieldDataType[key];\r\n                    }\r\n                } else {\r\n                    filtered[key] = vm.ElementFieldDataType[key];\r\n                }\r\n            }\r\n\r\n            function fieldExists(field) {\r\n                return vm.ElementFieldDataType[key] === field.ElementFieldDataType;\r\n            }\r\n\r\n            return filtered;\r\n        }\r\n\r\n        function elementItemSet() {\r\n            var list = [];\r\n            vm.resourcePool.ElementSet.forEach(function (element) {\r\n                element.ElementItemSet.forEach(function (elementItem) {\r\n                    list.push(elementItem);\r\n                });\r\n            });\r\n            return list;\r\n        }\r\n\r\n        function isSaveEnabled() {\r\n            var value = !vm.isSaving &&\r\n                typeof vm.resourcePoolForm !== 'undefined' &&\r\n                vm.resourcePoolForm.$valid;\r\n\r\n            return value;\r\n        }\r\n\r\n        function openCopyModal() {\r\n            var modalInstance = $uibModal.open({\r\n                templateUrl: 'copyResourcePoolModal.html',\r\n                controllerAs: 'vm',\r\n                controller: ['resourcePoolFactory', '$uibModalInstance', CopyResourcePoolModalController]\r\n            });\r\n\r\n            modalInstance.result.then(function (resourcePool) {\r\n                vm.resourcePool = resourcePool;\r\n            });\r\n        }\r\n\r\n        function openRemoveResourcePoolModal() {\r\n            var modalInstance = $uibModal.open({\r\n                templateUrl: 'removeResourcePoolModal.html',\r\n                controller: ['$scope', '$uibModalInstance', RemoveResourcePoolModalController]\r\n            });\r\n\r\n            modalInstance.result.then(function () {\r\n                removeResourcePool();\r\n            });\r\n        }\r\n\r\n        function removeElement(element) {\r\n            resourcePoolFactory.removeElement(element);\r\n        }\r\n\r\n        function removeElementField(elementField) {\r\n            resourcePoolFactory.removeElementField(elementField);\r\n        }\r\n\r\n        function removeElementItem(elementItem) {\r\n            resourcePoolFactory.removeElementItem(elementItem);\r\n        }\r\n\r\n        function removeResourcePool() {\r\n            vm.isSaving = true;\r\n\r\n            resourcePoolFactory.removeResourcePool(vm.resourcePool);\r\n\r\n            userFactory.getCurrentUser()\r\n                .then(function (currentUser) {\r\n                    if (currentUser.isAuthenticated()) {\r\n                        resourcePoolFactory.saveChanges()\r\n                            .then(function () {\r\n                                $location.url('/_system/resourcePool');\r\n                            })\r\n                            .finally(function () {\r\n                                vm.isSaving = false;\r\n                            });\r\n                    } else {\r\n                        $location.url('/_system/resourcePool');\r\n                        vm.isSaving = false;\r\n                    }\r\n                });\r\n        }\r\n\r\n        function saveElement() {\r\n            vm.isElementEdit = false;\r\n            vm.element = null;\r\n            vm.elementMaster = null;\r\n        }\r\n\r\n        function saveElementCell() {\r\n            vm.isElementCellEdit = false;\r\n            vm.elementCell = null;\r\n            vm.elementCellMaster = null;\r\n        }\r\n\r\n        function saveElementField() {\r\n\r\n            // Fixes\r\n            // a. UseFixedValue must be null for String & Element types\r\n            if (vm.elementField.DataType === vm.ElementFieldDataType.String ||\r\n                vm.elementField.DataType === vm.ElementFieldDataType.Element) {\r\n                vm.elementField.UseFixedValue = null;\r\n            }\r\n\r\n            // b. UseFixedValue must be 'false' for Multiplier type\r\n            if (vm.elementField.DataType === vm.ElementFieldDataType.Multiplier) {\r\n                vm.elementField.UseFixedValue = false;\r\n            }\r\n\r\n            // c. DirectIncome cannot be Use Fixed Value false at the moment\r\n            if (vm.elementField.DataType === vm.ElementFieldDataType.DirectIncome) {\r\n                vm.elementField.UseFixedValue = true;\r\n            }\r\n\r\n            vm.isElementFieldEdit = false;\r\n            vm.elementField = null;\r\n            vm.elementFieldMaster = null;\r\n        }\r\n\r\n        function saveElementItem() {\r\n\r\n            if (vm.isElementItemNew) {\r\n                vm.elementItem = resourcePoolFactory.createElementItem(vm.elementItem);\r\n            }\r\n\r\n            vm.isElementItemEdit = false;\r\n            vm.elementItem = null;\r\n            vm.elementItemMaster = null;\r\n        }\r\n\r\n        function saveResourcePool() {\r\n\r\n            vm.isSaving = true;\r\n\r\n            // TODO Try to move this to a better place?\r\n            vm.resourcePool.updateCache();\r\n\r\n            userFactory.getCurrentUser()\r\n                .then(function (currentUser) {\r\n\r\n                    /* Update isEditing state */\r\n                    // Resource pool\r\n                    vm.resourcePool.isEditing = false;\r\n\r\n                    // User resource pools\r\n                    vm.resourcePool.UserResourcePoolSet.forEach(function (userResourcePool) {\r\n                        userResourcePool.isEditing = false;\r\n                    });\r\n\r\n                    // Elements\r\n                    vm.resourcePool.ElementSet.forEach(function (element) {\r\n                        element.isEditing = false;\r\n\r\n                        // Fields\r\n                        element.ElementFieldSet.forEach(function (elementField) {\r\n                            elementField.isEditing = false;\r\n\r\n                            // User element fields\r\n                            elementField.UserElementFieldSet.forEach(function (userElementField) {\r\n                                userElementField.isEditing = false;\r\n                            });\r\n                        });\r\n\r\n                        // Items\r\n                        element.ElementItemSet.forEach(function (elementItem) {\r\n                            elementItem.isEditing = false;\r\n\r\n                            // Cells\r\n                            elementItem.ElementCellSet.forEach(function (elementCell) {\r\n                                elementCell.isEditing = false;\r\n\r\n                                // User cells\r\n                                elementCell.UserElementCellSet.forEach(function (userElementCell) {\r\n                                    userElementCell.isEditing = false;\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                    /* Update isEditing state end */\r\n\r\n                    if (currentUser.isAuthenticated()) {\r\n                        resourcePoolFactory.saveChanges()\r\n                            .then(function () {\r\n                                $location.url('/_system/resourcePool/' + vm.resourcePool.Id);\r\n                            })\r\n                            .finally(function () {\r\n                                vm.isSaving = false;\r\n                            });\r\n                    } else {\r\n                        resourcePoolFactory.acceptChanges(vm.resourcePool);\r\n                        vm.isSaving = false;\r\n                        $location.url('/_system/resourcePool/' + vm.resourcePool.Id);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    function RemoveResourcePoolModalController($scope, $uibModalInstance) {\r\n        $scope.cancel = function () {\r\n            $uibModalInstance.dismiss('cancel');\r\n        };\r\n        $scope.remove = function () {\r\n            $uibModalInstance.close();\r\n        };\r\n    }\r\n\r\n    function CopyResourcePoolModalController(resourcePoolFactory, $uibModalInstance) {\r\n\r\n        var vm = this;\r\n        vm.close = close;\r\n        vm.copy = copy;\r\n        vm.resourcePoolSet = [];\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n            resourcePoolFactory.getResourcePoolSet(false)\r\n                .then(function (data) {\r\n                    vm.resourcePoolSet = data;\r\n                });\r\n        }\r\n\r\n        function close() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        function copy(resourcePool) {\r\n            $uibModalInstance.close(resourcePool);\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ResourcePoolViewController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory',\r\n            '$location',\r\n            '$routeParams',\r\n            '$rootScope',\r\n            'logger',\r\n            ResourcePoolViewController]);\r\n\r\n    function ResourcePoolViewController(resourcePoolFactory, $location, $routeParams, $rootScope, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.editorConfig = getEditorConfig();\r\n\r\n        init();\r\n\r\n        function init() {\r\n\r\n            // Title\r\n            if (!vm.editorConfig.isNew) {\r\n                resourcePoolFactory.getResourcePool(vm.editorConfig.resourcePoolId)\r\n                    .then(function (resourcePool) {\r\n\r\n                        // Not found, navigate to 404\r\n                        if (resourcePool === null) {\r\n                            $location.url('/_system/content/404');\r\n                            return;\r\n                        }\r\n\r\n                        // TODO viewTitle was also set in route.js?\r\n                        $rootScope.viewTitle = resourcePool.name();\r\n                    });\r\n            }\r\n        }\r\n\r\n        function getEditorConfig() {\r\n\r\n            var action = $location.path().substring($location.path().lastIndexOf('/') + 1);\r\n            var isNew = action === 'new';\r\n            var isEdit = action === 'edit';\r\n            var resourcePoolId = $routeParams.resourcePoolId;\r\n\r\n            var config = {\r\n                isNew: isNew,\r\n                isEdit: isEdit,\r\n                resourcePoolId: isNew ? null : resourcePoolId\r\n            };\r\n\r\n            return config;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'AllInOneController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory', '$scope', 'logger', AllInOneController]);\r\n\r\n    function AllInOneController(resourcePoolFactory, $scope, logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.allInOneConfig = { resourcePoolId: 7 };\r\n\r\n        // Event listeners\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueIncreased', processNewInteraction);\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueDecreased', processNewInteraction);\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueReset', processNewInteraction);\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n            processExistingInteraction();\r\n        }\r\n\r\n        // Processes whether the current user had already interacted with this example\r\n        function processExistingInteraction() {\r\n            // Priority & Knowledge Index examples copy their ratings to this one\r\n            // However if the user starts directly playing ..\r\n            resourcePoolFactory.getResourcePoolExpanded(vm.allInOneConfig.resourcePoolId)\r\n                .then(function (resourcePool) {\r\n                    // Elements\r\n                    for (var elementIndex = 0; elementIndex < resourcePool.ElementSet.length; elementIndex++) {\r\n                        var element = resourcePool.ElementSet[elementIndex];\r\n                        // Element fields\r\n                        for (var elementFieldIndex = 0; elementFieldIndex < element.ElementFieldSet.length; elementFieldIndex++) {\r\n                            var elementField = element.ElementFieldSet[elementFieldIndex];\r\n                            // Element cells\r\n                            for (var elementCellIndex = 0; elementCellIndex < elementField.ElementCellSet.length; elementCellIndex++) {\r\n                                var elementCell = elementField.ElementCellSet[elementCellIndex];\r\n\r\n                                if (elementCell.currentUserCell()) {\r\n                                    resourcePool.userInteracted = true;\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n\r\n        // Processes whether the user is currently interacting with this example\r\n        function processNewInteraction(event, cell) {\r\n            if (cell.ElementField.Element.ResourcePoolId === vm.allInOneConfig.resourcePoolId) {\r\n                cell.ElementField.Element.ResourcePool.userInteracted = true;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'BasicsController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory', 'userFactory', 'dataContext', '$scope', 'logger', BasicsController]);\r\n\r\n    function BasicsController(resourcePoolFactory, userFactory, dataContext, $scope, logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.existingModelConfig = {};\r\n        vm.newModelConfig = {};\r\n\r\n        // Listen resource pool updated event\r\n        $scope.$on('resourcePoolEditor_elementMultiplierIncreased', updateOppositeResourcePool);\r\n        $scope.$on('resourcePoolEditor_elementMultiplierDecreased', updateOppositeResourcePool);\r\n        $scope.$on('resourcePoolEditor_elementMultiplierReset', updateOppositeResourcePool);\r\n\r\n        _init();\r\n\r\n        /*** Implementations ***/\r\n\r\n        function _init() {\r\n\r\n            var existingModelSampleId = -102;\r\n            var newModelSampleId = -103;\r\n\r\n            resourcePoolFactory.getResourcePoolExpanded(existingModelSampleId)\r\n                .then(function (resourcePool) {\r\n                    if (resourcePool === null) {\r\n                        getBasicsSample()\r\n                            .then(function (resourcePool) {\r\n                                resourcePool.Id = existingModelSampleId;\r\n                                resourcePool.Name = 'Basics - Existing Model';\r\n                                resourcePool.UserResourcePoolSet[0].entityAspect.setDeleted(); // Remove resource pool rate\r\n                                resourcePool._init(true);\r\n\r\n                                vm.existingModelConfig.resourcePoolId = resourcePool.Id;\r\n                            });\r\n                    } else {\r\n                        vm.existingModelConfig.resourcePoolId = resourcePool.Id;\r\n                    }\r\n                });\r\n\r\n            resourcePoolFactory.getResourcePoolExpanded(newModelSampleId)\r\n                .then(function (resourcePool) {\r\n                    if (resourcePool === null) {\r\n                        getBasicsSample()\r\n                            .then(function (resourcePool) {\r\n                                resourcePool.Id = newModelSampleId;\r\n                                resourcePool.Name = 'Basics - New Model';\r\n\r\n                                // Employee Satisfaction field (index)\r\n                                var employeeSatisfactionField = resourcePoolFactory.createElementField({\r\n                                    Element: resourcePool.mainElement(),\r\n                                    Name: 'Employee Satisfaction',\r\n                                    DataType: 4,\r\n                                    UseFixedValue: false,\r\n                                    IndexEnabled: true,\r\n                                    IndexCalculationType: 1,\r\n                                    IndexSortType: 1,\r\n                                    SortOrder: 2\r\n                                });\r\n\r\n                                // A fake user & ratings\r\n                                // TODO Use factories instead of dataContext?\r\n                                var fakeUser = dataContext.createEntity('User', {});\r\n\r\n                                employeeSatisfactionField.ElementCellSet.forEach(function (elementCell) {\r\n                                    var userElementCell = {\r\n                                        User: fakeUser,\r\n                                        ElementCell: elementCell,\r\n                                        DecimalValue: Math.floor((Math.random() * 100) + 1)\r\n                                    };\r\n\r\n                                    dataContext.createEntity('UserElementCell', userElementCell);\r\n                                });\r\n\r\n                                resourcePool._init(true);\r\n\r\n                                vm.newModelConfig.resourcePoolId = resourcePool.Id;\r\n                            });\r\n                    } else {\r\n                        vm.newModelConfig.resourcePoolId = resourcePool.Id;\r\n                    }\r\n                });\r\n        }\r\n\r\n        function getBasicsSample() {\r\n            return resourcePoolFactory.createResourcePoolDirectIncomeAndMultiplier()\r\n                .then(function (resourcePool) {\r\n                    resourcePool.InitialValue = 0;\r\n                    resourcePool.isTemp = true;\r\n\r\n                    var mainElement = resourcePool.mainElement();\r\n                    mainElement.Name = 'Organization';\r\n\r\n                    mainElement.ElementItemSet[0].Name = 'Alpha';\r\n                    mainElement.ElementItemSet[1].Name = 'Beta';\r\n                    resourcePoolFactory.createElementItem({\r\n                        Element: mainElement,\r\n                        Name: 'Charlie'\r\n                    });\r\n                    resourcePoolFactory.createElementItem({\r\n                        Element: mainElement,\r\n                        Name: 'Delta'\r\n                    });\r\n\r\n                    return resourcePool;\r\n                });\r\n        }\r\n\r\n        function updateOppositeResourcePool(event, element) {\r\n\r\n            var oppositeResourcePoolId = 0;\r\n\r\n            if (element.ResourcePool.Id === vm.existingModelConfig.resourcePoolId) {\r\n                oppositeResourcePoolId = vm.newModelConfig.resourcePoolId;\r\n            } else if (element.ResourcePool.Id === vm.newModelConfig.resourcePoolId) {\r\n                oppositeResourcePoolId = vm.existingModelConfig.resourcePoolId;\r\n            }\r\n\r\n            // Call the service to increase the multiplier\r\n            if (oppositeResourcePoolId !== 0) {\r\n                resourcePoolFactory.getResourcePoolExpanded(oppositeResourcePoolId)\r\n                    .then(function (resourcePool) {\r\n                        switch (event.name) {\r\n                            case 'resourcePoolEditor_elementMultiplierIncreased': {\r\n                                userFactory.updateElementMultiplier(resourcePool.mainElement(), 'increase');\r\n                                break;\r\n                            }\r\n                            case 'resourcePoolEditor_elementMultiplierDecreased': {\r\n                                userFactory.updateElementMultiplier(resourcePool.mainElement(), 'decrease');\r\n                                break;\r\n                            }\r\n                            case 'resourcePoolEditor_elementMultiplierReset': {\r\n                                userFactory.updateElementMultiplier(resourcePool.mainElement(), 'reset');\r\n                                break;\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'DefaultController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['applicationFactory', 'userFactory', '$scope', '$location', 'disqusShortname', 'logger', DefaultController]);\r\n\r\n    function DefaultController(applicationFactory, userFactory, $scope, $location, disqusShortname, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(controllerId);\r\n\r\n        // Local variables\r\n        var anonymousUserWarning = null;\r\n\r\n        // View model\r\n        var vm = this;\r\n        vm.applicationInfo = null;\r\n        vm.currentUser = { Email: '', isAuthenticated: function () { return false; }, hasPassword: function () { return false; } };\r\n        vm.currentDate = new Date();\r\n        vm.displayBankTransfer = false;\r\n        vm.displayFooterIcons = false;\r\n        vm.disqusConfig = {\r\n            disqus_shortname: disqusShortname,\r\n            disqus_identifier: '',\r\n            disqus_url: ''\r\n        };\r\n        vm.logout = logout;\r\n        vm.toggleBankTransfer = toggleBankTransfer;\r\n\r\n        // Events\r\n        $scope.$on('$routeChangeSuccess', routeChangeSuccess);\r\n        $scope.$on('anonymousUserInteracted', anonymousUserInteracted); // Anonymous user warning\r\n        $scope.$on('userFactory_currentUserChanged', currentUserChanged);\r\n\r\n        _init();\r\n\r\n        /*** Implementations ***/\r\n\r\n        function _init() {\r\n            getApplicationInfo();\r\n        }\r\n\r\n        function anonymousUserInteracted() {\r\n            if (anonymousUserWarning === null) {\r\n                var warningText = 'To prevent losing your changes, you can register for free or if you have an existing account, please login first.';\r\n                var warningTitle = 'Save your changes?';\r\n                var loggerOptions = { extendedTimeOut: 0, timeOut: 0 };\r\n                anonymousUserWarning = logger.logWarning(warningText, null, true, warningTitle, loggerOptions);\r\n            }\r\n        }\r\n\r\n        function currentUserChanged(event, newUser) {\r\n            vm.currentUser = newUser;\r\n        }\r\n\r\n        function getApplicationInfo() {\r\n            applicationFactory.getApplicationInfo()\r\n                .then(function (applicationInfo) {\r\n                    vm.applicationInfo = applicationInfo;\r\n                    vm.applicationInfo.CurrentVersionText = vm.applicationInfo.CurrentVersion + ' - Alpha ~ Beta';\r\n                });\r\n        }\r\n\r\n        function logout() {\r\n            userFactory.logout()\r\n                .then(function () {\r\n                    $location.url('/');\r\n                });\r\n        }\r\n\r\n        function routeChangeSuccess(event, current, previous) {\r\n\r\n            // Footer icons\r\n            vm.displayFooterIcons = $location.path() === '/';\r\n\r\n            // Load related disqus\r\n            if (typeof current.enableDisqus !== 'undefined' && current.enableDisqus) {\r\n                vm.disqusConfig.disqus_identifier = disqusShortname + $location.path().replace(/\\//g, '_');\r\n                vm.disqusConfig.disqus_url = $location.absUrl().substring(0, $location.absUrl().length - $location.url().length + $location.path().length);\r\n            } else {\r\n                vm.disqusConfig.disqus_identifier = '';\r\n            }\r\n\r\n            // Remove anonymousUserWarning toastr in register & login pages, if there is\r\n            if (($location.path() === '/_system/account/register' ||\r\n                $location.path() === '/_system/account/login') &&\r\n                anonymousUserWarning !== null) {\r\n                anonymousUserWarning.remove();\r\n            }\r\n        }\r\n\r\n        function toggleBankTransfer() {\r\n            vm.displayBankTransfer = !vm.displayBankTransfer;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'IntroductionController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory', 'userFactory', '$scope', '$timeout', 'logger', IntroductionController]);\r\n\r\n    function IntroductionController(resourcePoolFactory, userFactory, $scope, $timeout, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.upoConfig = {};\r\n\r\n        _init();\r\n\r\n        /*** Implementations ***/\r\n\r\n        function _init() {\r\n\r\n            var upoId = -101;\r\n\r\n            resourcePoolFactory.getResourcePoolExpanded(upoId)\r\n                .then(function (resourcePool) {\r\n                    if (resourcePool === null) {\r\n\r\n                        resourcePoolFactory.createResourcePoolDirectIncomeAndMultiplier()\r\n                            .then(function (resourcePool) {\r\n                                resourcePool.Id = upoId;\r\n                                resourcePool.Name = 'Unidentified Profiting Object (UPO)';\r\n                                resourcePool.InitialValue = 0;\r\n                                resourcePool.isTemp = true;\r\n                                resourcePool.displayMultiplierFunctions = false;\r\n                                resourcePool.UserResourcePoolSet[0].entityAspect.setDeleted(); // Remove resource pool rate\r\n\r\n                                var mainElement = resourcePool.mainElement();\r\n                                mainElement.Name = 'Organization';\r\n\r\n                                mainElement.ElementItemSet[0].Name = 'UPO';\r\n                                resourcePoolFactory.removeElementItem(mainElement.ElementItemSet[1]);\r\n\r\n                                resourcePool._init(true);\r\n\r\n                                initResourcePool(resourcePool);\r\n                            });\r\n                    } else {\r\n                        initResourcePool(resourcePool);\r\n                    }\r\n\r\n                    function initResourcePool(resourcePool) {\r\n                        vm.upoConfig.resourcePoolId = resourcePool.Id;\r\n\r\n                        var increaseMultiplierTimeout = $timeout(increaseMultiplier, 5000);\r\n\r\n                        function increaseMultiplier() {\r\n\r\n                            // Call the service to increase the multiplier\r\n                            resourcePoolFactory.getResourcePoolExpanded(vm.upoConfig.resourcePoolId)\r\n                                .then(function (resourcePool) {\r\n\r\n                                    if (resourcePool === null) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    resourcePool.ElementSet.forEach(function (element) {\r\n                                        userFactory.updateElementMultiplier(element, 'increase');\r\n                                    });\r\n                                });\r\n\r\n                            // Then increase recursively\r\n                            increaseMultiplierTimeout = $timeout(increaseMultiplier, 2500);\r\n                        }\r\n\r\n                        // When the DOM element is removed from the page,\r\n                        // AngularJS will trigger the $destroy event on\r\n                        // the scope. This gives us a chance to cancel any\r\n                        // pending timer that we may have.\r\n                        $scope.$on(\"$destroy\", function (event) {\r\n                            $timeout.cancel(increaseMultiplierTimeout);\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'KnowledgeIndexController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory', 'userFactory', '$scope', '$timeout', 'logger', KnowledgeIndexController]);\r\n\r\n    function KnowledgeIndexController(resourcePoolFactory, userFactory, $scope, $timeout, logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.oldModelChartConfig = {\r\n            title: {\r\n                text: ''\r\n            },\r\n            options: {\r\n                chart: {\r\n                    type: 'column',\r\n                    height: 358\r\n                },\r\n                plotOptions: {\r\n                    column: {\r\n                        allowPointSelect: true,\r\n                        pointWidth: 15\r\n                    }\r\n                },\r\n                xAxis: { categories: ['Knowledge'] },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Development process'\r\n                    },\r\n                    allowDecimals: false,\r\n                    min: 0\r\n                }\r\n            },\r\n            size: {},\r\n            series: [\r\n                { name: \"My Precious Jewelry\", data: [0] },\r\n                { name: 'Death Star Architecture', data: [0] },\r\n                { name: \"Christina's Secret\", data: [0] },\r\n                { name: 'Nuka Cola Company', data: [0] }\r\n            ]\r\n        };\r\n        vm.newModelChartConfig = {\r\n            title: {\r\n                text: ''\r\n            },\r\n            options: {\r\n                chart: {\r\n                    type: 'column',\r\n                    height: 300\r\n                },\r\n                plotOptions: {\r\n                    column: {\r\n                        allowPointSelect: true,\r\n                        pointWidth: 15\r\n                    }\r\n                },\r\n                xAxis: { categories: ['Knowledge'] },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Development process'\r\n                    },\r\n                    allowDecimals: false,\r\n                    min: 0\r\n                }\r\n            },\r\n            size: {},\r\n            series: [\r\n                { name: 'Global Knowledge Database', data: [0] }\r\n            ]\r\n        };\r\n        vm.knowledgeIndexConfig = { resourcePoolId: 3 };\r\n\r\n        // Event listeners\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueIncreased', updateAllInOne);\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueDecreased', updateAllInOne);\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueReset', updateAllInOne);\r\n\r\n        _init();\r\n\r\n        function _init() {\r\n            var timeout = $timeout(refreshPage, 10000);\r\n\r\n            function refreshPage() {\r\n                var organizationIndex = Math.floor(Math.random() * 4);\r\n                vm.oldModelChartConfig.series[organizationIndex].data[0] += 1;\r\n                vm.newModelChartConfig.series[0].data[0] += 1;\r\n\r\n                timeout = $timeout(refreshPage, 1000);\r\n            }\r\n\r\n            // When the DOM element is removed from the page,\r\n            // AngularJS will trigger the $destroy event on\r\n            // the scope. This gives us a chance to cancel any\r\n            // pending timer that we may have.\r\n            $scope.$on(\"$destroy\", function (event) {\r\n                $timeout.cancel(timeout);\r\n            });\r\n        }\r\n\r\n        // Sync this example's values with 'All in One'\r\n        function updateAllInOne(event, cell) {\r\n\r\n            var allInOneId = 7;\r\n\r\n            if (cell.ElementField.Element.ResourcePoolId !== vm.knowledgeIndexConfig.resourcePoolId) {\r\n                return;\r\n            }\r\n\r\n            resourcePoolFactory.getResourcePoolExpanded(allInOneId)\r\n                .then(function (resourcePool) {\r\n\r\n                    // If the current user already interacted with 'All in One', stop copying ratings\r\n                    if (typeof resourcePool.userInteracted !== 'undefined' && resourcePool.userInteracted) {\r\n                        return;\r\n                    }\r\n\r\n                    // Elements\r\n                    for (var elementIndex = 0; elementIndex < resourcePool.ElementSet.length; elementIndex++) {\r\n                        var element = resourcePool.ElementSet[elementIndex];\r\n                        if (element.Name === cell.ElementField.Element.Name) {\r\n                            // Element fields\r\n                            for (var elementFieldIndex = 0; elementFieldIndex < element.ElementFieldSet.length; elementFieldIndex++) {\r\n                                var elementField = element.ElementFieldSet[elementFieldIndex];\r\n                                if (elementField.Name === cell.ElementField.Name) {\r\n                                    // Element cells\r\n                                    for (var elementCellIndex = 0; elementCellIndex < elementField.ElementCellSet.length; elementCellIndex++) {\r\n                                        var elementCell = elementField.ElementCellSet[elementCellIndex];\r\n                                        if (elementCell.ElementItem.Name === cell.ElementItem.Name) {\r\n                                            switch (event.name) {\r\n                                                case 'resourcePoolEditor_elementCellNumericValueIncreased': {\r\n                                                    userFactory.updateElementCellNumericValue(elementCell, 'increase');\r\n                                                    break;\r\n                                                }\r\n                                                case 'resourcePoolEditor_elementCellNumericValueDecreased': {\r\n                                                    userFactory.updateElementCellNumericValue(elementCell, 'decrease');\r\n                                                    break;\r\n                                                }\r\n                                                case 'resourcePoolEditor_elementCellNumericValueReset': {\r\n                                                    userFactory.updateElementCellNumericValue(elementCell, 'reset');\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n\r\n                                            // Save changes\r\n                                            resourcePoolFactory.saveChanges(1500);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'PriorityIndexController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory', 'userFactory', '$scope', 'logger', PriorityIndexController]);\r\n\r\n    function PriorityIndexController(resourcePoolFactory, userFactory, $scope, logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.priorityIndexConfig = { resourcePoolId: 2 };\r\n\r\n        // Event listeners\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueIncreased', updateAllInOne);\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueDecreased', updateAllInOne);\r\n        $scope.$on('resourcePoolEditor_elementCellNumericValueReset', updateAllInOne);\r\n\r\n        // Sync this example's values with 'All in One'\r\n        function updateAllInOne(event, cell) {\r\n\r\n            var allInOneId = 7;\r\n\r\n            if (cell.ElementField.Element.ResourcePoolId !== vm.priorityIndexConfig.resourcePoolId) {\r\n                return;\r\n            }\r\n\r\n            resourcePoolFactory.getResourcePoolExpanded(allInOneId)\r\n                .then(function (resourcePool) {\r\n\r\n                    // If the current user already interacted with 'All in One', stop copying ratings\r\n                    if (typeof resourcePool.userInteracted !== 'undefined' && resourcePool.userInteracted) {\r\n                        return;\r\n                    }\r\n\r\n                    // Elements\r\n                    for (var elementIndex = 0; elementIndex < resourcePool.ElementSet.length; elementIndex++) {\r\n                        var element = resourcePool.ElementSet[elementIndex];\r\n                        if (element.Name === cell.ElementField.Element.Name) {\r\n                            // Element fields\r\n                            for (var elementFieldIndex = 0; elementFieldIndex < element.ElementFieldSet.length; elementFieldIndex++) {\r\n                                var elementField = element.ElementFieldSet[elementFieldIndex];\r\n                                if (elementField.Name === cell.ElementField.Name) {\r\n                                    // Element cells\r\n                                    for (var elementCellIndex = 0; elementCellIndex < elementField.ElementCellSet.length; elementCellIndex++) {\r\n                                        var elementCell = elementField.ElementCellSet[elementCellIndex];\r\n                                        if (elementCell.ElementItem.Name === cell.ElementItem.Name) {\r\n                                            switch (event.name) {\r\n                                                case 'resourcePoolEditor_elementCellNumericValueIncreased': {\r\n                                                    userFactory.updateElementCellNumericValue(elementCell, 'increase');\r\n                                                    break;\r\n                                                }\r\n                                                case 'resourcePoolEditor_elementCellNumericValueDecreased': {\r\n                                                    userFactory.updateElementCellNumericValue(elementCell, 'decrease');\r\n                                                    break;\r\n                                                }\r\n                                                case 'resourcePoolEditor_elementCellNumericValueReset': {\r\n                                                    userFactory.updateElementCellNumericValue(elementCell, 'reset');\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n\r\n                                            // Save changes\r\n                                            resourcePoolFactory.saveChanges(1500);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'TotalCostIndexController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['resourcePoolFactory', 'userFactory', '$scope', 'logger', TotalCostIndexController]);\r\n\r\n    function TotalCostIndexController(resourcePoolFactory, userFactory, $scope, logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.existingModelConfig = { resourcePoolId: 5 };\r\n        vm.newModelConfig = { resourcePoolId: 6 };\r\n\r\n        // Listen resource pool updated event\r\n        $scope.$on('resourcePoolEditor_elementMultiplierIncreased', updateOppositeResourcePool);\r\n        $scope.$on('resourcePoolEditor_elementMultiplierDecreased', updateOppositeResourcePool);\r\n        $scope.$on('resourcePoolEditor_elementMultiplierReset', updateOppositeResourcePool);\r\n\r\n        function updateOppositeResourcePool(event, element) {\r\n\r\n            var oppositeResourcePoolId = 0;\r\n\r\n            if (element.ResourcePool.Id === vm.existingModelConfig.resourcePoolId) {\r\n                oppositeResourcePoolId = vm.newModelConfig.resourcePoolId;\r\n            } else if (element.ResourcePool.Id === vm.newModelConfig.resourcePoolId) {\r\n                oppositeResourcePoolId = vm.existingModelConfig.resourcePoolId;\r\n            }\r\n\r\n            // Call the service to increase the multiplier\r\n            if (oppositeResourcePoolId > 0) {\r\n                resourcePoolFactory.getResourcePoolExpanded(oppositeResourcePoolId)\r\n                    .then(function (resourcePool) {\r\n\r\n                        switch (event.name) {\r\n                            case 'resourcePoolEditor_elementMultiplierIncreased': {\r\n                                userFactory.updateElementMultiplier(resourcePool.mainElement(), 'increase');\r\n                                break;\r\n                            }\r\n                            case 'resourcePoolEditor_elementMultiplierDecreased': {\r\n                                userFactory.updateElementMultiplier(resourcePool.mainElement(), 'decrease');\r\n                                break;\r\n                            }\r\n                            case 'resourcePoolEditor_elementMultiplierReset': {\r\n                                userFactory.updateElementMultiplier(resourcePool.mainElement(), 'reset');\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        resourcePoolFactory.saveChanges(1500);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var directiveId = 'resourcePoolEditor';\r\n\r\n    angular.module('main')\r\n        .directive(directiveId, ['resourcePoolFactory',\r\n            'userFactory',\r\n            'Enums',\r\n            '$location',\r\n            '$rootScope',\r\n            'logger',\r\n            resourcePoolEditor]);\r\n\r\n    function resourcePoolEditor(resourcePoolFactory,\r\n        userFactory,\r\n        Enums,\r\n        $location,\r\n        $rootScope,\r\n        logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(directiveId);\r\n\r\n        function link(scope, elm, attrs) {\r\n\r\n            // Local variables\r\n            scope.currentUser = null;\r\n            scope.displayIndexDetails = false;\r\n            scope.editResourcePool = editResourcePool;\r\n            scope.errorMessage = '';\r\n            scope.isSaving = false;\r\n            scope.resourcePool = { Name: 'Loading...' };\r\n            scope.resourcePoolId = null;\r\n\r\n            // Functions\r\n            scope.changeSelectedElement = changeSelectedElement;\r\n            scope.decreaseElementCellNumericValue = decreaseElementCellNumericValue;\r\n            scope.decreaseElementMultiplier = decreaseElementMultiplier;\r\n            scope.decreaseElementCellMultiplier = decreaseElementCellMultiplier;\r\n            scope.decreaseIndexRating = decreaseIndexRating;\r\n            scope.decreaseResourcePoolRate = decreaseResourcePoolRate;\r\n            scope.increaseElementCellNumericValue = increaseElementCellNumericValue;\r\n            scope.increaseElementMultiplier = increaseElementMultiplier;\r\n            scope.increaseElementCellMultiplier = increaseElementCellMultiplier;\r\n            scope.increaseIndexRating = increaseIndexRating;\r\n            scope.increaseResourcePoolRate = increaseResourcePoolRate;\r\n            scope.resetElementCellNumericValue = resetElementCellNumericValue;\r\n            scope.resetElementMultiplier = resetElementMultiplier;\r\n            scope.resetElementCellMultiplier = resetElementCellMultiplier;\r\n            scope.resetIndexRating = resetIndexRating;\r\n            scope.resetResourcePoolRate = resetResourcePoolRate;\r\n            scope.toggleIndexDetails = toggleIndexDetails;\r\n\r\n            // Event handlers\r\n            scope.$watch('config', configChanged, true);\r\n            scope.$on('saveChangesStart', saveChangesStart);\r\n            scope.$on('saveChangesCompleted', saveChangesCompleted);\r\n            scope.$on('userFactory_currentUserChanged', currentUserChanged);\r\n\r\n            /*** Implementations ***/\r\n\r\n            function changeSelectedElement(element) {\r\n                scope.resourcePool.selectedElement(element);\r\n                loadChartData();\r\n            }\r\n\r\n            function configChanged() {\r\n                var resourcePoolId = typeof scope.config.resourcePoolId === 'undefined' ? null : Number(scope.config.resourcePoolId);\r\n                userFactory.getCurrentUser()\r\n                    .then(function (currentUser) {\r\n                        initialize(currentUser, resourcePoolId);\r\n                    });\r\n            }\r\n\r\n            function decreaseElementCellNumericValue(cell) {\r\n                userFactory.updateElementCellNumericValue(cell, 'decrease');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementCellNumericValueDecreased', cell);\r\n                saveChanges();\r\n            }\r\n\r\n            function decreaseElementMultiplier(element) {\r\n                userFactory.updateElementMultiplier(element, 'decrease');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementMultiplierDecreased', element);\r\n                saveChanges();\r\n            }\r\n\r\n            function decreaseElementCellMultiplier(elementCell) {\r\n                userFactory.updateElementCellMultiplier(elementCell, 'decrease');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementCellMultiplierDecreased', element);\r\n                saveChanges();\r\n            }\r\n\r\n            function decreaseIndexRating(field) {\r\n                userFactory.updateElementFieldIndexRating(field, 'decrease');\r\n                saveChanges();\r\n            }\r\n\r\n            function decreaseResourcePoolRate() {\r\n                userFactory.updateResourcePoolRate(scope.resourcePool, 'decrease');\r\n                saveChanges();\r\n            }\r\n\r\n            function editResourcePool() {\r\n                // TODO Instead of having fixed url here, broadcast an 'edit request'?\r\n                $location.url('/_system/resourcePool/' + scope.resourcePoolId + '/edit');\r\n            }\r\n\r\n            function increaseElementCellNumericValue(cell) {\r\n                $rootScope.$broadcast('resourcePoolEditor_elementCellNumericValueIncreased', cell);\r\n                userFactory.updateElementCellNumericValue(cell, 'increase');\r\n                saveChanges();\r\n            }\r\n\r\n            function increaseElementMultiplier(element) {\r\n                userFactory.updateElementMultiplier(element, 'increase');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementMultiplierIncreased', element);\r\n                saveChanges();\r\n            }\r\n\r\n            function increaseElementCellMultiplier(elementCell) {\r\n                userFactory.updateElementCellMultiplier(elementCell, 'increase');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementCellMultiplierIncreased', element);\r\n                saveChanges();\r\n            }\r\n\r\n            function increaseIndexRating(field) {\r\n                userFactory.updateElementFieldIndexRating(field, 'increase');\r\n                saveChanges();\r\n            }\r\n\r\n            function increaseResourcePoolRate() {\r\n                userFactory.updateResourcePoolRate(scope.resourcePool, 'increase');\r\n                saveChanges();\r\n            }\r\n\r\n            function initialize(user, resourcePoolId) {\r\n\r\n                if (scope.currentUser !== user || scope.resourcePoolId !== resourcePoolId) {\r\n                    scope.currentUser = user;\r\n                    scope.resourcePoolId = resourcePoolId;\r\n\r\n                    // Clear previous error messages\r\n                    scope.errorMessage = '';\r\n\r\n                    scope.chartConfig = {\r\n                        credits: {\r\n                            enabled: false\r\n                        },\r\n                        loading: true,\r\n                        options: {\r\n                            plotOptions: {\r\n                                column: {\r\n                                    allowPointSelect: true,\r\n                                    pointWidth: 15\r\n                                },\r\n                                pie: {\r\n                                    allowPointSelect: true,\r\n                                    cursor: 'pointer',\r\n                                    dataLabels: {\r\n                                        enabled: false\r\n                                    },\r\n                                    showInLegend: true\r\n                                }\r\n                            },\r\n                            tooltip: {\r\n                                headerFormat: ''\r\n                            },\r\n                            xAxis: { categories: [''] },\r\n                            yAxis: {\r\n                                allowDecimals: false,\r\n                                min: 0\r\n                            }\r\n                        },\r\n                        size: {},\r\n                        title: { text: '' }\r\n                    };\r\n\r\n                    // Validate\r\n                    if (scope.resourcePoolId === null) {\r\n                        scope.errorMessage = 'CMRP Id cannot be null';\r\n                        scope.chartConfig.loading = false;\r\n                        return;\r\n                    }\r\n\r\n                    // Get resource pool\r\n                    resourcePoolFactory.getResourcePoolExpanded(scope.resourcePoolId)\r\n                            .then(function (resourcePool) {\r\n\r\n                                if (resourcePool === null) {\r\n                                    scope.errorMessage = 'Invalid CMRP Id';\r\n                                    return;\r\n                                }\r\n\r\n                                // It returns an array, set the first item in the list\r\n                                scope.resourcePool = resourcePool;\r\n\r\n                                if (scope.resourcePool.selectedElement() !== null) {\r\n                                    loadChartData();\r\n                                }\r\n                            })\r\n                            .catch(function () {\r\n                                // TODO scope.errorMessage ?\r\n                            })\r\n                            .finally(function () {\r\n                                scope.chartConfig.loading = false;\r\n                            });\r\n                }\r\n            }\r\n\r\n            function loadChartData() {\r\n\r\n                // Current element\r\n                var element = scope.resourcePool.selectedElement();\r\n                var chartData = null;\r\n\r\n                if (element === null) {\r\n                    return;\r\n                }\r\n\r\n                // Item length check\r\n                if (element.ElementItemSet.length > 20) {\r\n                    return;\r\n                }\r\n\r\n                scope.chartConfig.title = { text: element.Name };\r\n                scope.chartConfig.series = [];\r\n\r\n                if (scope.displayIndexDetails) {\r\n\r\n                    // Pie type\r\n                    scope.chartConfig.title = { text: 'Indexes' };\r\n                    scope.chartConfig.options.chart = { type: 'pie' };\r\n                    scope.chartConfig.options.yAxis.title = { text: '' };\r\n\r\n                    chartData = [];\r\n                    element.elementFieldIndexSet().forEach(function (elementFieldIndex) {\r\n                        var chartItem = new ElementFieldIndexChartItem(elementFieldIndex);\r\n                        chartData.push(chartItem);\r\n                    });\r\n                    scope.chartConfig.series = [{ data: chartData }];\r\n\r\n                } else {\r\n\r\n                    scope.chartConfig.title = { text: element.Name };\r\n\r\n                    // TODO Check this rule?\r\n                    if (element === element.ResourcePool.mainElement() && (element.totalIncome() > 0 || element.directIncomeField() !== null)) {\r\n\r\n                        // Column type\r\n                        scope.chartConfig.options.chart = { type: 'column' };\r\n                        scope.chartConfig.options.yAxis.title = { text: 'Total Income' };\r\n\r\n                        element.ElementItemSet.forEach(function (elementItem) {\r\n                            var chartItem = new ColumnChartItem(elementItem);\r\n                            scope.chartConfig.series.push(chartItem);\r\n                        });\r\n                    } else {\r\n\r\n                        // Pie type\r\n                        scope.chartConfig.options.chart = { type: 'pie' };\r\n                        scope.chartConfig.options.yAxis.title = { text: '' };\r\n\r\n                        chartData = [];\r\n                        element.ElementItemSet.forEach(function (elementItem) {\r\n                            elementItem.ElementCellSet.forEach(function (elementCell) {\r\n                                if (elementCell.ElementField.IndexEnabled) {\r\n                                    var chartItem = new PieChartItem(elementCell);\r\n                                    chartData.push(chartItem);\r\n                                }\r\n                            });\r\n                        });\r\n                        scope.chartConfig.series = [{ data: chartData }];\r\n                    }\r\n                }\r\n            }\r\n\r\n            function resetElementCellNumericValue(cell) {\r\n                userFactory.updateElementCellNumericValue(cell, 'reset');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementCellNumericValueReset', element);\r\n                saveChanges();\r\n            }\r\n\r\n            function resetElementMultiplier(element) {\r\n                userFactory.updateElementMultiplier(element, 'reset');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementMultiplierReset', element);\r\n                saveChanges();\r\n            }\r\n\r\n            function resetElementCellMultiplier(elementCell) {\r\n                userFactory.updateElementCellMultiplier(elementCell, 'reset');\r\n                $rootScope.$broadcast('resourcePoolEditor_elementCellMultiplierReset', element);\r\n                saveChanges();\r\n            }\r\n\r\n            function resetIndexRating(field) {\r\n                userFactory.updateElementFieldIndexRating(field, 'reset');\r\n                saveChanges();\r\n            }\r\n\r\n            function resetResourcePoolRate() {\r\n                userFactory.updateResourcePoolRate(scope.resourcePool, 'reset');\r\n                saveChanges();\r\n            }\r\n\r\n            function saveChanges() {\r\n                resourcePoolFactory.saveChanges(1500)\r\n                    .catch(function (error) {\r\n                        // Conflict (Concurrency exception)\r\n                        if (typeof error.status !== 'undefined' && error.status === '409') {\r\n                            // TODO Try to recover!\r\n                        } else if (typeof error.entityErrors !== 'undefined') {\r\n                            // config.entityErrors = error.entityErrors;\r\n                        }\r\n                    });\r\n            }\r\n\r\n            function saveChangesStart() {\r\n                scope.isSaving = true;\r\n            }\r\n\r\n            function saveChangesCompleted() {\r\n                scope.isSaving = false;\r\n            }\r\n\r\n            // Index Details\r\n            function toggleIndexDetails() {\r\n                scope.displayIndexDetails = !scope.displayIndexDetails;\r\n                loadChartData();\r\n            }\r\n\r\n            function currentUserChanged(event, newUser) {\r\n                initialize(newUser, scope.resourcePoolId);\r\n            }\r\n\r\n            /* Chart objects */\r\n\r\n            // TODO Store these in a better place?\r\n            // TODO Also test these better, by comparing it with resourcePool.selectedElement() property!\r\n            function ColumnChartItem(elementItem) {\r\n                var self = this;\r\n\r\n                Object.defineProperty(self, \"name\", {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: function () {\r\n                        return elementItem.Name;\r\n                    }\r\n                });\r\n\r\n                Object.defineProperty(self, \"data\", {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: function () {\r\n                        return [elementItem.totalIncome()];\r\n                    }\r\n                });\r\n            }\r\n\r\n            function ElementFieldIndexChartItem(elementFieldIndex) {\r\n                var self = this;\r\n\r\n                Object.defineProperty(self, \"name\", {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: function () { return elementFieldIndex.Name; }\r\n                });\r\n\r\n                Object.defineProperty(self, \"y\", {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: function () {\r\n                        var indexRating = elementFieldIndex.indexRating();\r\n                        // TODO Make rounding better, instead of toFixed + number\r\n                        return Number(indexRating.toFixed(2));\r\n                    }\r\n                });\r\n            }\r\n\r\n            function PieChartItem(elementCell) {\r\n                var self = this;\r\n\r\n                Object.defineProperty(self, \"name\", {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: function () {\r\n                        return elementCell.ElementItem.Name;\r\n                    }\r\n                });\r\n\r\n                Object.defineProperty(self, \"y\", {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: function () {\r\n                        var numericValue = elementCell.numericValue();\r\n                        // TODO Make rounding better, instead of toFixed + number\r\n                        return Number(numericValue.toFixed(2));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            templateUrl: '/_system/js/app/directives/resourcePoolEditor/resourcePoolEditor.html?v=0.49.0',\r\n            scope: {\r\n                config: '='\r\n            },\r\n            link: link\r\n        };\r\n    }\r\n})();\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated from a template.\r\n//\r\n//     Manual changes to this file may cause unexpected behavior in your application.\r\n//     Manual changes to this file will be overwritten if the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'resourcePoolFactory';\r\n    angular.module('main')\r\n        .factory(factoryId, ['dataContext', '$rootScope', 'logger', resourcePoolFactory]);\r\n\r\n    function resourcePoolFactory(dataContext, $rootScope, logger) {\r\n\r\n        // Logger\r\n        logger = logger.forSource(factoryId);\r\n\r\n        // To determine whether the data will be fetched from server or local\r\n        var minimumDate = new Date(0);\r\n        var fetchedOn = minimumDate;\r\n\r\n        // Factory methods (alphabetically)\r\n        var factory = {\r\n            createResourcePool: createResourcePool,\r\n            deleteResourcePool: deleteResourcePool,\r\n            getChanges: getChanges,\r\n            getChangesCount: getChangesCount,\r\n            getResourcePoolSet: getResourcePoolSet,\r\n            getResourcePool: getResourcePool,\r\n            hasChanges: hasChanges,\r\n            rejectChanges: rejectChanges,\r\n            saveChanges: saveChanges,\r\n            saveChangesAlt: saveChangesAlt\r\n        };\r\n\r\n        // User logged out\r\n        $rootScope.$on('userFactory_currentUserChanged', function () {\r\n            fetchedOn = minimumDate;\r\n        });\r\n\r\n        return factory;\r\n\r\n        /*** Implementations ***/\r\n\r\n        function createResourcePool(resourcePool) {\r\n            return dataContext.createEntity('ResourcePool', resourcePool);\r\n        }\r\n\r\n        function deleteResourcePool(resourcePool) {\r\n            resourcePool.entityAspect.setDeleted();\r\n        }\r\n\r\n        function getChanges() {\r\n            return dataContext.getChanges();\r\n        }\r\n\r\n        function getChangesCount() {\r\n            return dataContext.getChangesCount();\r\n        }\r\n\r\n        function getResourcePoolSet(forceRefresh) {\r\n            var count;\r\n            if (forceRefresh) {\r\n                if (dataContext.hasChanges()) {\r\n                    count = dataContext.getChangesCount();\r\n                    dataContext.rejectChanges(); // undo all unsaved changes!\r\n                    logger.logWarning('Discarded ' + count + ' pending change(s)', null);\r\n                }\r\n            }\r\n\r\n            var query = breeze.EntityQuery\r\n\t\t\t\t.from('ResourcePool')\r\n\t\t\t\t.expand(['User'])\r\n            ;\r\n\r\n            // Fetch the data from server, in case if it's not fetched earlier or forced\r\n            var fetchFromServer = fetchedOn === minimumDate || forceRefresh;\r\n\r\n            // Prepare the query\r\n            if (fetchFromServer) { // From remote\r\n                query = query.using(breeze.FetchStrategy.FromServer);\r\n                fetchedOn = new Date();\r\n            }\r\n            else { // From local\r\n                query = query.using(breeze.FetchStrategy.FromLocalCache);\r\n            }\r\n\r\n            return dataContext.executeQuery(query)\r\n                .then(success).catch(failed);\r\n\r\n            function success(response) {\r\n                count = response.results.length;\r\n                //logger.logSuccess('Got ' + count + ' resourcePool(s)', response);\r\n\r\n                // Filter out 'temp' resource pools\r\n                var data = [];\r\n                response.results.forEach(function (item) {\r\n                    if (!item.isTemp) {\r\n                        data.push(item);\r\n                    }\r\n                });\r\n\r\n                return data;\r\n            }\r\n\r\n            function failed(error) {\r\n                var message = error.message || 'ResourcePool query failed';\r\n                logger.logError(message, error, true);\r\n            }\r\n        }\r\n\r\n        function getResourcePool(resourcePoolId, forceRefresh) {\r\n            return dataContext.fetchEntityByKey('ResourcePool', resourcePoolId, !forceRefresh)\r\n                .then(success).catch(failed);\r\n\r\n            function success(result) {\r\n                return result.entity;\r\n            }\r\n\r\n            function failed(error) {\r\n                var message = error.message || 'getResourcePool query failed';\r\n                logger.logError(message, error, true);\r\n            }\r\n        }\r\n\r\n        function hasChanges() {\r\n            return dataContext.hasChanges();\r\n        }\r\n\r\n        function rejectChanges() {\r\n            dataContext.rejectChanges();\r\n        }\r\n\r\n        function saveChanges(delay) {\r\n            return dataContext.saveChanges(delay);\r\n        }\r\n\r\n        function saveChangesAlt(resourcePool, delay) {\r\n            return dataContext.saveChangesAlt(resourcePool.getEntities(), delay);\r\n        }\r\n    }\r\n})();\r\n","//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated from a template.\r\n//\r\n//     Manual changes to this file may cause unexpected behavior in your application.\r\n//     Manual changes to this file will be overwritten if the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var factoryId = 'userFactory';\r\n    angular.module('main')\r\n        .factory(factoryId, ['dataContext', '$rootScope', 'logger', userFactory]);\r\n\r\n    function userFactory(dataContext, $rootScope, logger) {\r\n        \r\n\t\t// Logger\r\n\t\tlogger = logger.forSource(factoryId);\r\n\r\n        // To determine whether the data will be fetched from server or local\r\n        var minimumDate = new Date(0);\r\n        var fetchedOn = minimumDate;\r\n\r\n        // Factory methods (alphabetically)\r\n        var factory = {\r\n            createUser: createUser,\r\n            deleteUser: deleteUser,\r\n            getChanges: getChanges,\r\n            getChangesCount: getChangesCount,\r\n            getUserSet: getUserSet,\r\n            getUser: getUser,\r\n            hasChanges: hasChanges,\r\n            rejectChanges: rejectChanges,\r\n            saveChanges: saveChanges,\r\n            saveChangesAlt: saveChangesAlt\r\n        };\r\n\r\n        // User logged out\r\n        $rootScope.$on('userFactory_currentUserChanged', function () {\r\n            fetchedOn = minimumDate;\r\n        });\r\n\r\n        return factory;\r\n\r\n        /*** Implementations ***/\r\n\r\n        function createUser(user) {\r\n            return dataContext.createEntity('Users', user);\r\n        }\r\n\r\n        function deleteUser(user) {\r\n            user.entityAspect.setDeleted();\r\n        }\r\n\r\n        function getChanges() {\r\n            return dataContext.getChanges();\r\n        }\r\n\r\n        function getChangesCount() {\r\n            return dataContext.getChangesCount();\r\n        }\r\n\r\n        function getUserSet(forceRefresh) {\r\n            var count;\r\n            if (forceRefresh) {\r\n                if (dataContext.hasChanges()) {\r\n                    count = dataContext.getChangesCount();\r\n                    dataContext.rejectChanges(); // undo all unsaved changes!\r\n                    logger.logWarning('Discarded ' + count + ' pending change(s)', null);\r\n                }\r\n            }\r\n\r\n            var query = breeze.EntityQuery\r\n\t\t\t\t.from('Users')\r\n            ;\r\n\r\n            // Fetch the data from server, in case if it's not fetched earlier or forced\r\n            var fetchFromServer = fetchedOn === minimumDate || forceRefresh;\r\n\r\n            // Prepare the query\r\n            if (fetchFromServer) { // From remote\r\n                query = query.using(breeze.FetchStrategy.FromServer);\r\n                fetchedOn = new Date();\r\n            }\r\n            else { // From local\r\n                query = query.using(breeze.FetchStrategy.FromLocalCache);\r\n            }\r\n\r\n            return dataContext.executeQuery(query)\r\n                .then(success).catch(failed);\r\n\r\n            function success(response) {\r\n                count = response.results.length;\r\n                //logger.logSuccess('Got ' + count + ' user(s)', response);\r\n                return response.results;\r\n            }\r\n\r\n            function failed(error) {\r\n                var message = error.message || 'User query failed';\r\n                logger.logError(message, error, true);\r\n            }\r\n        }\r\n\r\n        function getUser(userId, forceRefresh) {\r\n            return dataContext.fetchEntityByKey('User', userId, !forceRefresh)\r\n                .then(success).catch(failed);\r\n\r\n            function success(result) {\r\n                return result.entity;\r\n            }\r\n\r\n            function failed(error) {\r\n                var message = error.message || 'getUser query failed';\r\n                logger.logError(message, error, true);\r\n            }\r\n        }\r\n\r\n        function hasChanges() {\r\n            return dataContext.hasChanges();\r\n        }\r\n\r\n        function rejectChanges() {\r\n            dataContext.rejectChanges();\r\n        }\r\n\r\n        function saveChanges(delay) {\r\n            return dataContext.saveChanges(delay);\r\n        }\r\n\r\n        function saveChangesAlt(user, delay) {\r\n\r\n            var entities = [user];\r\n\r\n            // TODO This approach is not good, controller should directly pass 'entities', otherwise factory cannot know whether it should only pass 'parent entity' or with its 'children'?'\r\n            // Compare this with resourcePoolFactory saveChanges, use same approach\r\n            // coni2k - 15 Feb. '16\r\n\r\n            return dataContext.saveChangesAlt(entities, delay);\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'FairShareIndexSampleController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['userFactory', 'logger', FairShareIndexSampleController]);\r\n\r\n    function FairShareIndexSampleController(userFactory, logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var controllerId = 'ResourcePoolRateSampleController';\r\n    angular.module('main')\r\n        .controller(controllerId, ['logger', ResourcePoolRateSampleController]);\r\n\r\n    function ResourcePoolRateSampleController(logger) {\r\n\r\n        logger = logger.forSource(controllerId);\r\n\r\n        var vm = this;\r\n        vm.resourcePoolRate_SampleResourcePoolId = 12;\r\n    }\r\n})();\r\n"],"sourceRoot":"/_system/js/app"}