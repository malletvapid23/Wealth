<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="$(SolutionDir)Framework\T4\EF.Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true;
if (!executeMe)
	return string.Empty;

const string connectionString = @"Server=(LocalDb)\v11.0;Database=WealthEconomyDb;Integrated Security=True;MultipleActiveResultSets=True";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var edmMetadataLoader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
IEnumerable<GlobalItem> itemCollection;
using (var db = new WealthEconomyContext(connectionString))
	itemCollection = edmMetadataLoader.CreateEdmItemCollection(db);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), connectionString))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = typeMapper.GetTypeName(entityType);
	var entityVariable = codeStringGenerator.GetCamelCase(entityTypeName);
	var serviceId = string.Format("{0}Service", entityVariable);
	var primaryKey = entityType.KeyMembers[0];
    var primaryKeyShortTypeName = typeMapper.GetTypeName(primaryKey.TypeUsage);
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);
    var relatedProperties = typeMapper.GetRelatedNavigationProperties(entityType);
	var hasUserId = simpleProperties.Any(property => property.Name == "UserId");

	var outputFileName = string.Format(@"{0}.js", serviceId);

    fileManager.StartNewFile(outputFileName);
#>
<#= codeStringGenerator.WriteHeader() #>
(function () {
    'use strict';

    var serviceId = '<#= serviceId #>';
    angular.module('main')
        .factory(serviceId, ['dataContext', 'logger', <#= serviceId #>]);

    function <#= serviceId #>(dataContext, logger) {
        logger = logger.forSource(serviceId);

        // To determine whether the data will be fecthed from server or local
        var minimumDate = new Date(0);
        var fetchedOn = minimumDate;

        // Service methods (alphabetically)
        var service = {
            create<#= entityTypeName #>: create<#= entityTypeName #>,
            delete<#= entityTypeName #>: delete<#= entityTypeName #>,
            getChanges: getChanges,
            getChangesCount: getChangesCount,
            get<#= entityTypeName #>Set: get<#= entityTypeName #>Set,
            get<#= entityTypeName #>: get<#= entityTypeName #>,
            hasChanges: hasChanges,
            rejectChanges: rejectChanges,
            saveChanges: saveChanges
        };

        return service;

        /*** Implementations ***/

        function create<#= entityTypeName #>(<#= entityVariable #>) {
            return dataContext.manager.createEntity('<#= entityTypeName #>', <#= entityVariable #>);
        }

        function delete<#= entityTypeName #>(<#= entityVariable #>) {
            <#= entityVariable #>.entityAspect.setDeleted();
        }

        function getChanges() {
            return dataContext.getChanges();
        }

        function getChangesCount() {
            return dataContext.getChangesCount();
        }

<# if (hasUserId) { #>
        function get<#= entityTypeName #>Set(userId, forceRefresh) {
<# } else { #>
        function get<#= entityTypeName #>Set(forceRefresh) {
<# } #>

            var count;
            if (forceRefresh) {
                if (dataContext.hasChanges()) {
                    count = dataContext.getChangesCount();
                    dataContext.rejectChanges(); // undo all unsaved changes!
                    logger.logWarning('Discarded ' + count + ' pending change(s)', null, true);
                }
            }

            var query = breeze.EntityQuery
				.from('<#= entityTypeName #>')
<# if (relatedProperties.Any()) {
	var expandQueryJoin = String.Join(", ", relatedProperties.Select(property => string.Format("'{0}'", property.Name)));
	var expandQuery = string.Format(".expand([{0}])", expandQueryJoin); #>
				<#= expandQuery #>
<# } #>
<# if (hasUserId) { #>
				.where('UserId', '==', userId)
<# } #>
            ;

            // Fetch the data from server, in case if it's not fetched earlier or forced
            var fetchFromServer = fetchedOn === minimumDate || forceRefresh;

            // Prepare the query
            if (fetchFromServer) { // From remote
                query = query.using(breeze.FetchStrategy.FromServer)
                fetchedOn = new Date();
            }
            else { // From local
                query = query.using(breeze.FetchStrategy.FromLocalCache)
            }

            return dataContext.manager.executeQuery(query)
                .then(success).catch(failed);

            function success(response) {
                count = response.results.length;
                logger.logSuccess('Got ' + count + ' <#= entityVariable #>(s)', response, true);
                return response.results;
            }

            function failed(error) {
                var message = error.message || '<#= entityTypeName #> query failed';
                logger.logError(message, error, true);
            }
        }

        function get<#= entityTypeName #>(<#= entityVariable #>Id, forceRefresh) {
            return dataContext.manager.fetchEntityByKey('<#= entityTypeName #>', <#= entityVariable #>Id, !forceRefresh)
                .then(success).catch(failed);

            function success(result) {
                return result.entity;
            }

            function failed(error) {
                var message = error.message || 'get<#= entityTypeName #> query failed';
                logger.logError(message, error, true);
            }
        }

        function hasChanges() {
            return dataContext.hasChanges();
        }

        function rejectChanges() {
            dataContext.rejectChanges();
        }

        function saveChanges() {
            return dataContext.saveChanges();
        }
    }
})();
<#
}

fileManager.Process();

#>
