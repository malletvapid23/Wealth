<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="$(SolutionDir)Framework\T4\EF.Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true;
if (!executeMe)
	return string.Empty;

const string connectionString = @"Server=(LocalDb)\v11.0;Database=WealthEconomyDb;Integrated Security=True;MultipleActiveResultSets=True";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var edmMetadataLoader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
IEnumerable<GlobalItem> itemCollection;
using (var db = new WealthEconomyContext(connectionString))
	itemCollection = edmMetadataLoader.CreateEdmItemCollection(db);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), connectionString))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = typeMapper.GetTypeName(entityType);
	var entityVariable = codeStringGenerator.GetCamelCase(entityTypeName);
	var entitySetName = string.Format("{0}Set", entityVariable);
	var controllerId = string.Format("{0}EditController", entityVariable);
	var serviceId = string.Format("{0}Service", entityVariable);
	var primaryKey = entityType.KeyMembers[0];
    var primaryKeyShortTypeName = typeMapper.GetTypeName(primaryKey.TypeUsage);
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);
    var relatedProperties = typeMapper.GetRelatedNavigationProperties(entityType);
	var outputFileName = string.Format(@"{0}.js", controllerId);

    fileManager.StartNewFile(outputFileName);
#>
<#= codeStringGenerator.WriteHeader() #>
(function () {
    'use strict';

    var controllerId = '<#= controllerId #>';
    angular.module('main')
        .controller(controllerId, ['<#= serviceId #>',
<#
	foreach (var property in relatedProperties)
	{
		var relatedVariable = codeStringGenerator.GetCamelCase(property.Name);
		var relatedServiceId = string.Format("{0}Service", relatedVariable);
#>
            '<#= relatedServiceId #>',
<# } #>
            'logger',
            '$location',
            '$routeParams',
            <#= controllerId #>]);

    function <#= controllerId #>(<#= serviceId #>,
<#
	foreach (var property in relatedProperties)
	{
		var relatedVariable = codeStringGenerator.GetCamelCase(property.Name);
		var relatedServiceId = string.Format("{0}Service", relatedVariable);
#>
		<#= relatedServiceId #>,
<# } #>
		logger,
		$location,
		$routeParams) {
        logger = logger.forSource(controllerId);

        var isNew = $location.path() === '/<#= entityTypeName #>/new';
        var isSaving = false;

        // Controller methods (alphabetically)
        var vm = this;
<#
	foreach (var property in relatedProperties)
	{
		var relatedVariable = codeStringGenerator.GetCamelCase(property.Name);
		var relatedSetName = string.Format("{0}Set", relatedVariable);
#>
        vm.<#= relatedSetName #> = [];
<# } #>
        vm.cancelChanges = cancelChanges;
        vm.isSaveDisabled = isSaveDisabled;
        vm.<#= entityVariable #> = null;
        vm.saveChanges = saveChanges;
        vm.hasChanges = hasChanges;

        initialize();

        /*** Implementations ***/

        function cancelChanges() {

            $location.path('/<#= entityTypeName #>/');

            if (<#= serviceId #>.hasChanges()) {
                <#= serviceId #>.rejectChanges();
                logWarning('Discarded pending change(s)', null, true);
            }
        }

        function hasChanges() {
            return <#= serviceId #>.hasChanges();
        }

        function initialize() {

<#
	foreach (var property in relatedProperties)
	{
		var relatedVariable = codeStringGenerator.GetCamelCase(property.Name);
		var relatedServiceId = string.Format("{0}Service", relatedVariable);
		var relatedSetGetMethod = string.Format("get{0}Set", property.Name);
		var relatedSetName = string.Format("{0}Set", relatedVariable);
#>
            <#= relatedServiceId #>.<#= relatedSetGetMethod #>(false)
                .then(function (data) {
                    vm.<#= relatedSetName #> = data;
                });

            // TODO Catch?

<# } #>
            if (isNew) {
                // TODO Only for development, create test entity ?!
            }
            else {
                <#= serviceId #>.get<#= entityTypeName #>($routeParams.Id)
                    .then(function (data) {
                        vm.<#= entityVariable #> = data;
                    })
                    .catch(function (error) {
                        logger.logError("Boooo, we failed: " + error.message, null, true);
                        // Todo: more sophisticated recovery. 
                        // Here we just blew it all away and start over
                        // refresh();
                    });
            }
        };

        function isSaveDisabled() {
            return isSaving ||
                (!isNew && !<#= serviceId #>.hasChanges());
        }

        function saveChanges() {

            if (isNew) {
                <#= serviceId #>.create<#= entityTypeName #>(vm.<#= entityVariable #>);
            }

            isSaving = true;
            return <#= serviceId #>.saveChanges()
                .then(function () {
                    logger.logSuccess("Hooray we saved", null, true);
                    $location.path('/<#= entityTypeName #>/');
                })
                .catch(function (error) {
                    logger.logError("Boooo, we failed: " + error.message, null, true);
                    // Todo: more sophisticated recovery. 
                    // Here we just blew it all away and start over
                    // refresh();
                })
                .finally(function () {
                    isSaving = false;
                });
        }
    };
})();
<#
}

fileManager.Process();

#>
