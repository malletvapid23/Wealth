/*
EntityFramework.dll + EntityFramework.SqlServer.dll files under
C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE folder
were replaced with Entity Framework 6.1 versions.
v0.10.9
SH - 09 May '14
*/


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseLicenseController : BaseController
    {
        public BaseLicenseController()
		{
			MainUnitOfWork = new LicenseUnitOfWork();		
		}

		protected LicenseUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/License
        [Queryable]
        public virtual IQueryable<License> Get()
        {
			var list = MainUnitOfWork.AllLive;
            return list;
        }

        // GET odata/License(5)
        [Queryable]
        public virtual SingleResult<License> Get([FromODataUri] short key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(license => license.Id == key));
        }

        // PUT odata/License(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] short key, License license)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != license.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(license);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(license);
        }

        // POST odata/License
        public virtual async Task<IHttpActionResult> Post(License license)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(license);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(license.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(license);
        }

        // PATCH odata/License(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] short key, Delta<License> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var license = await MainUnitOfWork.FindAsync(key);
            if (license == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!license.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(license);
            await MainUnitOfWork.UpdateAsync(license);

            return Ok(license);
        }

        // DELETE odata/License(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] short key)
        {
            var license = await MainUnitOfWork.FindAsync(key);
            if (license == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(license.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class LicenseController : BaseLicenseController
    {
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseOrganizationController : BaseController
    {
        public BaseOrganizationController()
		{
			MainUnitOfWork = new OrganizationUnitOfWork();		
		}

		protected OrganizationUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/Organization
        [Queryable]
        public virtual IQueryable<Organization> Get()
        {
			var list = MainUnitOfWork.AllLive;
            return list;
        }

        // GET odata/Organization(5)
        [Queryable]
        public virtual SingleResult<Organization> Get([FromODataUri] int key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(organization => organization.Id == key));
        }

        // PUT odata/Organization(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] int key, Organization organization)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != organization.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(organization);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(organization);
        }

        // POST odata/Organization
        public virtual async Task<IHttpActionResult> Post(Organization organization)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(organization);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(organization.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(organization);
        }

        // PATCH odata/Organization(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] int key, Delta<Organization> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var organization = await MainUnitOfWork.FindAsync(key);
            if (organization == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!organization.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(organization);
            await MainUnitOfWork.UpdateAsync(organization);

            return Ok(organization);
        }

        // DELETE odata/Organization(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] int key)
        {
            var organization = await MainUnitOfWork.FindAsync(key);
            if (organization == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(organization.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class OrganizationController : BaseOrganizationController
    {
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseResourcePoolController : BaseController
    {
        public BaseResourcePoolController()
		{
			MainUnitOfWork = new ResourcePoolUnitOfWork();		
		}

		protected ResourcePoolUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/ResourcePool
        [Queryable]
        public virtual IQueryable<ResourcePool> Get()
        {
			var list = MainUnitOfWork.AllLive;
            return list;
        }

        // GET odata/ResourcePool(5)
        [Queryable]
        public virtual SingleResult<ResourcePool> Get([FromODataUri] int key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(resourcePool => resourcePool.Id == key));
        }

        // PUT odata/ResourcePool(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] int key, ResourcePool resourcePool)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != resourcePool.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(resourcePool);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(resourcePool);
        }

        // POST odata/ResourcePool
        public virtual async Task<IHttpActionResult> Post(ResourcePool resourcePool)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(resourcePool);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(resourcePool.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(resourcePool);
        }

        // PATCH odata/ResourcePool(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] int key, Delta<ResourcePool> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var resourcePool = await MainUnitOfWork.FindAsync(key);
            if (resourcePool == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!resourcePool.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(resourcePool);
            await MainUnitOfWork.UpdateAsync(resourcePool);

            return Ok(resourcePool);
        }

        // DELETE odata/ResourcePool(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] int key)
        {
            var resourcePool = await MainUnitOfWork.FindAsync(key);
            if (resourcePool == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(resourcePool.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class ResourcePoolController : BaseResourcePoolController
    {
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseSectorController : BaseController
    {
        public BaseSectorController()
		{
			MainUnitOfWork = new SectorUnitOfWork();		
		}

		protected SectorUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/Sector
        [Queryable]
        public virtual IQueryable<Sector> Get()
        {
			var list = MainUnitOfWork.AllLive;
            return list;
        }

        // GET odata/Sector(5)
        [Queryable]
        public virtual SingleResult<Sector> Get([FromODataUri] short key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(sector => sector.Id == key));
        }

        // PUT odata/Sector(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] short key, Sector sector)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != sector.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(sector);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(sector);
        }

        // POST odata/Sector
        public virtual async Task<IHttpActionResult> Post(Sector sector)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(sector);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(sector.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(sector);
        }

        // PATCH odata/Sector(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] short key, Delta<Sector> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var sector = await MainUnitOfWork.FindAsync(key);
            if (sector == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!sector.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(sector);
            await MainUnitOfWork.UpdateAsync(sector);

            return Ok(sector);
        }

        // DELETE odata/Sector(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] short key)
        {
            var sector = await MainUnitOfWork.FindAsync(key);
            if (sector == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(sector.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class SectorController : BaseSectorController
    {
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseUserController : BaseController
    {
        public BaseUserController()
		{
			MainUnitOfWork = new UserUnitOfWork();		
		}

		protected UserUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/User
        [Queryable]
        public virtual IQueryable<User> Get()
        {
			var list = MainUnitOfWork.AllLive;
            return list;
        }

        // GET odata/User(5)
        [Queryable]
        public virtual SingleResult<User> Get([FromODataUri] int key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(user => user.Id == key));
        }

        // PUT odata/User(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] int key, User user)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != user.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(user);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(user);
        }

        // POST odata/User
        public virtual async Task<IHttpActionResult> Post(User user)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(user);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(user.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(user);
        }

        // PATCH odata/User(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] int key, Delta<User> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var user = await MainUnitOfWork.FindAsync(key);
            if (user == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!user.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(user);
            await MainUnitOfWork.UpdateAsync(user);

            return Ok(user);
        }

        // DELETE odata/User(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] int key)
        {
            var user = await MainUnitOfWork.FindAsync(key);
            if (user == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(user.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class UserController : BaseUserController
    {
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseUserLicenseRatingController : BaseController
    {
        public BaseUserLicenseRatingController()
		{
			MainUnitOfWork = new UserLicenseRatingUnitOfWork();		
		}

		protected UserLicenseRatingUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/UserLicenseRating
        [Queryable]
        public virtual IQueryable<UserLicenseRating> Get()
        {
			var list = MainUnitOfWork.AllLive;
			using (var userUnitOfWork = new UserUnitOfWork())
			    list = list.Where(item => item.UserId == ApplicationUser.Id);
            return list;
        }

        // GET odata/UserLicenseRating(5)
        [Queryable]
        public virtual SingleResult<UserLicenseRating> Get([FromODataUri] int key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(userLicenseRating => userLicenseRating.Id == key));
        }

        // PUT odata/UserLicenseRating(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] int key, UserLicenseRating userLicenseRating)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != userLicenseRating.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(userLicenseRating);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(userLicenseRating);
        }

        // POST odata/UserLicenseRating
        public virtual async Task<IHttpActionResult> Post(UserLicenseRating userLicenseRating)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(userLicenseRating);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(userLicenseRating.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(userLicenseRating);
        }

        // PATCH odata/UserLicenseRating(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] int key, Delta<UserLicenseRating> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var userLicenseRating = await MainUnitOfWork.FindAsync(key);
            if (userLicenseRating == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!userLicenseRating.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(userLicenseRating);
            await MainUnitOfWork.UpdateAsync(userLicenseRating);

            return Ok(userLicenseRating);
        }

        // DELETE odata/UserLicenseRating(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] int key)
        {
            var userLicenseRating = await MainUnitOfWork.FindAsync(key);
            if (userLicenseRating == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(userLicenseRating.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class UserLicenseRatingController : BaseUserLicenseRatingController
    {
	}
}
