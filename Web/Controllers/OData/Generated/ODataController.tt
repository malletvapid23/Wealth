<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ include file="..\..\..\..\DataObjects\Utility.ttinclude"#><#@ 
 output extension=".cs"#><#

// To be able to control whether it's going to be executed
var executeMe = true;
if (!executeMe)
	return string.Empty;

const string inputFile = @"..\..\..\..\DataObjects\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}

foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
{
	// Variables
	var entitySetName = entitySet.Name;
	var entitySetVariable = entitySetName.ToLowerInvariant();
	var entity = entitySet.ElementType;
	var entityName = typeMapper.GetTypeName(entity);
	var entityVariable = entityName.ToLowerInvariant();
	var controllerName = string.Format("{0}Controller", entityName);
    var entityDtoName = string.Format("{0}Dto", entityName);
    var entityDtoVariable = entityDtoName.ToLowerInvariant();
    var unitOfWorkName = string.Format("{0}UnitOfWork", entityName);	
	var primaryKeyName = entity.KeyMembers[0];
    var primaryKeyShortTypeName = typeMapper.GetTypeName(primaryKeyName.TypeUsage);
	var routePrefix = string.Format("odata/{0}", entityName);
	
    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    var relatedProperties = typeMapper.GetRelatedNavigationProperties(entity);
	
	var bindAttributeIncludeText = string.Join(",", simpleProperties);
    var bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", bindAttributeIncludeText);

	// TODO This needs to be done through enums types?!
	var hasUserAccountTypeId = simpleProperties.Any(property => property.Name == "UserAccountTypeId");

	var outputFileName = string.Format(@"{0}.cs", controllerName);

    fileManager.StartNewFile(outputFileName);
#>
namespace Web.Controllers.OData
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;
    using System.Web.Http.OData.Routing;
    using BusinessObjects;
    using DataObjects;
    using Facade;

    public partial class <#= controllerName #> : ODataController
    {
        <#= unitOfWorkName #> unitOfWork = new <#= unitOfWorkName #>();

        // GET <#= routePrefix #>
        [Queryable]
        public IQueryable<<#= entityName #>> Get<#= entityName #>()
        {
            return unitOfWork.AllLive;
        }

        // GET <#= routePrefix #>(5)
        [Queryable]
        public SingleResult<<#= entityName #>> Get<#= entityName #>([FromODataUri] <#= primaryKeyShortTypeName #> key)
        {
            return SingleResult.Create(unitOfWork.AllLive.Where(<#= entityVariable #> => <#= entityVariable #>.<#= primaryKeyName #> == key));
        }

        // PUT <#= routePrefix #>(5)
        public async Task<IHttpActionResult> Put([FromODataUri] <#= primaryKeyShortTypeName #> key, <#= entityName #> <#= entityVariable #>)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != <#= entityVariable #>.<#= primaryKeyName #>)
            {
                return BadRequest();
            }

            unitOfWork.Update(<#= entityVariable #>);
            try
            {
                await unitOfWork.SaveAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!unitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return Updated(<#= entityVariable #>);
        }

        // POST <#= routePrefix #>
        public async Task<IHttpActionResult> Post(<#= entityName #> <#= entityVariable #>)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            unitOfWork.Insert(<#= entityVariable #>);

            try
            {
                await unitOfWork.SaveAsync();
            }
            catch (DbUpdateException)
            {
                if (unitOfWork.Exists(<#= entityVariable #>.<#= primaryKeyName #>))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(<#= entityVariable #>);
        }

        // PATCH <#= routePrefix #>(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public async Task<IHttpActionResult> Patch([FromODataUri] <#= primaryKeyShortTypeName #> key, Delta<<#= entityName #>> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            <#= entityName #> <#= entityVariable #> = await unitOfWork.FindAsync(key);
            if (<#= entityVariable #> == null)
            {
                return NotFound();
            }

            patch.Patch(<#= entityVariable #>);
            unitOfWork.Update(<#= entityVariable #>);

            try
            {
                await unitOfWork.SaveAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!unitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return Updated(<#= entityVariable #>);
        }

        // DELETE <#= routePrefix #>(5)
        public async Task<IHttpActionResult> Delete([FromODataUri] <#= primaryKeyShortTypeName #> key)
        {
            <#= entityName #> <#= entityVariable #> = await unitOfWork.FindAsync(key);
            if (<#= entityVariable #> == null)
            {
                return NotFound();
            }

            unitOfWork.Delete(<#= entityVariable #>.<#= primaryKeyName #>);
            await unitOfWork.SaveAsync();

            return StatusCode(HttpStatusCode.NoContent);
        }
    }
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        // PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        // PopIndent();
#>
}
<#+
    }
}
#>
