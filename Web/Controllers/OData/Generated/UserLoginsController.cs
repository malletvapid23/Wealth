//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace forCrowd.WealthEconomy.Web.Controllers.OData
{
    using forCrowd.WealthEconomy.BusinessObjects;
    using forCrowd.WealthEconomy.Facade;
    using Microsoft.AspNet.Identity;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;
    using Web.Controllers.Extensions;

    public abstract class BaseUserLoginsController : BaseODataController
    {
        public BaseUserLoginsController()
		{
			MainUnitOfWork = new UserLoginUnitOfWork();		
		}

		protected UserLoginUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/UserLogin
        //[Queryable]
        public virtual IQueryable<UserLogin> Get()
        {
			var userId = this.GetCurrentUserId();
			if (!userId.HasValue)
                throw new HttpResponseException(HttpStatusCode.Unauthorized);	

			var list = MainUnitOfWork.AllLive;
			list = list.Where(item => item.UserId == userId.Value);
            return list;
        }

        // GET odata/UserLogin(5)
        //[Queryable]
        public virtual SingleResult<UserLogin> Get([FromODataUri] string providerKey)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(userLogin => userLogin.ProviderKey == providerKey));
        }

        // PUT odata/UserLogin(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] string providerKey, UserLogin userLogin)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (providerKey != userLogin.ProviderKey)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(userLogin);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(providerKey))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(userLogin);
        }

        // POST odata/UserLogin
        public virtual async Task<IHttpActionResult> Post(UserLogin userLogin)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(userLogin);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(userLogin.ProviderKey))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(userLogin);
        }

        // PATCH odata/UserLogin(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] string providerKey, Delta<UserLogin> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var userLogin = await MainUnitOfWork.AllLive.SingleOrDefaultAsync(item => item.ProviderKey == providerKey);
            if (userLogin == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();

            // TODO How is passed ModelState.IsValid?
            if (patchEntity.RowVersion == null)
                throw new InvalidOperationException("RowVersion property of the entity cannot be null");

            if (!userLogin.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(userLogin);
            await MainUnitOfWork.UpdateAsync(userLogin);

            return Ok(userLogin);
        }

        // DELETE odata/UserLogin(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] string providerKey)
        {
            var userLogin = await MainUnitOfWork.AllLive.SingleOrDefaultAsync(item => item.ProviderKey == providerKey);
            if (userLogin == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(userLogin.ProviderKey);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class UserLoginsController : BaseUserLoginsController
    {
	}
}
