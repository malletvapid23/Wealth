//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseUserResourcePoolIndexElementItemController : BaseODataController
    {
        public BaseUserResourcePoolIndexElementItemController()
		{
			MainUnitOfWork = new UserResourcePoolIndexElementItemUnitOfWork();		
		}

		protected UserResourcePoolIndexElementItemUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/UserResourcePoolIndexElementItem
        [Queryable]
        public virtual IQueryable<UserResourcePoolIndexElementItem> Get()
        {
			var list = MainUnitOfWork.AllLive;
            return list;
        }

        // GET odata/UserResourcePoolIndexElementItem(5)
        [Queryable]
        public virtual SingleResult<UserResourcePoolIndexElementItem> Get([FromODataUri] int key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(userResourcePoolIndexElementItem => userResourcePoolIndexElementItem.Id == key));
        }

        // PUT odata/UserResourcePoolIndexElementItem(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] int key, UserResourcePoolIndexElementItem userResourcePoolIndexElementItem)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != userResourcePoolIndexElementItem.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(userResourcePoolIndexElementItem);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(userResourcePoolIndexElementItem);
        }

        // POST odata/UserResourcePoolIndexElementItem
        public virtual async Task<IHttpActionResult> Post(UserResourcePoolIndexElementItem userResourcePoolIndexElementItem)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(userResourcePoolIndexElementItem);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(userResourcePoolIndexElementItem.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(userResourcePoolIndexElementItem);
        }

        // PATCH odata/UserResourcePoolIndexElementItem(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] int key, Delta<UserResourcePoolIndexElementItem> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var userResourcePoolIndexElementItem = await MainUnitOfWork.FindAsync(key);
            if (userResourcePoolIndexElementItem == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!userResourcePoolIndexElementItem.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(userResourcePoolIndexElementItem);
            await MainUnitOfWork.UpdateAsync(userResourcePoolIndexElementItem);

            return Ok(userResourcePoolIndexElementItem);
        }

        // DELETE odata/UserResourcePoolIndexElementItem(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] int key)
        {
            var userResourcePoolIndexElementItem = await MainUnitOfWork.FindAsync(key);
            if (userResourcePoolIndexElementItem == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(userResourcePoolIndexElementItem.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class UserResourcePoolIndexElementItemController : BaseUserResourcePoolIndexElementItemController
    {
	}
}
