//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Controllers.OData
{
    using BusinessObjects;
    using Facade;
    using Microsoft.AspNet.Identity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;

    public abstract class BaseUserElementFieldIndexController : BaseODataController
    {
        public BaseUserElementFieldIndexController()
		{
			MainUnitOfWork = new UserElementFieldIndexUnitOfWork();		
		}

		protected UserElementFieldIndexUnitOfWork MainUnitOfWork { get; private set; }

        // GET odata/UserElementFieldIndex
        //[Queryable]
        public virtual IQueryable<UserElementFieldIndex> Get()
        {
			var list = MainUnitOfWork.AllLive;
            return list;
        }

        // GET odata/UserElementFieldIndex(5)
        //[Queryable]
        public virtual SingleResult<UserElementFieldIndex> Get([FromODataUri] int key)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(userElementFieldIndex => userElementFieldIndex.Id == key));
        }

        // PUT odata/UserElementFieldIndex(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] int key, UserElementFieldIndex userElementFieldIndex)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != userElementFieldIndex.Id)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(userElementFieldIndex);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(userElementFieldIndex);
        }

        // POST odata/UserElementFieldIndex
        public virtual async Task<IHttpActionResult> Post(UserElementFieldIndex userElementFieldIndex)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(userElementFieldIndex);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(userElementFieldIndex.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(userElementFieldIndex);
        }

        // PATCH odata/UserElementFieldIndex(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] int key, Delta<UserElementFieldIndex> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var userElementFieldIndex = await MainUnitOfWork.FindAsync(key);
            if (userElementFieldIndex == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();
            if (!userElementFieldIndex.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(userElementFieldIndex);
            await MainUnitOfWork.UpdateAsync(userElementFieldIndex);

            return Ok(userElementFieldIndex);
        }

        // DELETE odata/UserElementFieldIndex(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] int key)
        {
            var userElementFieldIndex = await MainUnitOfWork.FindAsync(key);
            if (userElementFieldIndex == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(userElementFieldIndex.Id);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class UserElementFieldIndexController : BaseUserElementFieldIndexController
    {
	}
}
