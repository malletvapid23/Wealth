<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="System.ComponentModel.DataAnnotations"#>
<#@ assembly name="$(SolutionDir)BusinessObjects\bin\Debug\BusinessObjects.dll"#>
<#@ assembly name="$(SolutionDir)DataObjects\bin\Debug\DataObjects.dll"#>
<#@ import namespace="System.ComponentModel.DataAnnotations"#>
<#@ import namespace="BusinessObjects"#>
<#@ import namespace="BusinessObjects.Metadata.Attributes"#>
<#@ import namespace="DataObjects"#>
<#@ include file="$(SolutionDir)DataObjects\EF6.Utility.ttinclude"#>
<#@ include file="$(SolutionDir)DataObjects\Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true;
if (!executeMe)
	return string.Empty;

const string connectionString = @"Server=(LocalDb)\v11.0;Database=WealthEconomyDb;Integrated Security=True;MultipleActiveResultSets=True";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var edmMetadataLoader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
IEnumerable<GlobalItem> itemCollection;
using (var db = new WealthEconomyEntities(connectionString))
	itemCollection = edmMetadataLoader.CreateEdmItemCollection(db);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), connectionString))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = typeMapper.GetTypeName(entityType);
	var entityVariable = codeStringGenerator.GetCamelCase(entityTypeName);
	var entitySetName = string.Format("{0}Set", entityVariable);
	var entityDeleteMethod = string.Format("delete{0}", entityTypeName);
	var primaryKey = entityType.KeyMembers[0];
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);
	var metadataProperties = typeMapper.GetMetadataProperties(entityTypeName);
	var outputFileName = string.Format(@"{0}List.html", entityVariable);

	fileManager.StartNewFile(outputFileName);
#>
<!--
<#= codeStringGenerator.WriteHeader() #>-->
<h2>List</h2>
<p>
    <a href="#/<#= entityTypeName #>/new">Create New</a>
</p>
<table class="table">
    <tr>
<#
    foreach (var property in simpleProperties)
    {
		// Get metadata property
		var metadataProperty = metadataProperties.SingleOrDefault(p => p.Name == property.Name);

		// Display the property?
		var displayOnListAttribute = typeMapper.GetAttribute<DisplayOnListViewAttribute>(metadataProperty);
		if (displayOnListAttribute != null && !displayOnListAttribute.Value)
			continue;
#>
    <th>
        <#= codeStringGenerator.GetPropertyTitle(property) #>
    </th>
<#
    }
#>
        <th></th>
    </tr>
    <tr data-ng-repeat="<#= entityVariable #> in vm.<#= entitySetName #>">
<#
    foreach (var property in simpleProperties)
    {
		var metadataProperty = metadataProperties.SingleOrDefault(p => p.Name == property.Name);

		var displayOnListAttribute = typeMapper.GetAttribute<DisplayOnListViewAttribute>(metadataProperty);
		if (displayOnListAttribute != null && !displayOnListAttribute.Value)
			continue;
#>
        <td>
            {{ <#= GetPropertyPath(property, typeMapper, codeStringGenerator) #> }}
        </td>
<#
    }
#>
        <td>
            <a href="#/<#= entityTypeName #>/edit/{{ <#= entityVariable #>.<#= primaryKey #> }}">Edit</a> |
            <a href="" data-ng-click="vm.<#= entityDeleteMethod #>(<#= entityVariable #>)">
                Delete
            </a>
        </td>
    </tr>
</table>
<#
}

fileManager.Process();

#>

<#+

string GetPropertyPath(EdmProperty property, TypeMapper typeMapper, CodeStringGenerator codeStringGenerator)
{
	// Get declaring type
	var declaringType = (EntityType)((EdmMember)property).DeclaringType;
	var declaringTypeName = typeMapper.GetTypeName(declaringType);
	var declaringTypeVariable = codeStringGenerator.GetCamelCase(declaringTypeName);

	// 1. Property name itself is the default one
	var propertyPath = string.Format("{0}.{1}", declaringTypeVariable, property.Name); 

	// Is navigation property?
	var navigationProperties = typeMapper.GetRelatedNavigationProperties(declaringType);
	var navigationProperty = navigationProperties.SingleOrDefault(related => ((AssociationType)related.RelationshipType)
		.Constraint
		.ToProperties
		.Any(constraint => constraint.Name == property.Name));

	if (navigationProperty != null)
    {
		// Check DefaultProperty attribute of the related entity
		var relatedEntityType = (EntityType)((RefType)navigationProperty.ToEndMember.TypeUsage.EdmType).ElementType;
		var relatedEntityTypeName = typeMapper.GetTypeName(relatedEntityType);
		var relatedEntityMetadataType = typeMapper.GetMetadataType(relatedEntityTypeName);
		var defaultPropertyAttribute = typeMapper.GetAttribute<DefaultPropertyAttribute>(relatedEntityMetadataType);

		// 2. Use the value of DefaultProperty attribute of the related entity
		if (defaultPropertyAttribute != null)
			propertyPath = string.Format("{0}.{1}.{2}", declaringTypeVariable, relatedEntityTypeName, defaultPropertyAttribute.Value);
    }

	return propertyPath;
}

#>