<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ include file="..\..\..\DataObjects\Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true;
if (!executeMe)
	return string.Empty;

const string inputFile = @"..\..\..\DataObjects\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = typeMapper.GetTypeName(entityType);
	var entityVariable = codeStringGenerator.GetCamelCase(entityTypeName);
	var entitySetName = string.Format("{0}Set", entityVariable);
	var entityDeleteMethod = string.Format("delete{0}", entityTypeName);
	var primaryKey = entityType.KeyMembers[0];
    var primaryKeyShortTypeName = typeMapper.GetTypeName(primaryKey.TypeUsage);
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);
    var relatedProperties = typeMapper.GetRelatedNavigationProperties(entityType);
	var outputFileName = string.Format(@"{0}List.html", entityVariable);

    fileManager.StartNewFile(outputFileName);
#>
<!--
<#= codeStringGenerator.WriteHeader() #>-->
<h2>List</h2>
<p>
    <a href="#/<#= entityTypeName #>/new">Create New</a>
</p>
<table class="table">
    <tr>
<#
    foreach (var property in simpleProperties)
    {
		if (property.MetadataProperties.Any(p => p.Name == "http://tempuri.org/EdmCustomSchema.xsd:DisplayOnListView")
			&& !bool.Parse(property.MetadataProperties["http://tempuri.org/EdmCustomSchema.xsd:DisplayOnListView"].Value.ToString()))
			continue;
		
		// Check foreign key
		var relatedProperty = relatedProperties.SingleOrDefault(related => ((AssociationType)related.RelationshipType)
			.Constraint
			.ToProperties
			.Any(constraint => constraint.Name == property.Name));

		var displayName = string.Empty;
		
		if (relatedProperty == null)
        {
			displayName = property.Name;

			if (property.MetadataProperties.Any(p => p.Name == "http://tempuri.org/EdmCustomSchema.xsd:DisplayName"))
				displayName = property.MetadataProperties["http://tempuri.org/EdmCustomSchema.xsd:DisplayName"].Value.ToString();
		}
		else
        {
			var relatedEntityType = (EntityType)((RefType)relatedProperty.ToEndMember.TypeUsage.EdmType).ElementType;
			
			displayName = typeMapper.GetTypeName(relatedEntityType);
		
			// Default property
			var relatedDefaultPropertyName = string.Empty;

			if (relatedEntityType.MetadataProperties.Any(p => p.Name == "http://tempuri.org/EdmCustomSchema.xsd:DefaultProperty"))
				relatedDefaultPropertyName = relatedEntityType.MetadataProperties["http://tempuri.org/EdmCustomSchema.xsd:DefaultProperty"].Value.ToString();

			if (relatedEntityType.MetadataProperties.Any(p => p.Name == "http://tempuri.org/EdmCustomSchema.xsd:DefaultPropertyDisplayName"))
            {
				displayName = relatedEntityType.MetadataProperties["http://tempuri.org/EdmCustomSchema.xsd:DefaultPropertyDisplayName"].Value.ToString();
            }
			else
            {
				if (relatedEntityType.Properties.Any(p => p.Name == relatedDefaultPropertyName))
				{
					var relatedDefaultProperty = relatedEntityType.Properties[relatedDefaultPropertyName];

					displayName = relatedDefaultProperty.Name;

					if (relatedDefaultProperty.MetadataProperties.Any(p => p.Name == "http://tempuri.org/EdmCustomSchema.xsd:DisplayName"))
						displayName = relatedDefaultProperty.MetadataProperties["http://tempuri.org/EdmCustomSchema.xsd:DisplayName"].Value.ToString();
				}
            }
        }
#>
    <th>
        <#= displayName #>
    </th>
<#
    }
#>
        <th></th>
    </tr>
    <tr data-ng-repeat="<#= entityVariable #> in vm.<#= entitySetName #>">
<#
    foreach (var property in simpleProperties)
    {
		if (property.MetadataProperties.Any(p => p.Name == "http://tempuri.org/EdmCustomSchema.xsd:DisplayOnListView")
			&& !bool.Parse(property.MetadataProperties["http://tempuri.org/EdmCustomSchema.xsd:DisplayOnListView"].Value.ToString()))
			continue;

		// Check foreign key
		var relatedProperty = relatedProperties.SingleOrDefault(related => ((AssociationType)related.RelationshipType)
			.Constraint
			.ToProperties
			.Any(constraint => constraint.Name == property.Name));

		var displayValue = string.Empty;
		
		if (relatedProperty == null)
        {
			displayValue = string.Format("{0}.{1}", entityVariable, property.Name);
		}
		else
        {
			var relatedEntityType = (EntityType)((RefType)relatedProperty.ToEndMember.TypeUsage.EdmType).ElementType;
			var relatedEntityTypeName = typeMapper.GetTypeName(relatedEntityType);
			var relatedDefaultProperty = string.Empty;
			
			if (relatedEntityType.MetadataProperties.Any(p => p.Name == "http://tempuri.org/EdmCustomSchema.xsd:DefaultProperty"))
				relatedDefaultProperty = relatedEntityType.MetadataProperties["http://tempuri.org/EdmCustomSchema.xsd:DefaultProperty"].Value.ToString();

			displayValue = string.Format("{0}.{1}.{2}", entityVariable, relatedEntityTypeName, relatedDefaultProperty);
        }
#>
        <td>
            {{ <#= displayValue #> }}
        </td>
<#
    }
#>
        <td>
            <a href="#/<#= entityTypeName #>/edit/{{ <#= entityVariable #>.<#= primaryKey #> }}">Edit</a> |
            <a href="" data-ng-click="vm.<#= entityDeleteMethod #>(<#= entityVariable #>)">
                Delete
            </a>
        </td>
    </tr>
</table>
<#
}

fileManager.Process();

#>
