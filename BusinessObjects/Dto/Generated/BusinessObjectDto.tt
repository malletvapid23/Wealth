<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ include file="..\..\..\DataObjects\Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true; 
if (!executeMe)
	return string.Empty;

const string inputFile = @"..\..\..\DataObjects\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = code.Escape(entityType);
	var entityDtoName = string.Format("{0}Dto", entityTypeName);
	var entityVariable = codeStringGenerator.GetCamelCase(entityTypeName);
	var outputFileName = string.Format(@"{0}.cs", entityDtoName);

    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entityType);
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);

    fileManager.StartNewFile(outputFileName);

#>
<#= codeStringGenerator.WriteHeader() #>
namespace BusinessObjects.Dto
{
    using System;
    using System.ComponentModel.DataAnnotations;

    public class <#=entityDtoName#>
    {
<#

#>
        public <#=entityDtoName#>()
        {
<#
    foreach (var edmProperty in propertiesWithDefaultValues)
    {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
    }
#>
        }

        public <#=entityDtoName#>(<#=entityTypeName#> <#=entityVariable#>)
        {
<#
    foreach (var edmProperty in simpleProperties)
    {
#>
            this.<#=code.Escape(edmProperty)#> = <#=entityVariable#>.<#=code.Escape(edmProperty)#>;
<#
    }
#>
        }

<#

    foreach (var edmProperty in simpleProperties)
    {
		if (!edmProperty.Nullable) {
#>
        [Required]
<#
    }
#>
        <#=codeStringGenerator.Property(edmProperty)#>

<#
    }

    if (simpleProperties.Any())
    {
#>
        public <#=entityTypeName#> ToBusinessObject()
        {
            return new <#=entityTypeName#>()
            {
<#
        foreach (var edmProperty in simpleProperties)
        {
#>
<# if (simpleProperties.Last() != edmProperty) { #>
                <#=code.Escape(edmProperty)#> = <#=code.Escape(edmProperty)#>,
<# } else { #>
                <#=code.Escape(edmProperty)#> = <#=code.Escape(edmProperty)#>
<# } #>
<#
        }
#>
            };
        }
<#
    }
#>
    }
}
<#

}

fileManager.Process();

#>
