<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ include file="..\..\DataObjects\Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true; 
if (!executeMe)
	return string.Empty;

const string inputFile = @"..\..\DataObjects\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = code.Escape(entityType);
	var entityMetadataName = string.Format("{0}Metadata", entityTypeName);
	var primaryKey = entityType.KeyMembers[0];
	var outputFileName = string.Format(@"{0}.cs", entityTypeName);

    fileManager.StartNewFile(outputFileName);
#>
<#= codeStringGenerator.WriteHeader() #>
namespace BusinessObjects
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using BusinessObjects.Metadata;

    [MetadataType(typeof(<#=entityMetadataName#>))]
    <#=codeStringGenerator.EntityClassOpening(entityType)#>
    {
<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entityType);
    var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entityType);
    var complexProperties = typeMapper.GetComplexProperties(entityType);

    if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
    {
#>
        public <#=entityTypeName#>()
        {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
            this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var navigationProperty in collectionNavigationProperties)
        {
#>
            this.<#=code.Escape(navigationProperty)#> = new HashSet<<#=typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType())#>>();
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
            this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
        }

<#
    }
  
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
        <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var complexProperty in complexProperties)
        {
#>
        <#=codeStringGenerator.Property(complexProperty)#>
<#
        }
    }

    var navigationProperties = typeMapper.GetNavigationProperties(entityType);
    if (navigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in navigationProperties)
        {
#>
        <#=codeStringGenerator.NavigationProperty(navigationProperty)#>
<#
        }
    }
#>
    }
}
<#
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
	// Variables
	var outputFileName = string.Format(@"{0}.cs", complex.Name);

    fileManager.StartNewFile(outputFileName);
#>
<#= codeStringGenerator.WriteHeader() #>
namespace BusinessObjects
{
    <#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
    {
<#
    var complexProperties = typeMapper.GetComplexProperties(complex);
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
        public <#=code.Escape(complex)#>()
        {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
            this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
            this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
        }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
        <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }
#>
    }
}
<#
    
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
	// Variables
	var outputFileName = string.Format(@"{0}.cs", enumType.Name);

    fileManager.StartNewFile(outputFileName);
#>
<#= codeStringGenerator.WriteHeader() #>
namespace BusinessObjects
{
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
    [Flags]
<#
    }
#>
    <#=codeStringGenerator.EnumOpening(enumType)#>
    {
<#
    var foundOne = false;
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
        <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
    }
}
<#
}

fileManager.Process();

#>
