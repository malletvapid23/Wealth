<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="$(SolutionDir)Framework\T4\EF.Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true;
if (!executeMe)
	return string.Empty;

const string connectionString = @"Server=(LocalDb)\MSSQLLocalDB;Database=WealthEconomy;Integrated Security=True;MultipleActiveResultSets=True";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var edmMetadataLoader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
IEnumerable<GlobalItem> itemCollection;
using (var db = new WealthEconomyContext(connectionString))
	itemCollection = edmMetadataLoader.CreateEdmItemCollection(db);
var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), connectionString))
{
    return string.Empty;
}

foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
{
	// Variables
	var entitySetName = entitySet.Name;
	var entityType = entitySet.ElementType;
	var entityTypeName = typeMapper.GetTypeName(entityType);
	var entityVariable = codeStringGenerator.GetCamelCase(entityTypeName);
	var controllerName = string.Format("{0}Controller", entitySetName);
	var baseControllerName = string.Format("Base{0}", controllerName);
    var unitOfWorkName = string.Format("{0}UnitOfWork", entityTypeName);	
	//var primaryKey = entityType.KeyMembers[0];
    //var primaryKeyShortTypeName = typeMapper.GetTypeName(primaryKey.TypeUsage);

	EdmMember primaryKey = null;
	if (entityType.KeyMembers.Count == 1)
	{
		primaryKey = entityType.KeyMembers[0];
	}
	else
	{
		foreach (var key in entityType.KeyMembers)
		{
			if (key.Name != "UserId")
				primaryKey = key;
		}
	}

	var primaryKeyVariable = entityType.KeyMembers.Count == 1 ? "key" : codeStringGenerator.GetCamelCase(primaryKey.Name);
	var primaryKeyTypeName = typeMapper.GetTypeName(primaryKey.TypeUsage);

	var routePrefix = string.Format("odata/{0}", entityTypeName);
    var simpleProperties = typeMapper.GetSimpleProperties(entityType);
    var relatedProperties = typeMapper.GetRelatedNavigationProperties(entityType);
	var hasUserId = simpleProperties.Any(property => property.Name == "UserId");
	var businessObjectType = typeMapper.GetBusinessObjectType(entityTypeName);
	
	var outputFileName = string.Format(@"{0}.cs", controllerName);

    fileManager.StartNewFile(outputFileName);
#>
<#= codeStringGenerator.WriteHeader() #>
namespace forCrowd.WealthEconomy.WebApi.Controllers.OData
{
    using forCrowd.WealthEconomy.BusinessObjects;
    using forCrowd.WealthEconomy.Facade;
    using Microsoft.AspNet.Identity;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;
<# if (hasUserId) { #>
    using WebApi.Controllers.Extensions;
<# } #>

    public abstract class <#= baseControllerName #> : BaseODataController
    {
        public <#= baseControllerName #>()
		{
			MainUnitOfWork = new <#= unitOfWorkName #>();		
		}

		protected <#= unitOfWorkName #> MainUnitOfWork { get; private set; }

        // GET <#= routePrefix #>
        //[Queryable]
        public virtual IQueryable<<#= entityTypeName #>> Get()
        {
<# if (hasUserId) { #>
			var userId = this.GetCurrentUserId();
			if (!userId.HasValue)
                throw new HttpResponseException(HttpStatusCode.Unauthorized);	

<# } #>
			var list = MainUnitOfWork.AllLive;
<# if (hasUserId) { #>
			list = list.Where(item => item.UserId == userId.Value);
<# } #>
            return list;
        }

        // GET <#= routePrefix #>(5)
        //[Queryable]
        public virtual SingleResult<<#= entityTypeName #>> Get([FromODataUri] <#= primaryKeyTypeName #> <#= primaryKeyVariable #>)
        {
            return SingleResult.Create(MainUnitOfWork.AllLive.Where(<#= entityVariable #> => <#= entityVariable #>.<#= primaryKey #> == <#= primaryKeyVariable #>));
        }

        // PUT <#= routePrefix #>(5)
        public virtual async Task<IHttpActionResult> Put([FromODataUri] <#= primaryKeyTypeName #> <#= primaryKeyVariable #>, <#= entityTypeName #> <#= entityVariable #>)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (<#= primaryKeyVariable #> != <#= entityVariable #>.<#= primaryKey #>)
            {
                return BadRequest();
            }

            try
            {
                await MainUnitOfWork.UpdateAsync(<#= entityVariable #>);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MainUnitOfWork.Exists(<#= primaryKeyVariable #>))
                {
                    return NotFound();
                }
                else
                {
                    return Conflict();
                }
            }

            return Ok(<#= entityVariable #>);
        }

        // POST <#= routePrefix #>
        public virtual async Task<IHttpActionResult> Post(<#= entityTypeName #> <#= entityVariable #>)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                await MainUnitOfWork.InsertAsync(<#= entityVariable #>);
            }
            catch (DbUpdateException)
            {
                if (MainUnitOfWork.Exists(<#= entityVariable #>.<#= primaryKey #>))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return Created(<#= entityVariable #>);
        }

        // PATCH <#= routePrefix #>(5)
        [AcceptVerbs("PATCH", "MERGE")]
        public virtual async Task<IHttpActionResult> Patch([FromODataUri] <#= primaryKeyTypeName #> <#= primaryKeyVariable #>, Delta<<#= entityTypeName #>> patch)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var <#= entityVariable #> = await MainUnitOfWork.AllLive.SingleOrDefaultAsync(item => item.<#= primaryKey #> == <#= primaryKeyVariable #>);
            if (<#= entityVariable #> == null)
            {
                return NotFound();
            }

            var patchEntity = patch.GetEntity();

            // TODO How is passed ModelState.IsValid?
            if (patchEntity.RowVersion == null)
                throw new InvalidOperationException("RowVersion property of the entity cannot be null");

            if (!<#= entityVariable #>.RowVersion.SequenceEqual(patchEntity.RowVersion))
            {
                return Conflict();
            }

            patch.Patch(<#= entityVariable #>);
            await MainUnitOfWork.UpdateAsync(<#= entityVariable #>);

            return Ok(<#= entityVariable #>);
        }

        // DELETE <#= routePrefix #>(5)
        public virtual async Task<IHttpActionResult> Delete([FromODataUri] <#= primaryKeyTypeName #> <#= primaryKeyVariable #>)
        {
            var <#= entityVariable #> = await MainUnitOfWork.AllLive.SingleOrDefaultAsync(item => item.<#= primaryKey #> == <#= primaryKeyVariable #>);
            if (<#= entityVariable #> == null)
            {
                return NotFound();
            }

            await MainUnitOfWork.DeleteAsync(<#= entityVariable #>.<#= primaryKey #>);

            return StatusCode(HttpStatusCode.NoContent);
        }
    }

    public partial class <#= controllerName #> : <#= baseControllerName #>
    {
	}
}
<#
}

fileManager.Process();

#>
