<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ include file="..\..\DataObjects\Utility.ttinclude"#><#

// To be able to control whether it's going to be executed
var executeMe = true; 
if (!executeMe)
	return string.Empty;

const string inputFile = @"..\..\DataObjects\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = typeMapper.GetTypeName(entityType);
	var entityUnitOfWorkName = string.Format("{0}UnitOfWork", entityTypeName);
	var outputFileName = string.Format(@"{0}.cs", entityUnitOfWorkName);

    fileManager.StartNewFile(outputFileName);

#>
<#= codeStringGenerator.WriteHeader() #>
namespace Facade
{
    using BusinessObjects;

    public partial class <#= entityUnitOfWorkName #> : BaseUnitOfWork<<#= entityTypeName #>>
    {
    }
}
<#
    
}

fileManager.Process();

#>
