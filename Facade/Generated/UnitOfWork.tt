<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="$(SolutionDir)Framework\T4\EF.Utility.ttinclude"#>
<#@ output extension=".txt"#><#

// To be able to control whether it's going to be executed
var executeMe = false;
if (!executeMe)
	return string.Empty;

const string connectionString = @"Server=(LocalDb)\MSSQLLocalDB;Database=WealthEconomy;Integrated Security=True;MultipleActiveResultSets=True";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var edmMetadataLoader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
IEnumerable<GlobalItem> itemCollection;
using (var db = new WealthEconomyContext(connectionString))
	itemCollection = edmMetadataLoader.CreateEdmItemCollection(db);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), connectionString))
{
    return string.Empty;
}

foreach (var entityType in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	// Variables
	var entityTypeName = typeMapper.GetTypeName(entityType);

	if (entityTypeName.StartsWith("Identity"))
		continue;

	var entityUnitOfWorkName = string.Format("{0}UnitOfWork", entityTypeName);
	var outputFileName = string.Format(@"{0}.cs", entityUnitOfWorkName);

    fileManager.StartNewFile(outputFileName);

#>
<#= codeStringGenerator.WriteHeader() #>
namespace Facade
{
    using BusinessObjects;

    public partial class <#= entityUnitOfWorkName #> : BaseUnitOfWork<<#= entityTypeName #>>
    {
    }
}
<#
    
}

fileManager.Process();

#>
