<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ include file="..\Utility.ttinclude"#><#@ 
 output extension=".cs"#><#

/*
	An experimental t4 for repositories.
	Instead of using GenericRepository base class, this one implements all the method in itself.
	Currently not in use.
	SH - 11 Mar. '14
*/

// To be able to control whether it's going to be executed
var executeMe = false; 
if (!executeMe)
	return string.Empty;

const string inputFile = @"..\..\DataObjects\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}

foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
{
	// Variables
	var entityName = typeMapper.GetTypeName(entitySet.ElementType);
	var entityNameLowerCamelCase = string.Format("{0}{1}", entityName.ToLower()[0], entityName.Substring(1));
	var entitySetName = code.Escape(entitySet);
	var primaryKey = entitySet.ElementType.KeyMembers[0]; // Multiple PK not allowed?
	var repositoryName = string.Format("{0}XpRepository", entityName);

	// Output file
	var outputFile = string.Format("{0}.cs", repositoryName);

    fileManager.StartNewFile(outputFile);

	BeginNamespace(code);
#>
    using BusinessObjects;
    using System;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;

    public partial class <#= repositoryName #> : IGenericRepository<<#= entityName #>, <#= code.Escape(primaryKey.TypeUsage) #>>
    {
		readonly DbSet<<#= entityName #>> dbSet;

        public <#=repositoryName#>(<#=code.Escape(container)#> context)
        {
			Context = context;
			dbSet = Context.<#= entitySetName #>;
		}

		public <#=code.Escape(container)#> Context { get; private set; }

		public IQueryable<<#= entityName #>> All
		{
			get { return dbSet; }
		}

		public IQueryable<<#= entityName #>> AllLive
		{
			get { return dbSet.Where(entity => !entity.DeletedOn.HasValue); }
		}

		public IQueryable<<#= entityName #>> AllIncluding(params Expression<Func<<#= entityName #>, object>>[] includeProperties)
		{
			return AllIncludingBase(All, includeProperties);
		}

		public IQueryable<<#= entityName #>> AllLiveIncluding(params Expression<Func<<#= entityName #>, object>>[] includeProperties)
		{
			return AllIncludingBase(AllLive, includeProperties);
		}

		IQueryable<<#= entityName #>> AllIncludingBase(IQueryable<<#= entityName #>> baseQuery, params Expression<Func<<#= entityName #>, object>>[] includeProperties)
		{
			var query = baseQuery;
			foreach (var includeProperty in includeProperties)
				query = query.Include(includeProperty);
			return query;
		}

		public <#= entityName #> Find(<#= code.Escape(primaryKey.TypeUsage) #> id)
		{
			return dbSet.Find(id);
		}

		public void InsertOrUpdate(<#= entityName #> entity)
		{
			if (entity.Id.Equals(default(<#= code.Escape(primaryKey.TypeUsage) #>)))
			{
				// New entity
				entity.CreatedOn = DateTime.Now;
				entity.ModifiedOn = DateTime.Now;
				dbSet.Add(entity);
			}
			else
			{
				// Existing entity
				entity.ModifiedOn = DateTime.Now;
				Context.Entry(entity).State = EntityState.Modified;
			}
		}

		public void Delete(<#= code.Escape(primaryKey.TypeUsage) #> id)
		{
			var entity = dbSet.Find(id);
			dbSet.Remove(entity);
		}

		public void Save()
		{
			Context.SaveChanges();
		}

		public void Dispose()
		{
			Context.Dispose();
		}
    }
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
	codeNamespace = codeNamespace.Replace(".Generated", "");
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        // PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        // PopIndent();
#>
}
<#+
    }
}
#>