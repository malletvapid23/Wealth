<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ include file="..\Utility.ttinclude"#><#@ 
 output extension=".cs"#><#

// To be able to control whether it's going to be executed
var executeMe = true;

// To be able generate only one of the entities (Leave empty for all)
var entityNameToGenerate = string.Empty;

// Execute me?
if (!executeMe)
	return string.Empty;

const string inputFile = @"..\..\DataObjects\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}

foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
{
	// Variables
	var entityName = typeMapper.GetTypeName(entitySet.ElementType);
	var entityNameLowerCamelCase = string.Format("{0}{1}", entityName.ToLower()[0], entityName.Substring(1));
	var entitySetName = code.Escape(entitySet);
	var primaryKey = entitySet.ElementType.KeyMembers[0]; // Multiple PK not allowed?

	// Check entityNameToGenerate
	if (!string.IsNullOrWhiteSpace(entityNameToGenerate)
		&& entityNameToGenerate.ToLower() != entityName.ToLower())
		continue;

	// Output file
	var outputFile = string.Format(@"{0}Repository.cs", entityName);

    fileManager.StartNewFile(outputFile);

	BeginNamespace(code);
#>
    using BusinessObjects;

    public partial class <#= entityName #>Repository : GenericRepository<<#= entityName #>, <#= code.Escape(primaryKey.TypeUsage) #>>
    {
        public <#=entityName#>Repository(<#=code.Escape(container)#> context)
            : base(context)
        {
        }
    }
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
	codeNamespace = codeNamespace.Replace(".Generated", "");
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        // PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        // PopIndent();
#>
}
<#+
    }
}
#>